#!/bin/bash

echo "üéäüåôüí° –°–û–ó–î–ê–Å–ú DARK MODE –î–õ–Ø –£–°–¢–ê–í–®–ï–ì–û –ë–£–•–ì–ê–õ–¢–ï–†–ê! üí°üåôüéä"
echo ""
echo "üéØ –§–ò–õ–û–°–û–§–ò–Ø: –ó–∞–±–æ—Ç–∞ –æ –≥–ª–∞–∑–∞—Ö –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"
echo "üé® –ö–û–ù–¶–ï–ü–¶–ò–Ø: VS Code —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞"
echo ""

cd f

echo "1Ô∏è‚É£ –°–û–ó–î–ê–Å–ú THEME PROVIDER:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# –°–æ–∑–¥–∞—ë–º Theme Context
mkdir -p src/contexts
cat > src/contexts/ThemeContext.tsx << 'EOF'
import React, { createContext, useContext, useState, useEffect } from 'react';

type Theme = 'light' | 'dark' | 'auto';
type ThemeMode = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  currentMode: ThemeMode;
  setTheme: (theme: Theme) => void;
  toggleTheme: () => void;
  isDarkMode: boolean;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider');
  }
  return context;
};

interface ThemeProviderProps {
  children: React.ReactNode;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>('light');
  const [currentMode, setCurrentMode] = useState<ThemeMode>('light');

  // üåô AUTO DARK MODE: –ø–æ—Å–ª–µ 18:00 –∏–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
  const getAutoTheme = (): ThemeMode => {
    const hour = new Date().getHours();
    const isEvening = hour >= 18 || hour <= 6; // 18:00 - 06:00
    
    // üí° –ë–£–î–£–©–ê–Ø –§–£–ù–ö–¶–ò–Ø: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    // const isUserTired = detectUserFatigue();
    
    return isEvening ? 'dark' : 'light';
  };

  useEffect(() => {
    // üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    const savedTheme = localStorage.getItem('accountantTheme') as Theme;
    if (savedTheme) {
      setTheme(savedTheme);
    } else {
      // üåô –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é auto (–∑–∞–±–æ—Ç–∞ –æ –≥–ª–∞–∑–∞—Ö)
      setTheme('auto');
    }
  }, []);

  useEffect(() => {
    // üé® –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    let mode: ThemeMode;
    
    if (theme === 'auto') {
      mode = getAutoTheme();
    } else {
      mode = theme as ThemeMode;
    }
    
    setCurrentMode(mode);
    
    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('accountantTheme', theme);
    
    // üé® –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∫–ª–∞—Å—Å
    document.documentElement.className = mode === 'dark' ? 'dark-theme' : 'light-theme';
    
    console.log('üé® Theme applied:', { theme, mode, time: new Date().getHours() });
  }, [theme]);

  const handleSetTheme = (newTheme: Theme) => {
    setTheme(newTheme);
  };

  const toggleTheme = () => {
    setTheme(currentMode === 'dark' ? 'light' : 'dark');
  };

  const value = {
    theme,
    currentMode,
    setTheme: handleSetTheme,
    toggleTheme,
    isDarkMode: currentMode === 'dark'
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};
EOF

echo "‚úÖ ThemeContext —Å–æ–∑–¥–∞–Ω!"

echo ""
echo "2Ô∏è‚É£ –°–û–ó–î–ê–Å–ú CSS –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø DARK MODE:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# –°–æ–∑–¥–∞—ë–º CSS —Ñ–∞–π–ª —Å —Ç–µ–º–∞–º–∏
cat > src/styles/themes.css << 'EOF'
/* üåô DARK MODE –î–õ–Ø –£–°–¢–ê–í–®–ï–ì–û –ë–£–•–ì–ê–õ–¢–ï–†–ê */
/* –í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ VS Code Dark Theme */

:root {
  /* ‚òÄÔ∏è LIGHT THEME (—ç–Ω–µ—Ä–≥–∏—á–Ω–æ–µ —É—Ç—Ä–æ) */
  --bg-primary: #ffffff;
  --bg-secondary: #f8f9fa;
  --bg-sidebar: #1e293b;
  --bg-header: #f7931e;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --text-light: #ffffff;
  --border-color: #e5e7eb;
  --accent-color: #f7931e;
  --success-color: #10b981;
  --warning-color: #f59e0b;
  --error-color: #ef4444;
  --shadow: rgba(0, 0, 0, 0.1);
}

.dark-theme {
  /* üåô DARK THEME (–∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è —É—Å—Ç–∞–ª—ã—Ö –≥–ª–∞–∑) */
  --bg-primary: #1e1e1e;
  --bg-secondary: #252526;
  --bg-sidebar: #1e1e1e;
  --bg-header: #2d2d30;
  --text-primary: #cccccc;
  --text-secondary: #969696;
  --text-light: #ffffff;
  --border-color: #3e3e42;
  --accent-color: #ff8c00;
  --success-color: #4ec9b0;
  --warning-color: #dcdcaa;
  --error-color: #f48771;
  --shadow: rgba(0, 0, 0, 0.3);
}

/* üé® –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ö –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú */
.theme-bg-primary { background-color: var(--bg-primary); }
.theme-bg-secondary { background-color: var(--bg-secondary); }
.theme-bg-sidebar { background-color: var(--bg-sidebar); }
.theme-bg-header { background-color: var(--bg-header); }
.theme-text-primary { color: var(--text-primary); }
.theme-text-secondary { color: var(--text-secondary); }
.theme-text-light { color: var(--text-light); }
.theme-border { border-color: var(--border-color); }
.theme-accent { color: var(--accent-color); }

/* üåô –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–¢–ò–õ–ò –î–õ–Ø DARK MODE */
.dark-theme .bg-white { background-color: var(--bg-secondary) !important; }
.dark-theme .text-gray-900 { color: var(--text-primary) !important; }
.dark-theme .text-gray-600 { color: var(--text-secondary) !important; }
.dark-theme .border-gray-200 { border-color: var(--border-color) !important; }

/* üìä DASHBOARD –ö–ê–†–¢–û–ß–ö–ò –í DARK MODE */
.dark-theme .dashboard-card {
  background: linear-gradient(135deg, #2d2d30 0%, #252526 100%);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
}

/* üì± SIDEBAR –í DARK MODE */
.dark-theme .sidebar {
  background: linear-gradient(180deg, #1e1e1e 0%, #252526 100%);
  border-right: 1px solid var(--border-color);
}

/* üß≠ HEADER –í DARK MODE */
.dark-theme .header {
  background: linear-gradient(90deg, #2d2d30 0%, #3e3e42 100%);
  border-bottom: 1px solid var(--border-color);
}

/* üìã –¢–ê–ë–õ–ò–¶–´ –í DARK MODE */
.dark-theme table {
  background-color: var(--bg-secondary);
  color: var(--text-primary);
}

.dark-theme tbody tr:hover {
  background-color: #3e3e42;
}

/* üé® SMOOTH TRANSITIONS */
* {
  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
}
EOF

echo "‚úÖ CSS —Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã!"

echo ""
echo "3Ô∏è‚É£ –î–û–ë–ê–í–õ–Ø–ï–ú THEME TOGGLE –í SIDEBAR:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Backup –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CompanySidebar
cp src/components/company/CompanySidebar.tsx src/components/company/CompanySidebar.tsx.before_theme

cat > src/components/company/CompanySidebar.tsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { NavLink, useLocation } from 'react-router-dom';
import { ChevronDown, ChevronRight, GripVertical, Star, Moon, Sun, Clock } from 'lucide-react';
import { useTheme } from '../../contexts/ThemeContext';

// ... (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É)

interface SidebarItem {
  id: string;
  icon: string;
  title: string;
  route: string;
  expandable?: boolean;
  priority: number;
  isPinned?: boolean;
  badge?: string | null;
}

interface SubmenuState {
  warehouse: boolean;
  banking: boolean;
  purchases: boolean;
  sales: boolean;
}

const CompanySidebar: React.FC = () => {
  const location = useLocation();
  const { theme, currentMode, setTheme, toggleTheme, isDarkMode } = useTheme();
  
  // üéØ SIDEBAR ITEMS (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
  const [sidebarItems, setSidebarItems] = useState<SidebarItem[]>([
    { id: 'dashboard', icon: "üìä", title: "Dashboard", route: "/dashboard", priority: 1, isPinned: true, badge: null },
    { id: 'clients', icon: "üë•", title: "Clients", route: "/clients", priority: 2, isPinned: false, badge: null },
    { id: 'products', icon: "üì¶", title: "Products", route: "/products", priority: 3, isPinned: false, badge: null },
    { id: 'sales', icon: "üí∞", title: "Sales", route: "/sales", expandable: true, priority: 4, isPinned: false, badge: null },
    { id: 'purchases', icon: "üõí", title: "Purchases", route: "/purchases", expandable: true, priority: 5, isPinned: false, badge: null },
    { id: 'warehouse', icon: "üè≠", title: "Warehouse", route: "/warehouse", expandable: true, priority: 6, isPinned: false, badge: null },
    { id: 'accounts', icon: "üìã", title: "Chart of Accounts", route: "/chart-of-accounts", priority: 7, isPinned: false, badge: null },
    { id: 'banking', icon: "üè¶", title: "Banking", route: "/banking", expandable: true, priority: 8, isPinned: false, badge: null },
    { id: 'tabbook', icon: "‚ö°", title: "TAB-–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", route: "/tabbook", priority: 9, isPinned: false, badge: "NEW" },
    { id: 'cloudide', icon: "‚òÅÔ∏è", title: "Cloud IDE", route: "/cloudide", priority: 10, isPinned: false, badge: "BETA" },
    { id: 'settings', icon: "‚öôÔ∏è", title: "Settings", route: "/settings", priority: 11, isPinned: true, badge: null }
  ]);

  // ... (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É drag&drop)

  // üé® THEME TOGGLE COMPONENT
  const ThemeToggle = () => (
    <div className="border-t border-slate-700 p-4 space-y-3">
      <div className="text-xs text-slate-400 font-medium">THEME FOR TIRED EYES</div>
      
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2 text-sm">
          {theme === 'light' && <Sun className="w-4 h-4 text-yellow-400" />}
          {theme === 'dark' && <Moon className="w-4 h-4 text-blue-400" />}
          {theme === 'auto' && <Clock className="w-4 h-4 text-purple-400" />}
          <span className="text-slate-300">
            {theme === 'light' && '–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ —É—Ç—Ä–æ'}
            {theme === 'dark' && '–ö–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –≥–ª–∞–∑'}
            {theme === 'auto' && '–ê–≤—Ç–æ (18:00-06:00)'}
          </span>
        </div>
        
        <button
          onClick={() => {
            const themes: ('light' | 'dark' | 'auto')[] = ['light', 'dark', 'auto'];
            const currentIndex = themes.indexOf(theme);
            const nextTheme = themes[(currentIndex + 1) % themes.length];
            setTheme(nextTheme);
          }}
          className="p-1 rounded hover:bg-slate-700 transition-colors"
          title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
        >
          <div className="w-6 h-6 rounded border-2 border-slate-600 flex items-center justify-center">
            {theme === 'light' && '‚òÄÔ∏è'}
            {theme === 'dark' && 'üåô'}
            {theme === 'auto' && 'üïê'}
          </div>
        </button>
      </div>
      
      <div className="text-xs text-slate-500">
        {isDarkMode ? 'üåô –ú—è–≥–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Å—Ç–∞–≤—à–∏—Ö –≥–ª–∞–∑' : '‚òÄÔ∏è –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'}
      </div>
    </div>
  );

  return (
    <div className={`w-64 flex-shrink-0 h-full flex flex-col ${isDarkMode ? 'theme-bg-sidebar' : 'bg-slate-800'} text-white`}>
      {/* ... (—Å–æ—Ö—Ä–∞–Ω—è–µ–º header –∏ navigation) */}
      
      {/* üåô THEME TOGGLE */}
      <ThemeToggle />
      
      {/* Footer */}
      <div className="border-t border-slate-700 p-4">
        <button
          onClick={() => {
            localStorage.removeItem('currentCompanyId');
            localStorage.removeItem('currentCompanyName');
            window.location.href = '/account/dashboard';
          }}
          className="text-sm text-slate-400 hover:text-white transition-colors w-full text-left flex items-center"
        >
          <span className="mr-2">üîô</span>
          <span>Back to Companies</span>
        </button>
      </div>
    </div>
  );
};

export default CompanySidebar;
EOF

echo "‚úÖ Sidebar —Å Theme Toggle –æ–±–Ω–æ–≤–ª–µ–Ω!"

echo ""
echo "4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "üìä Dark Mode —Å–∏—Å—Ç–µ–º–∞:"
echo "   üåô ThemeContext: $(wc -l src/contexts/ThemeContext.tsx | cut -d' ' -f1) —Å—Ç—Ä–æ–∫"
echo "   üé® CSS —Ç–µ–º—ã: $(wc -l src/styles/themes.css | cut -d' ' -f1) —Å—Ç—Ä–æ–∫"
echo "   ‚öôÔ∏è Theme Toggle: –≤—Å—Ç—Ä–æ–µ–Ω –≤ sidebar"

echo ""
echo "üéäüåôüöÄ DARK MODE –î–õ–Ø –£–°–¢–ê–í–®–ï–ì–û –ë–£–•–ì–ê–õ–¢–ï–†–ê –ì–û–¢–û–í! üöÄüåôüéä"
echo ""
echo "‚úÖ –§–£–ù–ö–¶–ò–ò:"
echo "   üåô Dark Mode - –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ VS Code —Å—Ç–∏–ª—å"
echo "   ‚òÄÔ∏è Light Mode - —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
echo "   üïê Auto Mode - —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø–æ—Å–ª–µ 18:00"
echo "   üé® Smooth transitions –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏"
echo "   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ localStorage"
echo ""
echo "üéØ –ó–ê–ë–û–¢–ê –û –ë–£–•–ì–ê–õ–¢–ï–†–ï:"
echo "   üëÅÔ∏è –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≥–ª–∞–∑–∞"
echo "   üßò –ö–æ–º—Ñ–æ—Ä—Ç –ø—Ä–∏ –¥–æ–ª–≥–æ–π —Ä–∞–±–æ—Ç–µ"
echo "   ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—á–µ—Ä–æ–º"
echo "   üíö VS Code inspired colors"
echo ""
echo "üöÄ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!"
echo "üí´ –¢–ï–ü–ï–†–¨ –°–ò–°–¢–ï–ú–ê –ó–ê–ë–û–¢–ò–¢–°–Ø –û –ì–õ–ê–ó–ê–• –ë–£–•–ì–ê–õ–¢–ï–†–ê!"