#!/bin/bash
# üéØ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–õ–ê–ù –°–ß–ï–¢–û–í + –¢–û–í–ê–†–´
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ project knowledge + —Ç–≤–æ—é –≥–µ–Ω–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é

echo "üéäüî•üéØ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ô ERP –ò–ù–¢–ï–ì–†–ê–¶–ò–ò! üéØüî•üéä"
echo ""
echo "üìä –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–û–¢–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:"
echo "   ‚úÖ ChartOfAccountsController (51 —Å—á—ë—Ç –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞)"
echo "   ‚úÖ AccountingIntegrationService (–∞–≤—Ç–æ–ø—Ä–æ–≤–æ–¥–∫–∏)"
echo "   ‚úÖ ChartOfAccountsPage –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
echo "   ‚úÖ ImportLithuanianModal"
echo ""

# 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤
echo "1Ô∏è‚É£ –°–û–ó–î–ê–Å–ú CHART OF ACCOUNTS PAGE:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

mkdir -p f/src/pages/company/chart-of-accounts
mkdir -p f/src/pages/company/chart-of-accounts/components
mkdir -p f/src/pages/company/chart-of-accounts/types

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤
cat > f/src/pages/company/chart-of-accounts/ChartOfAccountsPage.tsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { useCompanyContext } from '../../../contexts/CompanyContext';
import AccountsTable from './components/AccountsTable';
import AccountForm from './components/AccountForm';
import ImportLithuanianModal from './components/ImportLithuanianModal';
import { ChartAccount, AccountsStats } from './types/chartTypes';

const ChartOfAccountsPage: React.FC = () => {
  const { companyId, company } = useCompanyContext();
  const [accounts, setAccounts] = useState<ChartAccount[]>([]);
  const [stats, setStats] = useState<AccountsStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);
  const [editingAccount, setEditingAccount] = useState<ChartAccount | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('');

  useEffect(() => {
    if (companyId) {
      fetchAccounts();
      fetchStats();
    }
  }, [companyId]);

  const fetchAccounts = async () => {
    try {
      const params = new URLSearchParams();
      if (searchTerm) params.append('search', searchTerm);
      if (filterType) params.append('account_type', filterType);
      params.append('is_active', 'true');

      const response = await fetch(`/api/company/chart-of-accounts?${params}`, {
        headers: { 'Company-ID': companyId.toString() }
      });
      
      const data = await response.json();
      if (data.success) {
        setAccounts(data.accounts);
      }
    } catch (error) {
      console.error('Error fetching accounts:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await fetch(`/api/company/chart-of-accounts/stats`, {
        headers: { 'Company-ID': companyId.toString() }
      });
      
      const data = await response.json();
      if (data.success) {
        setStats(data.stats);
      }
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const handleImportSuccess = (imported: number) => {
    fetchAccounts();
    fetchStats();
    setShowImportModal(false);
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported} —Å—á–µ—Ç–æ–≤ –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞!`);
  };

  const handleAccountSaved = () => {
    fetchAccounts();
    fetchStats();
    setShowAddForm(false);
    setEditingAccount(null);
  };

  const handleDeleteAccount = async (accountId: number) => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç –∏–∑ –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤?')) {
      try {
        const response = await fetch(`/api/company/chart-of-accounts/${accountId}`, {
          method: 'DELETE',
          headers: { 'Company-ID': companyId.toString() }
        });
        
        if (response.ok) {
          fetchAccounts();
          fetchStats();
        }
      } catch (error) {
        console.error('Error deleting account:', error);
      }
    }
  };

  return (
    <div className="h-full flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-gray-900 flex items-center">
              <span className="text-3xl mr-3">üìä</span>
              –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤
            </h1>
            <p className="text-gray-600 mt-1">
              {company?.name} ‚Ä¢ –õ–∏—Ç–æ–≤—Å–∫–∏–π –ø–ª–∞–Ω —Å—á–µ—Ç–æ–≤ (LAS)
            </p>
          </div>
          
          <div className="flex items-center space-x-3">
            {stats && (
              <div className="flex items-center space-x-4 text-sm text-gray-600">
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-blue-500 rounded-full mr-2"></span>
                  –ê–∫—Ç–∏–≤—ã: {stats.ASSET || 0}
                </div>
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-red-500 rounded-full mr-2"></span>
                  –ü–∞—Å—Å–∏–≤—ã: {stats.LIABILITY || 0}
                </div>
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-emerald-500 rounded-full mr-2"></span>
                  –î–æ—Ö–æ–¥—ã: {stats.INCOME || 0}
                </div>
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-orange-500 rounded-full mr-2"></span>
                  –†–∞—Å—Ö–æ–¥—ã: {stats.EXPENSE || 0}
                </div>
              </div>
            )}
            
            <button
              onClick={() => setShowImportModal(true)}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
            >
              <span className="mr-2">üì§</span>
              –ò–º–ø–æ—Ä—Ç –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞
            </button>
            
            <button
              onClick={() => setShowAddForm(true)}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm"
            >
              <span className="mr-2">‚ûï</span>
              –î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç
            </button>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white px-6 py-3 border-b border-gray-200">
        <div className="flex items-center space-x-4">
          <div className="flex-1 max-w-md">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—á—ë—Ç–∞..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && fetchAccounts()}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
            />
          </div>
          
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
          >
            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
            <option value="ASSET">–ê–∫—Ç–∏–≤—ã</option>
            <option value="LIABILITY">–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</option>
            <option value="EQUITY">–ö–∞–ø–∏—Ç–∞–ª</option>
            <option value="INCOME">–î–æ—Ö–æ–¥—ã</option>
            <option value="EXPENSE">–†–∞—Å—Ö–æ–¥—ã</option>
          </select>
          
          <button
            onClick={fetchAccounts}
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 text-sm"
          >
            üîç –ù–∞–π—Ç–∏
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-6">
        {loading ? (
          <div className="flex items-center justify-center h-64">
            <div className="text-gray-500">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤...</div>
          </div>
        ) : accounts.length === 0 ? (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
            <div className="text-center">
              <span className="text-6xl block mb-4">üìä</span>
              <h3 className="text-xl font-medium text-gray-900 mb-2">
                –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç
              </h3>
              <p className="text-gray-600 mb-6">
                –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Ç–æ–≤—Å–∫–∏–π –ø–ª–∞–Ω —Å—á–µ—Ç–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
              </p>
              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => setShowImportModal(true)}
                  className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700"
                >
                  üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ç–æ–≤—Å–∫–∏–π –ø–ª–∞–Ω
                </button>
                <button
                  onClick={() => setShowAddForm(true)}
                  className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700"
                >
                  ‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –≤—Ä—É—á–Ω—É—é
                </button>
              </div>
            </div>
          </div>
        ) : (
          <AccountsTable
            accounts={accounts}
            onEdit={setEditingAccount}
            onDelete={handleDeleteAccount}
          />
        )}
      </div>

      {/* Modals */}
      {showAddForm && (
        <AccountForm
          companyId={companyId}
          account={editingAccount}
          onClose={() => {
            setShowAddForm(false);
            setEditingAccount(null);
          }}
          onSaved={handleAccountSaved}
        />
      )}

      {showImportModal && (
        <ImportLithuanianModal
          companyId={companyId}
          onClose={() => setShowImportModal(false)}
          onImportSuccess={handleImportSuccess}
        />
      )}
    </div>
  );
};

export default ChartOfAccountsPage;
EOF

# 2. –¢–∞–±–ª–∏—Ü–∞ —Å—á–µ—Ç–æ–≤
echo ""
echo "2Ô∏è‚É£ –°–û–ó–î–ê–Å–ú ACCOUNTS TABLE:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cat > f/src/pages/company/chart-of-accounts/components/AccountsTable.tsx << 'EOF'
import React from 'react';
import { ChartAccount } from '../types/chartTypes';

interface AccountsTableProps {
  accounts: ChartAccount[];
  onEdit: (account: ChartAccount) => void;
  onDelete: (accountId: number) => void;
}

const AccountsTable: React.FC<AccountsTableProps> = ({ accounts, onEdit, onDelete }) => {
  const getTypeColor = (type: string) => {
    const colors = {
      'ASSET': 'bg-blue-100 text-blue-800',
      'LIABILITY': 'bg-red-100 text-red-800',
      'EQUITY': 'bg-green-100 text-green-800',
      'INCOME': 'bg-emerald-100 text-emerald-800',
      'EXPENSE': 'bg-orange-100 text-orange-800'
    };
    return colors[type] || 'bg-gray-100 text-gray-800';
  };

  const getAccountIcon = (type: string, code: string) => {
    if (code.startsWith('20') || code.startsWith('203')) return 'üì¶'; // –¢–æ–≤–∞—Ä—ã
    if (code.startsWith('24') || code.startsWith('240')) return 'üí∞'; // –î–µ–±–∏—Ç–æ—Ä—ã
    if (code.startsWith('27') || code.startsWith('280')) return 'üè¶'; // –ë–∞–Ω–∫
    if (code.startsWith('44') || code.startsWith('56')) return 'üè™'; // –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
    if (code.startsWith('70') || code.startsWith('701')) return 'üíé'; // –í—ã—Ä—É—á–∫–∞
    if (code.startsWith('60') || code.startsWith('601')) return 'üìâ'; // –†–∞—Å—Ö–æ–¥—ã
    if (type === 'ASSET') return 'üìä';
    if (type === 'LIABILITY') return 'üìã';
    if (type === 'INCOME') return 'üìà';
    if (type === 'EXPENSE') return 'üìâ';
    return 'üìÑ';
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50 border-b border-gray-200">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –°—á—ë—Ç
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –ù–∞–∑–≤–∞–Ω–∏–µ
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –¢–∏–ø
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –í–∞–ª—é—Ç–∞
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –°—Ç–∞—Ç—É—Å
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                –î–µ–π—Å—Ç–≤–∏—è
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {accounts.map((account) => (
              <tr key={account.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <span className="text-xl mr-3">
                      {getAccountIcon(account.account_type, account.account_code)}
                    </span>
                    <span className="text-sm font-mono font-medium text-gray-900">
                      {account.account_code}
                    </span>
                  </div>
                </td>
                
                <td className="px-6 py-4">
                  <div className="text-sm font-medium text-gray-900">
                    {account.account_name}
                  </div>
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(account.account_type)}`}>
                    {account.account_type}
                  </span>
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {account.currency || 'EUR'}
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    account.is_active 
                      ? 'bg-green-100 text-green-800'
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {account.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                  </span>
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex items-center justify-end space-x-2">
                    <button
                      onClick={() => onEdit(account)}
                      className="text-blue-600 hover:text-blue-800 p-1 rounded"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      onClick={() => onDelete(account.id)}
                      className="text-red-600 hover:text-red-800 p-1 rounded"
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {accounts.length > 0 && (
        <div className="bg-gray-50 px-6 py-3 border-t border-gray-200">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>–í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: {accounts.length}</span>
            <div className="flex items-center space-x-4">
              <span className="flex items-center">
                <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                –ê–∫—Ç–∏–≤—ã
              </span>
              <span className="flex items-center">
                <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                –ü–∞—Å—Å–∏–≤—ã
              </span>
              <span className="flex items-center">
                <span className="w-2 h-2 bg-emerald-500 rounded-full mr-2"></span>
                –î–æ—Ö–æ–¥—ã
              </span>
              <span className="flex items-center">
                <span className="w-2 h-2 bg-orange-500 rounded-full mr-2"></span>
                –†–∞—Å—Ö–æ–¥—ã
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AccountsTable;
EOF

# 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π InventoryStore
echo ""
echo "3Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ –¢–û–í–ê–†–´ + –ü–õ–ê–ù –°–ß–ï–¢–û–í:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cat > f/src/store/inventoryWithAccountsStore.ts << 'EOF'
// üéØ INVENTORY STORE –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –ü–õ–ê–ù–ê –°–ß–ï–¢–û–í
// –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Å—á—ë—Ç—É –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤

interface InventoryItem {
  id: string;
  productCode: string;
  productName: string;
  quantity: number;
  unit: string;
  costPrice: number;
  totalValue: number;
  lastUpdated: string;
  
  // üîó –ü–†–ò–í–Ø–ó–ö–ê –ö –ü–õ–ê–ù–£ –°–ß–ï–¢–û–í
  inventoryAccount: string;  // –°—á—ë—Ç —Ç–æ–≤–∞—Ä–æ–≤ (203, 2040, etc.)
  accountName: string;       // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞
  
  batches: InventoryBatch[];
}

interface InventoryBatch {
  batchId: string;
  purchaseDate: string;
  quantity: number;
  costPrice: number;
  supplierId?: string;
  supplierName?: string;
  remainingQuantity: number;
}

interface AccountingEntry {
  id: string;
  date: string;
  debitAccount: string;
  debitAccountName: string;
  creditAccount: string;
  creditAccountName: string;
  amount: number;
  description: string;
  documentType: 'PURCHASE' | 'SALE';
  documentNumber: string;
  productCode?: string;
}

// üá±üáπ –ü–õ–ê–ù –°–ß–ï–¢–û–í –õ–ò–¢–í–´ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
export const LITHUANIAN_ACCOUNTS = {
  // –¢–æ–≤–∞—Ä—ã (–∫–ª–∞—Å—Å 2)
  '2030': { name: '–°—ã—Ä—å—ë –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', type: 'ASSET' },
  '2040': { name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏', type: 'ASSET' },
  '2041': { name: '–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã', type: 'ASSET' },
  '2042': { name: '–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', type: 'ASSET' },
  '2043': { name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', type: 'ASSET' },
  
  // –î–µ–±–∏—Ç–æ—Ä—ã/–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã
  '2410': { name: '–î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', type: 'ASSET' },
  '4430': { name: '–ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º', type: 'LIABILITY' },
  
  // –ë–∞–Ω–∫
  '2710': { name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞', type: 'ASSET' },
  
  // –î–æ—Ö–æ–¥—ã/–†–∞—Å—Ö–æ–¥—ã
  '6001': { name: '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂', type: 'EXPENSE' },
  '7001': { name: '–í—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂', type: 'INCOME' }
};

class InventoryWithAccountsStore {
  private inventory: Map<string, InventoryItem> = new Map();
  private accountingEntries: AccountingEntry[] = [];

  // üõí –ü–†–ò–•–û–î –¢–û–í–ê–†–ê –° –ü–†–ò–í–Ø–ó–ö–û–ô –ö –°–ß–Å–¢–£
  addPurchaseWithAccount(purchase: {
    productCode: string;
    productName: string;
    quantity: number;
    unit: string;
    costPrice: number;
    supplierId: string;
    supplierName: string;
    documentNumber: string;
    inventoryAccount: string;  // ‚Üê –°–ß–Å–¢ –¢–û–í–ê–†–û–í!
    payableAccount: string;
  }) {
    const batchId = `BATCH-${Date.now()}`;
    const totalAmount = purchase.quantity * purchase.costPrice;

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Ç–∏—é
    const newBatch: InventoryBatch = {
      batchId,
      purchaseDate: new Date().toISOString(),
      quantity: purchase.quantity,
      costPrice: purchase.costPrice,
      supplierId: purchase.supplierId,
      supplierName: purchase.supplierName,
      remainingQuantity: purchase.quantity
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    const existing = this.inventory.get(purchase.productCode);
    if (existing) {
      existing.quantity += purchase.quantity;
      existing.totalValue += totalAmount;
      existing.costPrice = existing.totalValue / existing.quantity; // –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è
      existing.batches.push(newBatch);
      existing.lastUpdated = new Date().toISOString();
    } else {
      const newItem: InventoryItem = {
        id: `INV-${purchase.productCode}`,
        productCode: purchase.productCode,
        productName: purchase.productName,
        quantity: purchase.quantity,
        unit: purchase.unit,
        costPrice: purchase.costPrice,
        totalValue: totalAmount,
        lastUpdated: new Date().toISOString(),
        inventoryAccount: purchase.inventoryAccount,  // ‚Üê –ü–†–ò–í–Ø–ó–ö–ê –ö –°–ß–Å–¢–£!
        accountName: LITHUANIAN_ACCOUNTS[purchase.inventoryAccount]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—á—ë—Ç',
        batches: [newBatch]
      };
      this.inventory.set(purchase.productCode, newItem);
    }

    // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≤–æ–¥–∫—É
    this.addAccountingEntry({
      id: `ACC-${Date.now()}`,
      date: new Date().toISOString(),
      debitAccount: purchase.inventoryAccount,
      debitAccountName: LITHUANIAN_ACCOUNTS[purchase.inventoryAccount]?.name || '',
      creditAccount: purchase.payableAccount,
      creditAccountName: LITHUANIAN_ACCOUNTS[purchase.payableAccount]?.name || '',
      amount: totalAmount,
      description: `–ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ${purchase.productName} –æ—Ç ${purchase.supplierName}`,
      documentType: 'PURCHASE',
      documentNumber: purchase.documentNumber,
      productCode: purchase.productCode
    });

    this.saveToStorage();
    return { success: true, batchId, totalAmount };
  }

  // üí∞ –ü–†–û–î–ê–ñ–ê –¢–û–í–ê–†–ê (FIFO + –ø—Ä–æ–≤–æ–¥–∫–∏)
  addSaleWithAccounting(sale: {
    productCode: string;
    quantity: number;
    salePrice: number;
    customerId: string;
    customerName: string;
    documentNumber: string;
    cogsAccount?: string;       // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
    revenueAccount?: string;    // –í—ã—Ä—É—á–∫–∞
    receivableAccount?: string; // –î–µ–±–∏—Ç–æ—Ä–∫–∞
  }) {
    const item = this.inventory.get(sale.productCode);
    if (!item) {
      throw new Error(`–¢–æ–≤–∞—Ä ${sale.productCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ`);
    }

    if (item.quantity < sale.quantity) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${item.quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${sale.quantity}`);
    }

    // FIFO —Å–ø–∏—Å–∞–Ω–∏–µ
    let remainingToSell = sale.quantity;
    let totalCostPrice = 0;

    for (const batch of item.batches) {
      if (remainingToSell <= 0) break;
      
      if (batch.remainingQuantity > 0) {
        const quantityFromBatch = Math.min(batch.remainingQuantity, remainingToSell);
        totalCostPrice += quantityFromBatch * batch.costPrice;
        batch.remainingQuantity -= quantityFromBatch;
        remainingToSell -= quantityFromBatch;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    item.quantity -= sale.quantity;
    item.totalValue -= totalCostPrice;
    item.lastUpdated = new Date().toISOString();
    item.batches = item.batches.filter(b => b.remainingQuantity > 0);

    const saleAmount = sale.quantity * sale.salePrice;
    const profit = saleAmount - totalCostPrice;

    // –ü—Ä–æ–≤–æ–¥–∫–∞ 1: D—Ç –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ö—Ç –¢–æ–≤–∞—Ä—ã
    this.addAccountingEntry({
      id: `ACC-${Date.now()}-1`,
      date: new Date().toISOString(),
      debitAccount: sale.cogsAccount || '6001',
      debitAccountName: LITHUANIAN_ACCOUNTS[sale.cogsAccount || '6001']?.name || '',
      creditAccount: item.inventoryAccount,
      creditAccountName: item.accountName,
      amount: totalCostPrice,
      description: `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏: ${item.productName}`,
      documentType: 'SALE',
      documentNumber: sale.documentNumber,
      productCode: sale.productCode
    });

    // –ü—Ä–æ–≤–æ–¥–∫–∞ 2: D—Ç –î–µ–±–∏—Ç–æ—Ä–∫–∞ –ö—Ç –í—ã—Ä—É—á–∫–∞
    this.addAccountingEntry({
      id: `ACC-${Date.now()}-2`,
      date: new Date().toISOString(),
      debitAccount: sale.receivableAccount || '2410',
      debitAccountName: LITHUANIAN_ACCOUNTS[sale.receivableAccount || '2410']?.name || '',
      creditAccount: sale.revenueAccount || '7001',
      creditAccountName: LITHUANIAN_ACCOUNTS[sale.revenueAccount || '7001']?.name || '',
      amount: saleAmount,
      description: `–í—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏: ${sale.customerName}`,
      documentType: 'SALE',
      documentNumber: sale.documentNumber,
      productCode: sale.productCode
    });

    this.saveToStorage();

    return {
      costPrice: totalCostPrice,
      saleAmount,
      profit,
      remainingStock: item.quantity
    };
  }

  // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
  getInventory(): InventoryItem[] {
    return Array.from(this.inventory.values()).sort((a, b) => a.productName.localeCompare(b.productName));
  }

  getInventoryByProduct(productCode: string): InventoryItem | undefined {
    return this.inventory.get