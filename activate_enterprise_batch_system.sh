#!/bin/bash
# 🚀 АКТИВАЦИЯ ENTERPRISE BATCH SYSTEM

echo "🎊🔥🚀 АКТИВИРУЕМ ENTERPRISE BATCH СИСТЕМУ! 🚀🔥🎊"
echo ""
echo "🎯 ПРОБЛЕМА: Batch tracking не активен в Purchases/Warehouse/Sales"
echo "💡 РЕШЕНИЕ: Подключить готовую Enterprise архитектуру"

echo ""
echo "1️⃣ ПРОВЕРЯЕМ ГОТОВНОСТЬ СИСТЕМЫ:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "ssh root@207.154.220.86"
echo "cd /var/www/ai/itsolar"

echo ""
echo "А) Проверяем базу данных:"
echo "ls -la prisma/migrations/ | grep batch"
echo "# Должны быть migration файлы с batch tables"

echo ""
echo "Б) Проверяем Backend контроллеры:"
echo "find b/src -name '*batch*' -type f"
echo "grep -r 'product_batches' b/src/controllers/"
echo "grep -r 'batch_movements' b/src/controllers/"

echo ""
echo "2️⃣ АКТИВИРУЕМ BATCH CREATION В PURCHASES:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo ""
echo "В файле: b/src/controllers/company/purchasesController.js"
echo "Найти строку: // 3. АВТООБНОВЛЕНИЕ СКЛАДА"
echo "Заменить на:"
echo ""
echo "        // 3. СОЗДАНИЕ ПАРТИЙ (BATCH SYSTEM)"
echo "        for (const item of processedItems) {"
echo "          try {"
echo "            // Создаём партию для каждой позиции покупки"
echo "            const batch = await tx.product_batches.create({"
echo "              data: {"
echo "                company_id: companyId,"
echo "                batch_number: \`BATCH-\${purchase.id}-\${item.product_id}\`,"
echo "                product_id: item.product_id,"
echo "                warehouse_id: warehouse_id,"
echo "                supplier_id: parseInt(supplier_id),"
echo "                original_quantity: item.quantity,"
echo "                current_quantity: item.quantity,"
echo "                unit_cost: item.unit_price_base,"
echo "                purchase_date: new Date(document_date),"
echo "                status: 'ACTIVE',"
echo "                created_by: userId"
echo "              }"
echo "            });"
echo ""
echo "            // Записываем движение партии"
echo "            await tx.batch_movements.create({"
echo "              data: {"
echo "                company_id: companyId,"
echo "                batch_id: batch.id,"
echo "                product_id: item.product_id,"
echo "                warehouse_id: warehouse_id,"
echo "                purchase_id: purchase.id,"
echo "                movement_type: 'IN',"
echo "                quantity: item.quantity,"
echo "                unit_cost: item.unit_price_base,"
echo "                description: \`Purchase \${document_number} - batch creation\`,"
echo "                reference_document: document_number,"
echo "                movement_date: new Date(document_date),"
echo "                created_by: userId"
echo "              }"
echo "            });"
echo ""
echo "            logger.info(\`📦 BATCH: Created batch \${batch.batch_number} for product \${item.product_id}\`);"
echo "          } catch (batchError) {"
echo "            logger.error(\`❌ Error creating batch:\`, batchError);"
echo "          }"
echo "        }"

echo ""
echo "3️⃣ СОЗДАЁМ WAREHOUSE INVENTORY API:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo ""
echo "Создать файл: b/src/controllers/company/inventoryController.js"
echo ""
echo "const getWarehouseInventory = async (req, res) => {"
echo "  try {"
echo "    const companyId = req.companyContext?.companyId;"
echo "    const { warehouseId } = req.params;"
echo ""
echo "    const inventory = await prisma.product_batches.findMany({"
echo "      where: {"
echo "        company_id: companyId,"
echo "        warehouse_id: parseInt(warehouseId),"
echo "        current_quantity: { gt: 0 },"
echo "        status: 'ACTIVE'"
echo "      },"
echo "      include: {"
echo "        product: { select: { name: true, code: true, unit: true } },"
echo "        supplier: { select: { name: true } }"
echo "      },"
echo "      orderBy: { purchase_date: 'asc' }"
echo "    });"
echo ""
echo "    const summary = await prisma.\$queryRaw\`"
echo "      SELECT "
echo "        p.id as product_id,"
echo "        p.name,"
echo "        p.code,"
echo "        p.unit,"
echo "        SUM(pb.current_quantity) as total_stock,"
echo "        AVG(pb.unit_cost) as avg_cost,"
echo "        COUNT(pb.id) as batch_count"
echo "      FROM product_batches pb"
echo "      JOIN products p ON pb.product_id = p.id"
echo "      WHERE pb.company_id = \${companyId}"
echo "        AND pb.warehouse_id = \${parseInt(warehouseId)}"
echo "        AND pb.current_quantity > 0"
echo "        AND pb.status = 'ACTIVE'"
echo "      GROUP BY p.id, p.name, p.code, p.unit"
echo "      ORDER BY p.name"
echo "    \`;"
echo ""
echo "    res.json({"
echo "      success: true,"
echo "      inventory: {"
echo "        batches: inventory,"
echo "        summary: summary"
echo "      }"
echo "    });"
echo "  } catch (error) {"
echo "    res.status(500).json({ success: false, error: error.message });"
echo "  }"
echo "};"

echo ""
echo "4️⃣ ДОБАВЛЯЕМ МАРШРУТЫ:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo ""
echo "В файл: b/src/routes/company/index.js добавить:"
echo ""
echo "// Inventory & Batches"
echo "router.get('/warehouses/:warehouseId/inventory', inventoryController.getWarehouseInventory);"
echo "router.get('/batches/product/:productId', batchController.getProductBatches);"
echo "router.post('/batches/allocate', batchController.allocateBatches);"

echo ""
echo "5️⃣ ОБНОВЛЯЕМ FRONTEND WAREHOUSE:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo ""
echo "В файле: f/src/pages/company/warehouse/WarehouseManagement.tsx"
echo "Добавить компонент инвентаря:"
echo ""
echo "const InventoryTable = ({ warehouseId }) => {"
echo "  const [inventory, setInventory] = useState([]);"
echo ""
echo "  useEffect(() => {"
echo "    fetchInventory();"
echo "  }, [warehouseId]);"
echo "