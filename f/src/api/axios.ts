// f/src/api/axios.ts
// ===============================================
// üåê –û–ë–ù–û–í–õ–ï–ù–ù–´–ô AXIOS –ö–õ–ò–ï–ù–¢ –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú X-COMPANY-ID
// ===============================================

import axios from 'axios';

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ API URL
const getApiUrl = (): string => {
  if (import.meta.env.VITE_API_URL) {
    return import.meta.env.VITE_API_URL;
  }

  if (typeof window !== 'undefined') {
    const hostname = window.location.hostname;

    // –ü—Ä–æ–¥–∞–∫—à–µ–Ω
    if (hostname === 'solar.swapoil.de') {
      return 'https://api.solar.swapoil.de';
    }

    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      return 'http://localhost:4000/api';
    }
  }

  // Fallback
  return 'https://api.solar.swapoil.de';
};

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios
export const api = axios.create({
  baseURL: getApiUrl(),
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

console.log(`üîó API URL: ${getApiUrl()}`);

// ===============================================
// üîß –£–õ–£–ß–®–ï–ù–ù–´–ô REQUEST INTERCEPTOR
// ===============================================
api.interceptors.request.use(
  (config) => {
    console.log(`ÔøΩÔøΩ API Request: ${config.method?.toUpperCase()} ${config.url}`);

    // 1. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º X-Company-Id –¥–ª—è Company Level –∑–∞–ø—Ä–æ—Å–æ–≤
    const currentCompanyId = localStorage.getItem('current_company_id');

    // ===============================================
    // üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï COMPANY LEVEL –ó–ê–ü–†–û–°–û–í
    // ===============================================
    const isCompanyLevelRequest = (url: string): boolean => {
      // –ü—Ä—è–º—ã–µ Company Level endpoints
      if (url.includes('/api/company/')) return true;

      // Endpoints –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç X-Company-Id
      const companyEndpoints = [
        '/api/company/clients',
        '/sales',
        '/purchases',
        '/stats',
        '/bank-operations',
        '/assistant',
        '/dashboard',
        // üî• –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò:
        '/clients',              // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏  
        '/api/company/sales',
        '/api/company/purchases',
        '/api/company/stats',
        '/api/company/bank-operations',
        '/api/company/assistant',
        '/api/company/dashboard'
      ];

      return companyEndpoints.some(endpoint => url.includes(endpoint));
    };

    // ===============================================
    // üè¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï X-COMPANY-ID
    // ===============================================
    if (config.url && isCompanyLevelRequest(config.url)) {
      if (currentCompanyId) {
        config.headers['X-Company-Id'] = currentCompanyId;
        console.log(`üè¢ Added X-Company-Id: ${currentCompanyId} to ${config.url}`);
      } else {
        console.warn(`‚ö†Ô∏è Company Level request to ${config.url} without X-Company-Id!`);
        console.warn('üí° Hint: Select a company first on /account/dashboard');
      }
    }

    // ===============================================
    // üìã ACCOUNT LEVEL - –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú X-COMPANY-ID  
    // ===============================================
    const isAccountLevelRequest = (url: string): boolean => {
      const accountEndpoints = [
        '/api/account/',
        '/api/auth/',
        '/api/company-context/',
        '/api/mock/'
      ];

      return accountEndpoints.some(endpoint => url.includes(endpoint));
    };

    if (config.url && isAccountLevelRequest(config.url)) {
      console.log(`üèõÔ∏è Account Level request: ${config.url} (no X-Company-Id needed)`);
    }

    return config;
  },
  (error) => {
    console.error('‚ùå Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// ===============================================
// üîÑ RESPONSE INTERCEPTOR
// ===============================================
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    if (response.data && response.config.url) {
      if (response.config.url.includes('/companies')) {
        console.log(`üìä Companies data:`, response.data.count || response.data.length);
      }
      if (response.config.url.includes('/clients')) {
        console.log(`üë• Clients data:`, response.data.length || 'unknown count');
      }
    }

    return response;
  },
  (error) => {
    const status = error.response?.status;
    const url = error.config?.url;

    console.error(`‚ùå API Error: ${status || 'Network'} ${url}`);

    // ===============================================
    // üîí –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
    // ===============================================
    if (status === 401) {
      console.warn('üîí Unauthorized - clearing auth data');
      localStorage.removeItem('auth_token');
      localStorage.removeItem('current_company_id');
      localStorage.removeItem('company_selected_at');

      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω (–µ—Å–ª–∏ –Ω–µ —É–∂–µ —Ç–∞–º)
      if (!window.location.pathname.includes('/login')) {
        window.location.href = '/login';
      }
    }

    // ===============================================
    // üè¢ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ö–û–ù–¢–ï–ö–°–¢–ê –ö–û–ú–ü–ê–ù–ò–ò
    // ===============================================
    if (status === 400 && error.response?.data?.error?.includes('Company ID')) {
      console.warn('üè¢ Company context error - redirecting to company selection');

      // –û—á–∏—â–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      localStorage.removeItem('current_company_id');
      localStorage.removeItem('company_selected_at');

      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏
      if (!window.location.pathname.includes('/account/dashboard')) {
        window.location.href = '/account/dashboard';
      }
    }

    // ===============================================
    // üìä –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ï–ó–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –û–®–ò–ë–ö–ê–•
    // ===============================================
    if (status === 404 && url?.includes('/clients')) {
      console.info('üí° Tip: Make sure you have selected a company and it has clients');
    }

    if (status === 404 && url?.includes('/api/company/')) {
      console.info('üí° Tip: Check if X-Company-Id header is present and valid');
    }

    return Promise.reject(error);
  }
);

export default api;

