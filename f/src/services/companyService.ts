// f/src/services/companyService.ts
// ===============================================
// üèóÔ∏è COMPANY SERVICE –î–õ–Ø –î–í–£–•–£–†–û–í–ù–ï–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´
// ===============================================

import { api } from '../api/axios';
import { withMockFallback, shouldUseMocks } from '../api/mockConfig';

export interface Company {
  id: number;
  code: string;
  name: string;
  short_name?: string;
  description?: string;
  status: string;
  created: string;
  employees?: number;
  is_active?: boolean;
  owner?: {
    id: number;
    email: string;
    first_name: string;
    last_name: string;
  };
}

export interface CompaniesResponse {
  success: boolean;
  companies: Company[];
  count: number;
}

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
const mockCompanies: Company[] = [
  {
    id: 1,
    code: 'SOLAR',
    name: 'SOLAR Energy Ltd',
    description: 'Main solar energy company',
    status: 'Active',
    created: '2023-10-03',
    employees: 15,
    is_active: true
  }
];

export const companyService = {
  // ===============================================
  // üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π (Account Level)
  // ===============================================
  getCompanies: async (): Promise<CompaniesResponse> => {
    console.log('üè¢ Getting companies...');
    
    return withMockFallback(
      async () => {
        const response = await api.get<CompaniesResponse>('/api/account/companies');
        console.log('‚úÖ Companies loaded from API:', response.data.companies?.length || 0);
        return response.data;
      },
      {
        success: true,
        companies: mockCompanies,
        count: mockCompanies.length
      }
    );
  },

  // ===============================================
  // üéØ –í—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
  // ===============================================
  selectCompany: async (companyId: number): Promise<{ success: boolean; companyId: number }> => {
    console.log(`üéØ Selecting company ID: ${companyId}`);
    
    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏ —á—Ç–æ –≤ CompanyTransitPage.tsx –∏ axios.ts
      localStorage.setItem('currentCompanyId', companyId.toString()); // ‚úÖ camelCase
      localStorage.setItem('companySelectedAt', new Date().toISOString());
      
      console.log(`‚úÖ Company ${companyId} saved to localStorage with key: currentCompanyId`);
      
      // 2. –û–±–Ω–æ–≤–ª—è–µ–º axios headers –¥–ª—è –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      api.defaults.headers['x-company-id'] = companyId.toString(); // ‚úÖ lowercase –∫–∞–∫ –≤ axios.ts
      
      console.log(`‚úÖ x-company-id header set to: ${companyId}`);
      
      // 3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º backend –æ –≤—ã–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏
      if (!shouldUseMocks()) {
        try {
          await api.post('/api/account/companies/select', {
            company_id: companyId
          });
          console.log('‚úÖ Backend notified about company selection');
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to notify backend, but continuing...', error);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
        }
      }
      
      return { success: true, companyId };
      
    } catch (error) {
      console.error('‚ùå Error selecting company:', error);
      throw error;
    }
  },

  // ===============================================
  // üìã –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
  // ===============================================
  getCurrentCompany: (): { id: number; selectedAt: Date } | null => {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏ —á—Ç–æ –≤ axios.ts
    const companyId = localStorage.getItem('currentCompanyId'); // ‚úÖ camelCase
    const selectedAt = localStorage.getItem('companySelectedAt');
    
    if (companyId) {
      console.log(`üìã Current company: ${companyId} (selected at ${selectedAt})`);
      return {
        id: parseInt(companyId),
        selectedAt: selectedAt ? new Date(selectedAt) : new Date()
      };
    }
    
    console.log('üìã No company currently selected');
    return null;
  },

  // ===============================================
  // üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Account Level)
  // ===============================================
  clearCompanySelection: (): void => {
    console.log('üßπ Clearing company selection');
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏ —á—Ç–æ –≤ CompanyTransitPage.tsx
    localStorage.removeItem('currentCompanyId'); // ‚úÖ camelCase
    localStorage.removeItem('currentCompanyName');
    localStorage.removeItem('companySelectedAt');
    
    // –£–±–∏—Ä–∞–µ–º header –∏–∑ axios
    if (api.defaults.headers['x-company-id']) { // ‚úÖ lowercase
      delete api.defaults.headers['x-company-id'];
    }
    
    console.log('‚úÖ Company selection cleared');
  },

  // ===============================================
  // üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏  
  // ===============================================
  checkAvailable: async (): Promise<{ available: boolean }> => {
    console.log('üîç Checking company context availability...');
    
    if (shouldUseMocks()) {
      return { available: true };
    }
    
    try {
      const response = await api.get('/api/company-context/available');
      return { available: response.data.available || true };
    } catch (error) {
      console.warn('‚ùå Company context check failed:', error);
      return { available: false };
    }
  },

  // ===============================================
  // üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
  // ===============================================
  createCompany: async (companyData: Partial<Company>): Promise<Company> => {
    console.log('üÜï Creating new company...', companyData);
    
    const response = await api.post<Company>('/api/account/companies', companyData);
    console.log('‚úÖ Company created:', response.data);
    return response.data;
  },

  // ===============================================
  // üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  // ===============================================
  restoreCompanyContext: (): boolean => {
    const currentCompany = companyService.getCurrentCompany();
    
    if (currentCompany) {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (lowercase)
      api.defaults.headers['x-company-id'] = currentCompany.id.toString(); // ‚úÖ lowercase
      
      console.log(`üîÑ Company context restored: ${currentCompany.id}`);
      return true;
    }
    
    console.log('üîÑ No company context to restore');
    return false;
  }
};

// ===============================================
// üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê –ü–†–ò –ò–ú–ü–û–†–¢–ï
// ===============================================
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
companyService.restoreCompanyContext();

export default companyService;
