// ✅ ЗАМЕНИТЬ НА:
const [clients, setClients] = useState<Client[]>([]);
const [products, setProducts] = useState<Product[]>([]);
const [loading, setLoading] = useState(false);

// Загрузка клиентов и товаров
useEffect(() => {
  const loadData = async () => {
    try {
      setLoading(true);
      
      // Загружаем клиентов
      const clientsResponse = await fetch('/api/company/clients', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'x-company-id': localStorage.getItem('currentCompanyId') || '',
        }
      });
      const clientsData = await clientsResponse.json();
      setClients(clientsData.clients || []);

      // Загружаем товары  
      const productsResponse = await fetch('/api/company/products', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'x-company-id': localStorage.getItem('currentCompanyId') || '',
        }
      });
      const productsData = await productsResponse.json();
      setProducts(productsData.products || []);
      
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (isOpen) {
    loadData();
  }
}, [isOpen]);

// В селекте клиентов заменить mockClients на clients:
{clients.map(client => (
  <option key={client.id} value={client.id}>
    {client.name} ({client.code})
  </option>
))}

// В селекте товаров заменить mockProducts на products:
{products.map(product => (
  <option key={product.id} value={product.id}>
    {product.name} ({product.code})
  </option>
))}