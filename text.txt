// b/src/controllers/company/salesController.js - –î–û–ü–û–õ–ù–ò–¢–¨ —Ñ—É–Ω–∫—Ü–∏—é createSale

// ‚ûï POST /api/company/sales - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É –° –ê–í–¢–û–°–ü–ò–°–ê–ù–ò–ï–ú –°–û –°–ö–õ–ê–î–ê
const createSale = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    const userId = req.user?.id || 1;
    
    const {
      document_number,
      document_date,
      document_type = 'INVOICE',
      delivery_date,
      due_date,
      client_id,
      warehouse_id,
      sales_manager_id,
      currency = 'EUR',
      payment_status = 'PENDING',
      delivery_status = 'PENDING',
      document_status = 'DRAFT',
      items = []
    } = req.body;

    if (!companyId) {
      return res.status(400).json({ 
        error: 'Company context required'
      });
    }

    logger.info(`‚ûï Creating sale for company: ${companyId}`);
    logger.info(`üìù Sale data:`, {
      document_number,
      client_id,
      warehouse_id,
      items: items.length,
      companyId,
      userId
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!document_number || !document_date || !client_id) {
      return res.status(400).json({
        success: false,
        error: 'Required fields: document_number, document_date, client_id'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const existingSale = await prisma.sales.findFirst({
      where: {
        company_id: companyId,
        document_number
      }
    });

    if (existingSale) {
      return res.status(400).json({
        success: false,
        error: 'Sale with this document number already exists'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const client = await prisma.clients.findFirst({
      where: { id: parseInt(client_id), company_id: companyId }
    });

    if (!client) {
      logger.error('‚ùå Client not found:', client_id);
      return res.status(400).json({
        success: false,
        error: `Client ${client_id} not found`
      });
    }

    logger.info(`‚úÖ Client found: ${client.name}`);

    // üî• –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–¢–ö–û–í –ù–ê –°–ö–õ–ê–î–ï
    logger.info(`üì¶ Checking stock availability for ${items.length} items...`);
    
    for (const item of items) {
      const product = await prisma.products.findUnique({
        where: { id: parseInt(item.product_id) },
        select: { 
          id: true,
          code: true, 
          name: true, 
          current_stock: true,
          unit: true 
        }
      });

      if (!product) {
        return res.status(400).json({
          success: false,
          error: `Product with ID ${item.product_id} not found`
        });
      }

      const currentStock = parseFloat(product.current_stock || 0);
      const requestedQuantity = parseFloat(item.quantity);

      if (currentStock < requestedQuantity) {
        logger.error(`‚ùå Insufficient stock for ${product.name}`);
        return res.status(400).json({
          success: false,
          error: `Insufficient stock for "${product.name}" (${product.code}). Available: ${currentStock} ${product.unit}, requested: ${requestedQuantity} ${product.unit}`
        });
      }

      logger.info(`‚úÖ Stock OK: ${product.name} - Available: ${currentStock}, Requested: ${requestedQuantity}`);
    }

    // –†–∞—Å—á—ë—Ç —Å—É–º–º
    let subtotal = 0;
    let vat_amount = 0;
    let discount_amount = 0;

    const processedItems = items.map((item, index) => {
      const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.unit_price_base);
      const lineDiscount = parseFloat(item.total_discount || 0);
      const lineAfterDiscount = lineSubtotal - lineDiscount;
      const vatAmount = lineAfterDiscount * (parseFloat(item.vat_rate || 0) / 100);
      const lineTotal = lineAfterDiscount + vatAmount;
      
      subtotal += lineSubtotal;
      vat_amount += vatAmount;
      discount_amount += lineDiscount;

      return {
        product_id: parseInt(item.product_id),
        line_number: index + 1,
        quantity: parseFloat(item.quantity),
        unit_price_base: parseFloat(item.unit_price_base),
        discount_percent: parseFloat(item.discount_percent || 0),
        total_discount: lineDiscount,
        vat_rate: parseFloat(item.vat_rate || 0),
        vat_amount: vatAmount,
        line_total: lineTotal,
        description: item.description || null
      };
    });

    const total_amount = subtotal - discount_amount + vat_amount;

    logger.info(`üí∞ Calculated amounts:`, {
      subtotal,
      vat_amount,
      discount_amount,
      total_amount,
      items: processedItems.length
    });

    // üî• –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–ê–ñ–ò –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú –°–ü–ò–°–ê–ù–ò–ï–ú –°–û –°–ö–õ–ê–î–ê
    const sale = await prisma.$transaction(async (tx) => {
      // 1. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥–∞–∂—É
      const newSale = await tx.sales.create({
        data: {
          company_id: companyId,
          document_number,
          document_date: new Date(document_date),
          document_type,
          delivery_date: delivery_date ? new Date(delivery_date) : null,
          due_date: due_date ? new Date(due_date) : null,
          client_id: parseInt(client_id),
          warehouse_id: warehouse_id ? parseInt(warehouse_id) : null,
          sales_manager_id: sales_manager_id ? parseInt(sales_manager_id) : null,
          subtotal,
          vat_amount,
          discount_amount,
          total_amount,
          currency,
          payment_status,
          delivery_status,
          document_status,
          created_by: userId,
          created_at: new Date()
        }
      });

      logger.info(`‚úÖ Created sale: ${newSale.id}`);

      // 2. –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞–∂–∏
      if (processedItems.length > 0) {
        await tx.sale_items.createMany({
          data: processedItems.map(item => ({
            sale_id: newSale.id,
            product_id: item.product_id,
            line_number: item.line_number,
            quantity: item.quantity,
            unit_price_base: item.unit_price_base,
            discount_percent: item.discount_percent,
            total_discount: item.total_discount,
            vat_rate: item.vat_rate,
            vat_amount: item.vat_amount,
            line_total: item.line_total,
            description: item.description
          }))
        });
        
        logger.info(`‚úÖ Created ${processedItems.length} sale items`);

        // üî• 3. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ü–ò–°–ê–ù–ò–ï –°–û –°–ö–õ–ê–î–ê
        logger.info(`üì¶ Starting automatic stock decrease for ${processedItems.length} items...`);
        
        for (const item of processedItems) {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
          const currentProduct = await tx.products.findUnique({
            where: { id: item.product_id },
            select: { 
              id: true,
              code: true, 
              name: true, 
              current_stock: true,
              unit: true 
            }
          });

          if (currentProduct) {
            const currentStock = parseFloat(currentProduct.current_stock || 0);
            const newStock = currentStock - item.quantity; // –ü–†–û–î–ê–ñ–ê = –£–ú–ï–ù–¨–®–ï–ù–ò–ï

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
            await tx.products.update({
              where: { id: item.product_id },
              data: { 
                current_stock: newStock,
                updated_at: new Date()
              }
            });

            logger.info(`üì¶ STOCK UPDATE: ${currentProduct.name} (${currentProduct.code})`);
            logger.info(`   Current: ${currentStock} ${currentProduct.unit || 'pcs'}`);
            logger.info(`   - Sale: ${item.quantity} ${currentProduct.unit || 'pcs'}`);
            logger.info(`   = New Stock: ${newStock} ${currentProduct.unit || 'pcs'}`);
          } else {
            logger.warn(`‚ö†Ô∏è Product ${item.product_id} not found for stock update`);
          }
        }

        logger.info(`üéâ All stock quantities decreased automatically!`);
      }

      return newSale;
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    const createdSale = await prisma.sales.findUnique({
      where: { id: sale.id },
      include: {
        client: true,
        warehouse: true,
        sales_manager: true,
        items: {
          include: {
            product: {
              select: {
                id: true,
                code: true,
                name: true,
                current_stock: true, // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–°–¢–ê–¢–û–ö
                unit: true,
                min_stock: true
              }
            }
          }
        }
      }
    });

    logger.info(`üéâ Sale created successfully: ${sale.id}`);

    // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–í–ò–ñ–ï–ù–ò–ò –¢–û–í–ê–†–û–í
    const stockUpdates = processedItems.map(item => {
      const productItem = createdSale.items.find(i => i.product_id === item.product_id);
      const currentStock = parseFloat(productItem?.product?.current_stock || '0');
      const minStock = parseFloat(productItem?.product?.min_stock || '0');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–∞
      let stockStatus = 'OK';
      if (currentStock <= 0) stockStatus = 'OUT_OF_STOCK';
      else if (currentStock <= minStock) stockStatus = 'LOW_STOCK';
      
      return {
        product_id: item.product_id,
        product_name: productItem?.product?.name || 'Unknown',
        product_code: productItem?.product?.code || '',
        quantity_sold: item.quantity,
        new_stock: currentStock,
        min_stock: minStock,
        stock_status: stockStatus,
        unit: productItem?.product?.unit || 'pcs',
        operation: 'STOCK_DECREASE',
        warehouse_id: warehouse_id || null
      };
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
    const lowStockWarnings = stockUpdates.filter(update => 
      update.stock_status === 'LOW_STOCK' || update.stock_status === 'OUT_OF_STOCK'
    );

    res.status(201).json({
      success: true,
      sale: createdSale,
      message: 'Sale created successfully and stock updated automatically',
      stock_updates: stockUpdates,
      warnings: lowStockWarnings.length > 0 ? {
        message: `${lowStockWarnings.length} products have low or zero stock`,
        items: lowStockWarnings
      } : null,
      summary: {
        total_items: processedItems.length,
        total_amount: total_amount,
        currency: currency,
        warehouse: warehouse_id ? `Warehouse ID: ${warehouse_id}` : 'No specific warehouse',
        stock_updated: true,
        low_stock_warnings: lowStockWarnings.length
      },
      companyId
    });
  } catch (error) {
    logger.error('‚ùå Error creating sale:', error);
    logger.error('Stack trace:', error.stack);
    
    if (error.code) {
      logger.error('Prisma error code:', error.code);
      logger.error('Prisma error meta:', error.meta);
    }
    
    res.status(500).json({
      success: false,
      error: 'Error creating sale',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};