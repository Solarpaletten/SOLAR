#!/bin/bash
# üéØ Smart Work/Rest Mode Sidebar - –ù–ï –ú–ï–®–ê–ï–ú –†–ê–ë–û–¢–ï!
echo "üéØ‚ö°üîß –°–û–ó–î–ê–Å–ú SMART WORK/REST MODE SIDEBAR! üîß‚ö°üéØ"
echo "üíº –¶–ï–õ–¨: –†–∞–±–æ—Ç–∞ - –°–í–Ø–¢–û–ï! –°–µ–º—å—è - –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞!"
echo "üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨: –û–¥–∏–Ω –∫–ª–∏–∫ = —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞"
echo ""

echo "1Ô∏è‚É£ BACKUP –¢–ï–ö–£–©–ï–ì–û SIDEBAR:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
cp f/src/components/company/CompanySidebar.tsx f/src/components/company/CompanySidebar.tsx.before_smart_mode

echo "‚úÖ Backup —Å–æ–∑–¥–∞–Ω"

echo ""
echo "2Ô∏è‚É£ –°–û–ó–î–ê–Å–ú SMART WORK/REST MODE SIDEBAR:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# –°–æ–∑–¥–∞—ë–º —É–º–Ω—ã–π sidebar —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º —Ä–µ–∂–∏–º–æ–≤
cat > f/src/components/company/CompanySidebar.tsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { NavLink, useLocation, useNavigate } from 'react-router-dom';
import { ChevronDown, ChevronRight, GripVertical, Star, ChevronLeft, Briefcase, Heart, Baby, Clock, Focus } from 'lucide-react';

interface SidebarItem {
  icon: string;
  title: string;
  route: string;
  expandable?: boolean;
  priority?: number;
  isPinned?: boolean;
  badge?: string | null;
}

interface SubmenuState {
  warehouse: boolean;
  cashier: boolean;
  sales: boolean;
}

type WorkMode = 'WORK' | 'REST';

const CompanySidebar: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());
  
  // üéØ –ì–õ–ê–í–ù–´–ô –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨: –†–ê–ë–û–¢–ê / –û–¢–î–´–•
  const [workMode, setWorkMode] = useState<WorkMode>('WORK');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const [autoMode, setAutoMode] = useState(true);

  useEffect(() => {
    const timer = setInterval(() => {
      const now = new Date();
      setCurrentTime(now);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
      if (autoMode) {
        const hour = now.getHours();
        const isWorkingHours = hour >= 9 && hour <= 18;
        setWorkMode(isWorkingHours ? 'WORK' : 'REST');
      }
    }, 1000);
    
    return () => clearInterval(timer);
  }, [autoMode]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é
  const [expandedMenus, setExpandedMenus] = useState<SubmenuState>({
    warehouse: false,
    cashier: false,
    sales: false
  });

  // üìä –û–°–ù–û–í–ù–´–ï –†–ê–ë–û–ß–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ (–ù–ï–ò–ó–ú–ï–ù–ù–´–ï!)
  const [sidebarItems] = useState<SidebarItem[]>([
    { icon: "‚≠ê", title: "Dashboard", route: "/dashboard", isPinned: true, badge: null },
    { icon: "üë•", title: "Clients", route: "/clients", badge: null },
    { icon: "üì¶", title: "Warehouse", route: "/warehouse", expandable: true, badge: null },
    { icon: "üí∞", title: "Sales", route: "/sales", expandable: true, badge: null },
    { icon: "üõí", title: "Purchases", route: "/purchases", badge: null },
    { icon: "üì¶", title: "Products", route: "/products", badge: null },
    { icon: "üí≥", title: "Cashier", route: "/banking", expandable: true, badge: null },
    { icon: "üìä", title: "Chart of Accounts", route: "/chart-of-accounts", badge: null },
    { icon: "‚ö°", title: "TAB-–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", route: "/tabbook", badge: "NEW" },
    { icon: "‚òÅÔ∏è", title: "Cloud IDE", route: "/cloudide", badge: "BETA" },
    { icon: "üè¶", title: "Banking", route: "/banking", badge: null },
    { icon: "üìÑ", title: "Documents", route: "/documents", badge: null },
    { icon: "üë®‚Äçüíº", title: "Accounts", route: "/chart-of-accounts", badge: null },
    { icon: "‚öôÔ∏è", title: "Settings", route: "/settings", isPinned: true, badge: null }
  ]);

  const toggleSubmenu = (menuKey: keyof SubmenuState) => {
    setExpandedMenus(prev => ({
      ...prev,
      [menuKey]: !prev[menuKey]
    }));
  };

  const handleBackToCompanies = () => {
    localStorage.removeItem('currentCompanyId');
    localStorage.removeItem('currentCompanyName');
    navigate('/account/dashboard');
  };

  // üéØ MANUAL MODE TOGGLE
  const toggleWorkMode = () => {
    setAutoMode(false);
    setWorkMode(workMode === 'WORK' ? 'REST' : 'WORK');
  };

  const resetToAutoMode = () => {
    setAutoMode(true);
  };

  // üíº WORK MODE STYLES
  const getWorkModeStyles = () => {
    if (workMode === 'WORK') {
      return {
        bg: 'bg-[#0f3c4c]',
        accent: 'bg-[#165468]',
        text: 'text-white',
        border: 'border-[#165468]'
      };
    } else {
      return {
        bg: 'bg-gradient-to-b from-purple-900 to-pink-900',
        accent: 'bg-purple-600',
        text: 'text-pink-100',
        border: 'border-purple-600'
      };
    }
  };

  const styles = getWorkModeStyles();

  return (
    <div className={`${isCollapsed ? 'w-16' : 'w-64'} h-screen ${styles.bg} ${styles.text} flex flex-col transition-all duration-300`}>
      {/* –õ–û–ì–û–¢–ò–ü SOLAR */}
      <NavLink
        to="/account/dashboard"
        className={`block p-4 text-2xl font-bold bg-opacity-80 hover:opacity-90 transition-opacity ${
          workMode === 'WORK' ? 'bg-[#0a2e3b]' : 'bg-purple-800'
        }`}
      >
        {!isCollapsed && "Solar"}
        {isCollapsed && "‚òÄÔ∏è"}
      </NavLink>

      {/* üéØ SMART MODE CONTROL */}
      <div className={`p-3 border-b ${styles.border} space-y-2`}>
        {/* Current Mode Display */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            {workMode === 'WORK' ? (
              <>
                <Briefcase className="h-4 w-4 text-blue-400" />
                <span className="text-sm font-medium text-blue-300">WORK MODE</span>
              </>
            ) : (
              <>
                <Heart className="h-4 w-4 text-pink-400" />
                <span className="text-sm font-medium text-pink-300">REST MODE</span>
              </>
            )}
          </div>
          
          {!isCollapsed && (
            <div className="text-xs text-gray-400">
              {currentTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
            </div>
          )}
        </div>

        {/* Mode Toggle Button */}
        {!isCollapsed && (
          <button
            onClick={toggleWorkMode}
            className={`w-full flex items-center justify-center p-2 rounded transition-all ${
              workMode === 'WORK' 
                ? "bg-blue-600 hover:bg-blue-700 text-white" 
                : "bg-pink-600 hover:bg-pink-700 text-white"
            }`}
          >
            {workMode === 'WORK' ? (
              <>
                <Heart className="h-4 w-4 mr-2" />
                –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –æ—Ç–¥—ã—Ö
              </>
            ) : (
              <>
                <Focus className="h-4 w-4 mr-2" />
                –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É
              </>
            )}
          </button>
        )}

        {/* Auto Mode Indicator */}
        {!isCollapsed && autoMode && (
          <div className="flex items-center justify-center text-xs text-gray-400">
            <Clock className="h-3 w-3 mr-1" />
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (9:00-18:00)
          </div>
        )}

        {/* Manual Mode Reset */}
        {!isCollapsed && !autoMode && (
          <button
            onClick={resetToAutoMode}
            className="w-full text-xs text-gray-400 hover:text-gray-300 underline"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º—É
          </button>
        )}

        {/* Collapse Toggle */}
        <button
          onClick={() => setIsCollapsed(!isCollapsed)}
          className={`w-full flex items-center justify-center p-2 hover:${styles.accent} rounded transition-colors`}
        >
          <ChevronLeft className={`h-4 w-4 transition-transform duration-200 ${isCollapsed ? 'rotate-180' : ''}`} />
        </button>
      </div>

      {/* üíº WORK MODE: PROFESSIONAL SIDEBAR */}
      {workMode === 'WORK' && (
        <nav className="flex-1 overflow-y-auto">
          <ul className="space-y-1 p-2">
            {sidebarItems.map((item) => {
              const isActive = location.pathname === item.route;
              
              return (
                <li key={item.route}>
                  <div className="group">
                    <div className={`flex items-center transition-all duration-200 ${
                      isActive 
                        ? 'bg-[#165468] text-white' 
                        : 'text-white hover:bg-[#165468]'
                    }`}>
                      {/* Drag handle or pin */}
                      {!isCollapsed && (
                        <>
                          {!item.isPinned && (
                            <GripVertical className="h-4 w-4 text-gray-400 mr-1 opacity-0 group-hover:opacity-100 transition-opacity cursor-grab" />
                          )}
                          {item.isPinned && (
                            <Star className="h-4 w-4 text-yellow-400 mr-1" />
                          )}
                        </>
                      )}

                      {/* Main link */}
                      <NavLink
                        to={item.route}
                        className="flex-1 flex items-center p-3"
                        onClick={(e) => {
                          if (item.expandable) {
                            e.preventDefault();
                            const menuKey = item.title.toLowerCase() as keyof SubmenuState;
                            if (menuKey in expandedMenus) {
                              toggleSubmenu(menuKey);
                            }
                          }
                        }}
                      >
                        <span className="mr-3 text-lg">{item.icon}</span>
                        {!isCollapsed && (
                          <>
                            <span className="flex-1">{item.title}</span>
                            {item.badge && (
                              <span className={`px-2 py-1 text-xs rounded-full ml-2 ${
                                item.badge === 'NEW' ? 'bg-green-500 text-white' :
                                item.badge === 'BETA' ? 'bg-blue-500 text-white' :
                                'bg-red-500 text-white'
                              }`}>
                                {item.badge}
                              </span>
                            )}
                            {item.expandable && (
                              <ChevronDown className={`h-4 w-4 transition-transform ${
                                (item.title.toLowerCase() in expandedMenus && expandedMenus[item.title.toLowerCase() as keyof SubmenuState]) 
                                  ? 'rotate-180' 
                                  : ''
                              }`} />
                            )}
                          </>
                        )}
                      </NavLink>
                    </div>

                    {/* Professional submenu */}
                    {!isCollapsed && item.expandable && item.title.toLowerCase() in expandedMenus && expandedMenus[item.title.toLowerCase() as keyof SubmenuState] && (
                      <ul className="ml-6 mt-1 space-y-1">
                        {/* Submenu items based on title */}
                        {item.title === "Warehouse" && (
                          <>
                            <li>
                              <NavLink to="/warehouse/inventory" className="flex items-center p-2 pl-8 text-sm text-gray-300 hover:bg-[#165468] hover:text-white">
                                üì¶ Inventory
                              </NavLink>
                            </li>
                            <li>
                              <NavLink to="/warehouse/movements" className="flex items-center p-2 pl-8 text-sm text-gray-300 hover:bg-[#165468] hover:text-white">
                                üîÑ Movements
                              </NavLink>
                            </li>
                          </>
                        )}
                        
                        {item.title === "Sales" && (
                          <>
                            <li>
                              <NavLink to="/sales/orders" className="flex items-center p-2 pl-8 text-sm text-gray-300 hover:bg-[#165468] hover:text-white">
                                üìã Orders
                              </NavLink>
                            </li>
                            <li>
                              <NavLink to="/sales/invoices" className="flex items-center p-2 pl-8 text-sm text-gray-300 hover:bg-[#165468] hover:text-white">
                                üßæ Invoices
                              </NavLink>
                            </li>
                          </>
                        )}
                        
                        {item.title === "Cashier" && (
                          <>
                            <li>
                              <NavLink to="/banking/accounts" className="flex items-center p-2 pl-8 text-sm text-gray-300 hover:bg-[#165468] hover:text-white">
                                üè¶ Bank Accounts
                              </NavLink>
                            </li>
                            <li>
                              <NavLink to="/banking/transactions" className="flex items-center p-2 pl-8 text-sm text-gray-300 hover:bg-[#165468] hover:text-white">
                                üí∞ Transactions
                              </NavLink>
                            </li>
                          </>
                        )}
                      </ul>
                    )}
                  </div>
                </li>
              );
            })}
          </ul>
        </nav>
      )}

      {/* üíï REST MODE: FAMILY-FRIENDLY SIDEBAR */}
      {workMode === 'REST' && (
        <div className="flex-1 overflow-y-auto p-4">
          <div className="text-center mb-6">
            <h2 className="text-lg font-bold text-pink-300 mb-2">
              üåô –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
            </h2>
            <p className="text-pink-400 text-sm">
              –†–∞–±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ - –≤—Ä–µ–º—è –¥–ª—è —Å–µ–º—å–∏! üíï
            </p>
          </div>

          {/* Quick Work Links (minimized) */}
          <div className="bg-purple-800 bg-opacity-50 rounded-lg p-3 mb-4">
            <h3 className="text-sm font-semibold text-purple-300 mb-2">‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:</h3>
            <div className="space-y-1">
              <NavLink to="/dashboard" className="block text-xs text-purple-200 hover:text-white">üìä Dashboard</NavLink>
              <NavLink to="/tabbook" className="block text-xs text-purple-200 hover:text-white">‚ö° TAB-–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è</NavLink>
            </div>
          </div>

          {/* Family Content */}
          <div className="space-y-4">
            <div className="bg-pink-800 bg-opacity-50 rounded-lg p-4">
              <h3 className="text-pink-300 font-semibold mb-2">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ –≤—Ä–µ–º—è</h3>
              <div className="space-y-2 text-sm text-pink-200">
                <div>üéÆ –ò–≥—Ä—ã —Å –¥–µ—Ç—å–º–∏</div>
                <div>üìö –ß—Ç–µ–Ω–∏–µ —Å–∫–∞–∑–æ–∫</div>
                <div>üçΩÔ∏è –°–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω</div>
                <div>üõÅ –í–æ–¥–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</div>
              </div>
            </div>

            <div className="bg-purple-800 bg-opacity-50 rounded-lg p-4">
              <h3 className="text-purple-300 font-semibold mb-2">‚ú® –†–µ–ª–∞–∫—Å –¥–ª—è –º–∞–º—ã</h3>
              <div className="space-y-2 text-sm text-purple-200">
                <div>üõÄ –í–∞–Ω–Ω–∞ —Å –ø–µ–Ω–æ–π</div>
                <div>üìñ –õ—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞</div>
                <div>üçµ –ß–∞–π —Å –ø–µ—á–µ–Ω—å–µ–º</div>
                <div>üéµ –°–ø–æ–∫–æ–π–Ω–∞—è –º—É–∑—ã–∫–∞</div>
              </div>
            </div>

            <div className="bg-gradient-to-r from-pink-600 to-purple-600 rounded-lg p-3 text-center">
              <Baby className="h-6 w-6 text-white mx-auto mb-2" />
              <div className="text-white text-sm font-medium">
                –ó–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–Ω—è! üåü
              </div>
            </div>
          </div>
        </div>
      )}

      {/* BACK TO COMPANIES */}
      <div className={`border-t ${styles.border} mt-auto`}>
        <button 
          onClick={handleBackToCompanies}
          className={`w-full flex items-center p-3 hover:${styles.accent} transition-colors text-left`}
        >
          <span className="mr-3">üö™</span>
          {!isCollapsed && <span>Back to Companies</span>}
        </button>
      </div>
    </div>
  );
};

export default CompanySidebar;
EOF

echo "‚úÖ Smart Work/Rest Mode Sidebar —Å–æ–∑–¥–∞–Ω!"

echo ""
echo "3Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "üìä Smart Sidebar —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
echo "   üìÑ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: $(wc -l f/src/components/company/CompanySidebar.tsx | cut -d' ' -f1)"
echo "   üíº Work mode —Ñ—É–Ω–∫—Ü–∏–∏: $(grep -c "WORK.*MODE\|Briefcase\|Professional" f/src/components/company/CompanySidebar.tsx)"
echo "   üíï Rest mode —Ñ—É–Ω–∫—Ü–∏–∏: $(grep -c "REST.*MODE\|Family\|Heart" f/src/components/company/CompanySidebar.tsx)"
echo "   üîÑ Auto-switch —Ñ—É–Ω–∫—Ü–∏–∏: $(grep -c "autoMode\|workingHours" f/src/components/company/CompanySidebar.tsx)"

echo ""
echo "üéØ‚ö°üíº SMART WORK/REST MODE –ì–û–¢–û–í! üíº‚ö°üéØ"
echo ""
echo "‚úÖ –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´ (9:00-18:00):"
echo "   üíº –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π sidebar"
echo "   üìä –í—Å–µ ERP –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
echo "   üñ±Ô∏è Drag & drop –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
echo "   ‚ö° TAB-–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –∏ Cloud IDE"
echo "   üîß –ù–∏–∫–∞–∫–∏—Ö –æ—Ç–≤–ª–µ–∫–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
echo "   üéØ 100% —Ñ–æ–∫—É—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ"
echo ""
echo "‚úÖ –†–ï–ñ–ò–ú –û–¢–î–´–•–ê (18:00-9:00):"
echo "   üíï –°–µ–º–µ–π–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
echo "   üåô –†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ —Ü–≤–µ—Ç–∞ (—Ä–æ–∑–æ–≤—ã–π/—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)"
echo "   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–µ–º–µ–π–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
echo "   ‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–±–æ—Ç–µ (—Ç–æ–ª—å–∫–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ)"
echo "   üõÄ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞"
echo "   ‚ú® –ú–æ—Ç–∏–≤–∞—Ü–∏—è '–ó–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö!'"
echo ""
echo "‚úÖ –£–ú–ù–´–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø:"
echo "   üïò –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 9:00 ‚Üí WORK MODE"
echo "   üïï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 18:00 ‚Üí REST MODE"
echo "   üîÑ –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
echo "   ‚è∞ –í–æ–∑–≤—Ä–∞—Ç –∫ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º—É –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º"
echo ""
echo "üéØ –¢–í–û–Ø –§–ò–õ–û–°–û–§–ò–Ø –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê:"
echo "   üíº '–†–ê–ë–û–¢–ê - –≠–¢–û –°–í–Ø–¢–û–ï' ‚úÖ"
echo "   üíï '–°–ï–ú–¨–Ø - –ö–û–ì–î–ê –í–†–ï–ú–Ø –û–¢–î–´–•–ê' ‚úÖ"
echo "   üîÑ '–û–î–ò–ù –ö–õ–ò–ö - –°–ú–ï–ù–ê –†–ï–ñ–ò–ú–ê' ‚úÖ"
echo "   ‚ö° '–ù–ï –ú–ï–®–ê–ï–ú –†–ê–ë–û–¢–ï' ‚úÖ"
echo ""
echo "üöÄ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!"
echo "üí´ –ü–ï–†–í–´–ô –í –ú–ò–†–ï WORK/REST SMART ERP!"