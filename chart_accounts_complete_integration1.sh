#!/bin/bash
# üéØ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–õ–ê–ù –°–ß–ï–¢–û–í + –¢–û–í–ê–†–´
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ project knowledge + —Ç–≤–æ—é –≥–µ–Ω–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é

echo "üéäüî•üéØ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ô ERP –ò–ù–¢–ï–ì–†–ê–¶–ò–ò! üéØüî•üéä"
echo ""
echo "üìä –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–û–¢–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:"
echo "   ‚úÖ ChartOfAccountsController (51 —Å—á—ë—Ç –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞)"
echo "   ‚úÖ AccountingIntegrationService (–∞–≤—Ç–æ–ø—Ä–æ–≤–æ–¥–∫–∏)"
echo "   ‚úÖ ChartOfAccountsPage –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
echo "   ‚úÖ ImportLithuanianModal"
echo ""

# 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤
echo "1Ô∏è‚É£ –°–û–ó–î–ê–Å–ú CHART OF ACCOUNTS PAGE:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

mkdir -p f/src/pages/company/chart-of-accounts
mkdir -p f/src/pages/company/chart-of-accounts/components
mkdir -p f/src/pages/company/chart-of-accounts/types

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤
cat > f/src/pages/company/chart-of-accounts/ChartOfAccountsPage.tsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { useCompanyContext } from '../../../contexts/CompanyContext';
import AccountsTable from './components/AccountsTable';
import AccountForm from './components/AccountForm';
import ImportLithuanianModal from './components/ImportLithuanianModal';
import { ChartAccount, AccountsStats } from './types/chartTypes';

const ChartOfAccountsPage: React.FC = () => {
  const { companyId, company } = useCompanyContext();
  const [accounts, setAccounts] = useState<ChartAccount[]>([]);
  const [stats, setStats] = useState<AccountsStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);
  const [editingAccount, setEditingAccount] = useState<ChartAccount | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('');

  useEffect(() => {
    if (companyId) {
      fetchAccounts();
      fetchStats();
    }
  }, [companyId]);

  const fetchAccounts = async () => {
    try {
      const params = new URLSearchParams();
      if (searchTerm) params.append('search', searchTerm);
      if (filterType) params.append('account_type', filterType);
      params.append('is_active', 'true');

      const response = await fetch(`/api/company/chart-of-accounts?${params}`, {
        headers: { 'Company-ID': companyId.toString() }
      });
      
      const data = await response.json();
      if (data.success) {
        setAccounts(data.accounts);
      }
    } catch (error) {
      console.error('Error fetching accounts:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await fetch(`/api/company/chart-of-accounts/stats`, {
        headers: { 'Company-ID': companyId.toString() }
      });
      
      const data = await response.json();
      if (data.success) {
        setStats(data.stats);
      }
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const handleImportSuccess = (imported: number) => {
    fetchAccounts();
    fetchStats();
    setShowImportModal(false);
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported} —Å—á–µ—Ç–æ–≤ –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞!`);
  };

  const handleAccountSaved = () => {
    fetchAccounts();
    fetchStats();
    setShowAddForm(false);
    setEditingAccount(null);
  };

  const handleDeleteAccount = async (accountId: number) => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç –∏–∑ –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤?')) {
      try {
        const response = await fetch(`/api/company/chart-of-accounts/${accountId}`, {
          method: 'DELETE',
          headers: { 'Company-ID': companyId.toString() }
        });
        
        if (response.ok) {
          fetchAccounts();
          fetchStats();
        }
      } catch (error) {
        console.error('Error deleting account:', error);
      }
    }
  };

  return (
    <div className="h-full flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-gray-900 flex items-center">
              <span className="text-3xl mr-3">üìä</span>
              –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤
            </h1>
            <p className="text-gray-600 mt-1">
              {company?.name} ‚Ä¢ –õ–∏—Ç–æ–≤—Å–∫–∏–π –ø–ª–∞–Ω —Å—á–µ—Ç–æ–≤ (LAS)
            </p>
          </div>
          
          <div className="flex items-center space-x-3">
            {stats && (
              <div className="flex items-center space-x-4 text-sm text-gray-600">
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-blue-500 rounded-full mr-2"></span>
                  –ê–∫—Ç–∏–≤—ã: {stats.ASSET || 0}
                </div>
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-red-500 rounded-full mr-2"></span>
                  –ü–∞—Å—Å–∏–≤—ã: {stats.LIABILITY || 0}
                </div>
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-emerald-500 rounded-full mr-2"></span>
                  –î–æ—Ö–æ–¥—ã: {stats.INCOME || 0}
                </div>
                <div className="flex items-center">
                  <span className="w-3 h-3 bg-orange-500 rounded-full mr-2"></span>
                  –†–∞—Å—Ö–æ–¥—ã: {stats.EXPENSE || 0}
                </div>
              </div>
            )}
            
            <button
              onClick={() => setShowImportModal(true)}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center text-sm"
            >
              <span className="mr-2">üì§</span>
              –ò–º–ø–æ—Ä—Ç –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞
            </button>
            
            <button
              onClick={() => setShowAddForm(true)}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm"
            >
              <span className="mr-2">‚ûï</span>
              –î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç
            </button>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white px-6 py-3 border-b border-gray-200">
        <div className="flex items-center space-x-4">
          <div className="flex-1 max-w-md">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—á—ë—Ç–∞..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && fetchAccounts()}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
            />
          </div>
          
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
          >
            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
            <option value="ASSET">–ê–∫—Ç–∏–≤—ã</option>
            <option value="LIABILITY">–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</option>
            <option value="EQUITY">–ö–∞–ø–∏—Ç–∞–ª</option>
            <option value="INCOME">–î–æ—Ö–æ–¥—ã</option>
            <option value="EXPENSE">–†–∞—Å—Ö–æ–¥—ã</option>
          </select>
          
          <button
            onClick={fetchAccounts}
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 text-sm"
          >
            üîç –ù–∞–π—Ç–∏
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-6">
        {loading ? (
          <div className="flex items-center justify-center h-64">
            <div className="text-gray-500">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤...</div>
          </div>
        ) : accounts.length === 0 ? (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
            <div className="text-center">
              <span className="text-6xl block mb-4">üìä</span>
              <h3 className="text-xl font-medium text-gray-900 mb-2">
                –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç
              </h3>
              <p className="text-gray-600 mb-6">
                –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Ç–æ–≤—Å–∫–∏–π –ø–ª–∞–Ω —Å—á–µ—Ç–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
              </p>
              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => setShowImportModal(true)}
                  className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700"
                >
                  üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ç–æ–≤—Å–∫–∏–π –ø–ª–∞–Ω
                </button>
                <button
                  onClick={() => setShowAddForm(true)}
                  className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700"
                >
                  ‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –≤—Ä—É—á–Ω—É—é
                </button>
              </div>
            </div>
          </div>
        ) : (
          <AccountsTable
            accounts={accounts}
            onEdit={setEditingAccount}
            onDelete={handleDeleteAccount}
          />
        )}
      </div>

      {/* Modals */}
      {showAddForm && (
        <AccountForm
          companyId={companyId}
          account={editingAccount}
          onClose={() => {
            setShowAddForm(false);
            setEditingAccount(null);
          }}
          onSaved={handleAccountSaved}
        />
      )}

      {showImportModal && (
        <ImportLithuanianModal
          companyId={companyId}
          onClose={() => setShowImportModal(false)}
          onImportSuccess={handleImportSuccess}
        />
      )}
    </div>
  );
};

export default ChartOfAccountsPage;
EOF

# 2. –¢–∞–±–ª–∏—Ü–∞ —Å—á–µ—Ç–æ–≤
echo ""
echo "2Ô∏è‚É£ –°–û–ó–î–ê–Å–ú ACCOUNTS TABLE:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cat > f/src/pages/company/chart-of-accounts/components/AccountsTable.tsx << 'EOF'
import React from 'react';
import { ChartAccount } from '../types/chartTypes';

interface AccountsTableProps {
  accounts: ChartAccount[];
  onEdit: (account: ChartAccount) => void;
  onDelete: (accountId: number) => void;
}

const AccountsTable: React.FC<AccountsTableProps> = ({ accounts, onEdit, onDelete }) => {
  const getTypeColor = (type: string) => {
    const colors = {
      'ASSET': 'bg-blue-100 text-blue-800',
      'LIABILITY': 'bg-red-100 text-red-800',
      'EQUITY': 'bg-green-100 text-green-800',
      'INCOME': 'bg-emerald-100 text-emerald-800',
      'EXPENSE': 'bg-orange-100 text-orange-800'
    };
    return colors[type] || 'bg-gray-100 text-gray-800';
  };

  const getAccountIcon = (type: string, code: string) => {
    if (code.startsWith('20') || code.startsWith('203')) return 'üì¶'; // –¢–æ–≤–∞—Ä—ã
    if (code.startsWith('24') || code.startsWith('240')) return 'üí∞'; // –î–µ–±–∏—Ç–æ—Ä—ã
    if (code.startsWith('27') || code.startsWith('280')) return 'üè¶'; // –ë–∞–Ω–∫
    if (code.startsWith('44') || code.startsWith('56')) return 'üè™'; // –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
    if (code.startsWith('70') || code.startsWith('701')) return 'üíé'; // –í—ã—Ä—É—á–∫–∞
    if (code.startsWith('60') || code.startsWith('601')) return 'üìâ'; // –†–∞—Å—Ö–æ–¥—ã
    if (type === 'ASSET') return 'üìä';
    if (type === 'LIABILITY') return 'üìã';
    if (type === 'INCOME') return 'üìà';
    if (type === 'EXPENSE') return 'üìâ';
    return 'üìÑ';
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50 border-b border-gray-200">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –°—á—ë—Ç
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –ù–∞–∑–≤–∞–Ω–∏–µ
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –¢–∏–ø
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –í–∞–ª—é—Ç–∞
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                –°—Ç–∞—Ç—É—Å
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                –î–µ–π—Å—Ç–≤–∏—è
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {accounts.map((account) => (
              <tr key={account.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <span className="text-xl mr-3">
                      {getAccountIcon(account.account_type, account.account_code)}
                    </span>
                    <span className="text-sm font-mono font-medium text-gray-900">
                      {account.account_code}
                    </span>
                  </div>
                </td>
                
                <td className="px-6 py-4">
                  <div className="text-sm font-medium text-gray-900">
                    {account.account_name}
                  </div>
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(account.account_type)}`}>
                    {account.account_type}
                  </span>
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {account.currency || 'EUR'}
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    account.is_active 
                      ? 'bg-green-100 text-green-800'
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {account.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                  </span>
                </td>
                
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex items-center justify-end space-x-2">
                    <button
                      onClick={() => onEdit(account)}
                      className="text-blue-600 hover:text-blue-800 p-1 rounded"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      onClick={() => onDelete(account.id)}
                      className="text-red-600 hover:text-red-800 p-1 rounded"
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {accounts.length > 0 && (
        <div className="bg-gray-50 px-6 py-3 border-t border-gray-200">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>–í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: {accounts.length}</span>
            <div className="flex items-center space-x-4">
              <span className="flex items-center">
                <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                –ê–∫—Ç–∏–≤—ã
              </span>
              <span className="flex items-center">
                <span className="w-2 h-2 bg-red-500 rounded-full mr-2"></span>
                –ü–∞—Å—Å–∏–≤—ã
              </span>
              <span className="flex items-center">
                <span className="w-2 h-2 bg-emerald-500 rounded-full mr-2"></span>
                –î–æ—Ö–æ–¥—ã
              </span>
              <span className="flex items-center">
                <span className="w-2 h-2 bg-orange-500 rounded-full mr-2"></span>
                –†–∞—Å—Ö–æ–¥—ã
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AccountsTable;
EOF

# 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π InventoryStore
echo ""
echo "3Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ –¢–û–í–ê–†–´ + –ü–õ–ê–ù –°–ß–ï–¢–û–í:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cat > f/src/store/inventoryWithAccountsStore.ts << 'EOF'
// üéØ INVENTORY STORE –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –ü–õ–ê–ù–ê –°–ß–ï–¢–û–í
// –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Å—á—ë—Ç—É –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤

interface InventoryItem {
  id: string;
  productCode: string;
  productName: string;
  quantity: number;
  unit: string;
  costPrice: number;
  totalValue: number;
  lastUpdated: string;
  
  // üîó –ü–†–ò–í–Ø–ó–ö–ê –ö –ü–õ–ê–ù–£ –°–ß–ï–¢–û–í
  inventoryAccount: string;  // –°—á—ë—Ç —Ç–æ–≤–∞—Ä–æ–≤ (203, 2040, etc.)
  accountName: string;       // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞
  
  batches: InventoryBatch[];
}

interface InventoryBatch {
  batchId: string;
  purchaseDate: string;
  quantity: number;
  costPrice: number;
  supplierId?: string;
  supplierName?: string;
  remainingQuantity: number;
}

interface AccountingEntry {
  id: string;
  date: string;
  debitAccount: string;
  debitAccountName: string;
  creditAccount: string;
  creditAccountName: string;
  amount: number;
  description: string;
  documentType: 'PURCHASE' | 'SALE';
  documentNumber: string;
  productCode?: string;
}

// üá±üáπ –ü–õ–ê–ù –°–ß–ï–¢–û–í –õ–ò–¢–í–´ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
export const LITHUANIAN_ACCOUNTS = {
  // –¢–æ–≤–∞—Ä—ã (–∫–ª–∞—Å—Å 2)
  '2030': { name: '–°—ã—Ä—å—ë –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', type: 'ASSET' },
  '2040': { name: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏', type: 'ASSET' },
  '2041': { name: '–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã', type: 'ASSET' },
  '2042': { name: '–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', type: 'ASSET' },
  '2043': { name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', type: 'ASSET' },
  
  // –î–µ–±–∏—Ç–æ—Ä—ã/–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã
  '2410': { name: '–î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', type: 'ASSET' },
  '4430': { name: '–ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º', type: 'LIABILITY' },
  
  // –ë–∞–Ω–∫
  '2710': { name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞', type: 'ASSET' },
  
  // –î–æ—Ö–æ–¥—ã/–†–∞—Å—Ö–æ–¥—ã
  '6001': { name: '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂', type: 'EXPENSE' },
  '7001': { name: '–í—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂', type: 'INCOME' }
};

class InventoryWithAccountsStore {
  private inventory: Map<string, InventoryItem> = new Map();
  private accountingEntries: AccountingEntry[] = [];

  // üõí –ü–†–ò–•–û–î –¢–û–í–ê–†–ê –° –ü–†–ò–í–Ø–ó–ö–û–ô –ö –°–ß–Å–¢–£
  addPurchaseWithAccount(purchase: {
    productCode: string;
    productName: string;
    quantity: number;
    unit: string;
    costPrice: number;
    supplierId: string;
    supplierName: string;
    documentNumber: string;
    inventoryAccount: string;  // ‚Üê –°–ß–Å–¢ –¢–û–í–ê–†–û–í!
    payableAccount: string;
  }) {
    const batchId = `BATCH-${Date.now()}`;
    const totalAmount = purchase.quantity * purchase.costPrice;

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Ç–∏—é
    const newBatch: InventoryBatch = {
      batchId,
      purchaseDate: new Date().toISOString(),
      quantity: purchase.quantity,
      costPrice: purchase.costPrice,
      supplierId: purchase.supplierId,
      supplierName: purchase.supplierName,
      remainingQuantity: purchase.quantity
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    const existing = this.inventory.get(purchase.productCode);
    if (existing) {
      existing.quantity += purchase.quantity;
      existing.totalValue += totalAmount;
      existing.costPrice = existing.totalValue / existing.quantity; // –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è
      existing.batches.push(newBatch);
      existing.lastUpdated = new Date().toISOString();
    } else {
      const newItem: InventoryItem = {
        id: `INV-${purchase.productCode}`,
        productCode: purchase.productCode,
        productName: purchase.productName,
        quantity: purchase.quantity,
        unit: purchase.unit,
        costPrice: purchase.costPrice,
        totalValue: totalAmount,
        lastUpdated: new Date().toISOString(),
        inventoryAccount: purchase.inventoryAccount,  // ‚Üê –ü–†–ò–í–Ø–ó–ö–ê –ö –°–ß–Å–¢–£!
        accountName: LITHUANIAN_ACCOUNTS[purchase.inventoryAccount]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—á—ë—Ç',
        batches: [newBatch]
      };
      this.inventory.set(purchase.productCode, newItem);
    }

    // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≤–æ–¥–∫—É
    this.addAccountingEntry({
      id: `ACC-${Date.now()}`,
      date: new Date().toISOString(),
      debitAccount: purchase.inventoryAccount,
      debitAccountName: LITHUANIAN_ACCOUNTS[purchase.inventoryAccount]?.name || '',
      creditAccount: purchase.payableAccount,
      creditAccountName: LITHUANIAN_ACCOUNTS[purchase.payableAccount]?.name || '',
      amount: totalAmount,
      description: `–ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞: ${purchase.productName} –æ—Ç ${purchase.supplierName}`,
      documentType: 'PURCHASE',
      documentNumber: purchase.documentNumber,
      productCode: purchase.productCode
    });

    this.saveToStorage();
    return { success: true, batchId, totalAmount };
  }

  // üí∞ –ü–†–û–î–ê–ñ–ê –¢–û–í–ê–†–ê (FIFO + –ø—Ä–æ–≤–æ–¥–∫–∏)
  addSaleWithAccounting(sale: {
    productCode: string;
    quantity: number;
    salePrice: number;
    customerId: string;
    customerName: string;
    documentNumber: string;
    cogsAccount?: string;       // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
    revenueAccount?: string;    // –í—ã—Ä—É—á–∫–∞
    receivableAccount?: string; // –î–µ–±–∏—Ç–æ—Ä–∫–∞
  }) {
    const item = this.inventory.get(sale.productCode);
    if (!item) {
      throw new Error(`–¢–æ–≤–∞—Ä ${sale.productCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ`);
    }

    if (item.quantity < sale.quantity) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${item.quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${sale.quantity}`);
    }

    // FIFO —Å–ø–∏—Å–∞–Ω–∏–µ
    let remainingToSell = sale.quantity;
    let totalCostPrice = 0;

    for (const batch of item.batches) {
      if (remainingToSell <= 0) break;
      
      if (batch.remainingQuantity > 0) {
        const quantityFromBatch = Math.min(batch.remainingQuantity, remainingToSell);
        totalCostPrice += quantityFromBatch * batch.costPrice;
        batch.remainingQuantity -= quantityFromBatch;
        remainingToSell -= quantityFromBatch;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    item.quantity -= sale.quantity;
    item.totalValue -= totalCostPrice;
    item.lastUpdated = new Date().toISOString();
    item.batches = item.batches.filter(b => b.remainingQuantity > 0);

    const saleAmount = sale.quantity * sale.salePrice;
    const profit = saleAmount - totalCostPrice;

    // –ü—Ä–æ–≤–æ–¥–∫–∞ 1: D—Ç –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ö—Ç –¢–æ–≤–∞—Ä—ã
    this.addAccountingEntry({
      id: `ACC-${Date.now()}-1`,
      date: new Date().toISOString(),
      debitAccount: sale.cogsAccount || '6001',
      debitAccountName: LITHUANIAN_ACCOUNTS[sale.cogsAccount || '6001']?.name || '',
      creditAccount: item.inventoryAccount,
      creditAccountName: item.accountName,
      amount: totalCostPrice,
      description: `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏: ${item.productName}`,
      documentType: 'SALE',
      documentNumber: sale.documentNumber,
      productCode: sale.productCode
    });

    // –ü—Ä–æ–≤–æ–¥–∫–∞ 2: D—Ç –î–µ–±–∏—Ç–æ—Ä–∫–∞ –ö—Ç –í—ã—Ä—É—á–∫–∞
    this.addAccountingEntry({
      id: `ACC-${Date.now()}-2`,
      date: new Date().toISOString(),
      debitAccount: sale.receivableAccount || '2410',
      debitAccountName: LITHUANIAN_ACCOUNTS[sale.receivableAccount || '2410']?.name || '',
      creditAccount: sale.revenueAccount || '7001',
      creditAccountName: LITHUANIAN_ACCOUNTS[sale.revenueAccount || '7001']?.name || '',
      amount: saleAmount,
      description: `–í—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏: ${sale.customerName}`,
      documentType: 'SALE',
      documentNumber: sale.documentNumber,
      productCode: sale.productCode
    });

    this.saveToStorage();

    return {
      costPrice: totalCostPrice,
      saleAmount,
      profit,
      remainingStock: item.quantity
    };
  }

  // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
  getInventory(): InventoryItem[] {
    return Array.from(this.inventory.values()).sort((a, b) => a.productName.localeCompare(b.productName));
  }

  getInventoryByProduct(productCode: string): InventoryItem | undefined {
    return this.inventory.get(productCode);
  }

  getAccountingEntries(): AccountingEntry[] {
    return [...this.accountingEntries].sort((a, b) => 
      new Date(b.date).getTime() - new Date(a.date).getTime()
    );
  }

  // üìà –û–ë–û–†–û–¢–ù–û-–°–ê–õ–¨–î–û–í–ê–Ø –í–ï–î–û–ú–û–°–¢–¨ –ü–û –°–ß–ï–¢–ê–ú
  getAccountBalances(): Record<string, { debit: number; credit: number; balance: number; name: string }> {
    const balances: Record<string, { debit: number; credit: number; balance: number; name: string }> = {};
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç–∞
    Object.keys(LITHUANIAN_ACCOUNTS).forEach(account => {
      balances[account] = {
        debit: 0,
        credit: 0,
        balance: 0,
        name: LITHUANIAN_ACCOUNTS[account].name
      };
    });
    
    // –°—á–∏—Ç–∞–µ–º –æ–±–æ—Ä–æ—Ç—ã
    this.accountingEntries.forEach(entry => {
      if (balances[entry.debitAccount]) {
        balances[entry.debitAccount].debit += entry.amount;
      }
      if (balances[entry.creditAccount]) {
        balances[entry.creditAccount].credit += entry.amount;
      }
    });
    
    // –°—á–∏—Ç–∞–µ–º —Å–∞–ª—å–¥–æ (–∞–∫—Ç–∏–≤—ã: –¥–µ–±–µ—Ç+, –ø–∞—Å—Å–∏–≤—ã: –∫—Ä–µ–¥–∏—Ç+)
    Object.keys(balances).forEach(account => {
      const accountInfo = LITHUANIAN_ACCOUNTS[account];
      if (accountInfo.type === 'ASSET' || accountInfo.type === 'EXPENSE') {
        balances[account].balance = balances[account].debit - balances[account].credit;
      } else {
        balances[account].balance = balances[account].credit - balances[account].debit;
      }
    });
    
    return balances;
  }

  private addAccountingEntry(entry: AccountingEntry) {
    this.accountingEntries.push(entry);
  }

  private saveToStorage() {
    try {
      localStorage.setItem('inventory_with_accounts', JSON.stringify({
        inventory: Array.from(this.inventory.entries()),
        accountingEntries: this.accountingEntries
      }));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }

  loadFromStorage() {
    try {
      const data = localStorage.getItem('inventory_with_accounts');
      if (data) {
        const parsed = JSON.parse(data);
        this.inventory = new Map(parsed.inventory || []);
        this.accountingEntries = parsed.accountingEntries || [];
      }
    } catch (error) {
      console.error('Error loading from localStorage:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const inventoryWithAccountsStore = new InventoryWithAccountsStore();
inventoryWithAccountsStore.loadFromStorage();

export { inventoryWithAccountsStore };
EOF

# 4. –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–ª–∞–Ω–æ–º —Å—á–µ—Ç–æ–≤
echo ""
echo "4Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –ö–û–ú–ü–û–ù–ï–ù–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

mkdir -p f/src/components/integration

cat > f/src/components/integration/InventoryAccountsIntegration.tsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { inventoryWithAccountsStore, LITHUANIAN_ACCOUNTS } from '../../store/inventoryWithAccountsStore';

const InventoryAccountsIntegration: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'purchase' | 'sale' | 'accounts' | 'inventory'>('purchase');
  const [inventory, setInventory] = useState([]);
  const [accountingEntries, setAccountingEntries] = useState([]);
  const [accountBalances, setAccountBalances] = useState({});

  const refreshData = () => {
    setInventory(inventoryWithAccountsStore.getInventory());
    setAccountingEntries(inventoryWithAccountsStore.getAccountingEntries());
    setAccountBalances(inventoryWithAccountsStore.getAccountBalances());
  };

  useEffect(() => {
    refreshData();
    const interval = setInterval(refreshData, 2000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="bg-white rounded-lg shadow-lg">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 rounded-t-lg">
        <h2 className="text-2xl font-bold mb-2 flex items-center">
          <span className="text-3xl mr-3">üéØ</span>
          –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¢–æ–≤–∞—Ä—ã + –ü–ª–∞–Ω –°—á–µ—Ç–æ–≤
        </h2>
        <p className="opacity-90">
          –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ü—Ä–∏—Ö–æ–¥ ‚Üí –°–∫–ª–∞–¥ ‚Üí –ü—Ä–æ–¥–∞–∂–∞ ‚Üí –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≤–æ–¥–∫–∏
        </p>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="border-b border-gray-200">
        <div className="flex space-x-8 px-6">
          {[
            { key: 'purchase', label: 'üõí –ü—Ä–∏—Ö–æ–¥', icon: 'üì¶' },
            { key: 'sale', label: 'üí∞ –ü—Ä–æ–¥–∞–∂–∞', icon: 'üíµ' },
            { key: 'inventory', label: 'üè≠ –°–∫–ª–∞–¥', icon: 'üìä' },
            { key: 'accounts', label: 'üìä –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤', icon: 'üìã' }
          ].map(tab => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key as any)}
              className={`py-4 px-2 border-b-2 font-medium text-sm ${
                activeTab === tab.key
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <span className="mr-2">{tab.icon}</span>
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="p-6">
        {activeTab === 'purchase' && <PurchaseTab onUpdate={refreshData} />}
        {activeTab === 'sale' && <SaleTab inventory={inventory} onUpdate={refreshData} />}
        {activeTab === 'inventory' && <InventoryTab inventory={inventory} />}
        {activeTab === 'accounts' && <AccountsTab accountBalances={accountBalances} accountingEntries={accountingEntries} />}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞
const PurchaseTab: React.FC<{ onUpdate: () => void }> = ({ onUpdate }) => {
  const [formData, setFormData] = useState({
    productName: 'Residues Technical Oil',
    productCode: 'RTO_001',
    quantity: 10,
    unit: 'T',
    costPrice: 800,
    supplierName: 'OIL SUPPLY LTD',
    inventoryAccount: '2041', // –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã
    payableAccount: '4430'    // –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
  });
  const [result, setResult] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const documentNumber = `PUR-${Date.now()}`;
      
      inventoryWithAccountsStore.addPurchaseWithAccount({
        ...formData,
        supplierId: 'SUP001',
        documentNumber
      });
      
      const totalAmount = formData.quantity * formData.costPrice;
      
      setResult(`‚úÖ –£–°–ü–ï–®–ù–û! –¢–æ–≤–∞—Ä –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω:

üìã –î–æ–∫—É–º–µ–Ω—Ç: ${documentNumber}
üì¶ –¢–æ–≤–∞—Ä: ${formData.productName}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: +${formData.quantity} ${formData.unit}
üí∞ –°—É–º–º–∞: ‚Ç¨${totalAmount.toLocaleString()}

üìö –ü–†–û–í–û–î–ö–ê:
   –î—Ç ${formData.inventoryAccount} "${LITHUANIAN_ACCOUNTS[formData.inventoryAccount]?.name}"
   –ö—Ç ${formData.payableAccount} "${LITHUANIAN_ACCOUNTS[formData.payableAccount]?.name}"
   –°—É–º–º–∞: ‚Ç¨${totalAmount.toLocaleString()}`);
      
      onUpdate();
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData(prev => ({ ...prev, quantity: 0, costPrice: 0 }));
    } catch (error) {
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  return (
    <div className="space-y-6">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–¢–æ–≤–∞—Ä</label>
            <input
              type="text"
              value={formData.productName}
              onChange={(e) => setFormData(prev => ({ ...prev, productName: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞</label>
            <input
              type="text"
              value={formData.productCode}
              onChange={(e) => setFormData(prev => ({ ...prev, productCode: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
            <input
              type="number"
              value={formData.quantity}
              onChange={(e) => setFormData(prev => ({ ...prev, quantity: Number(e.target.value) }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              min="0"
              step="0.01"
              required
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚Ç¨)</label>
            <input
              type="number"
              value={formData.costPrice}
              onChange={(e) => setFormData(prev => ({ ...prev, costPrice: Number(e.target.value) }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              min="0"
              step="0.01"
              required
            />
          </div>
        </div>

        {/* –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h3 className="font-medium text-blue-800 mb-3">üìä –í—ã–±–æ—Ä —Å—á–µ—Ç–æ–≤:</h3>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–°—á—ë—Ç —Ç–æ–≤–∞—Ä–æ–≤ (–î–ï–ë–ï–¢)</label>
              <select
                value={formData.inventoryAccount}
                onChange={(e) => setFormData(prev => ({ ...prev, inventoryAccount: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="2040">2040 - –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏</option>
                <option value="2041">2041 - –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã</option>
                <option value="2042">2042 - –•–∏–º–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã</option>
                <option value="2043">2043 - –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–°—á—ë—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–ö–†–ï–î–ò–¢)</label>
              <select
                value={formData.payableAccount}
                onChange={(e) => setFormData(prev => ({ ...prev, payableAccount: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="4430">4430 - –ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å</option>
                <option value="2710">2710 - –ë–∞–Ω–∫ (–µ—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ —Å—Ä–∞–∑—É)</option>
              </select>
            </div>
          </div>
          
          <div className="mt-3 p-3 bg-green-50 rounded border border-green-200">
            <div className="text-sm font-medium text-green-800">
              –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç {formData.inventoryAccount} –ö—Ç {formData.payableAccount} = ‚Ç¨{(formData.quantity * formData.costPrice).toLocaleString()}
            </div>
          </div>
        </div>

        <button
          type="submit"
          className="w-full bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 font-medium"
        >
          üì¶ –û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä + —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É
        </button>
      </form>

      {result && (
        <div className="p-4 bg-blue-50 rounded-lg">
          <pre className="text-sm text-blue-800 whitespace-pre-wrap">{result}</pre>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞
const SaleTab: React.FC<{ inventory: any[]; onUpdate: () => void }> = ({ inventory, onUpdate }) => {
  const [formData, setFormData] = useState({
    productCode: '',
    quantity: 5,
    salePrice: 900,
    customerName: 'ENERGY SOLUTIONS LTD'
  });
  const [result, setResult] = useState('');

  const selectedProduct = inventory.find(p => p.productCode === formData.productCode);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedProduct) {
      setResult('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏');
      return;
    }

    try {
      const documentNumber = `SAL-${Date.now()}`;
      
      const saleResult = inventoryWithAccountsStore.addSaleWithAccounting({
        ...formData,
        customerId: 'CUS001',
        documentNumber
      });
      
      const totalRevenue = formData.quantity * formData.salePrice;
      
      setResult(`‚úÖ –£–°–ü–ï–®–ù–û! –¢–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω:

üìã –î–æ–∫—É–º–µ–Ω—Ç: ${documentNumber}
üì¶ –¢–æ–≤–∞—Ä: ${selectedProduct.productName}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: -${formData.quantity} ${selectedProduct.unit}
üí∞ –í—ã—Ä—É—á–∫–∞: ‚Ç¨${totalRevenue.toLocaleString()}
üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨${saleResult.costPrice.toLocaleString()}
üíé –ü—Ä–∏–±—ã–ª—å: ‚Ç¨${saleResult.profit.toLocaleString()}

üìö –ü–†–û–í–û–î–ö–ò:
1Ô∏è‚É£ –î—Ç 6001 "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å" –ö—Ç ${selectedProduct.inventoryAccount} "${selectedProduct.accountName}"
   –°—É–º–º–∞: ‚Ç¨${saleResult.costPrice.toLocaleString()}

2Ô∏è‚É£ –î—Ç 2410 "–î–µ–±–∏—Ç–æ—Ä–∫–∞" –ö—Ç 7001 "–í—ã—Ä—É—á–∫–∞"
   –°—É–º–º–∞: ‚Ç¨${totalRevenue.toLocaleString()}

üè≠ –û–°–¢–ê–¢–û–ö: ${saleResult.remainingStock} ${selectedProduct.unit}`);
      
      onUpdate();
      setFormData(prev => ({ ...prev, quantity: 0 }));
    } catch (error) {
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  return (
    <div className="space-y-6">
      {inventory.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          <span className="text-4xl block mb-2">üì¶</span>
          <p>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ</p>
          <p className="text-sm">–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–∏—Ö–æ–¥—É–π—Ç–µ —Ç–æ–≤–∞—Ä –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ü—Ä–∏—Ö–æ–¥"</p>
        </div>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–¢–æ–≤–∞—Ä</label>
              <select
                value={formData.productCode}
                onChange={(e) => setFormData(prev => ({ ...prev, productCode: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</option>
                {inventory.filter(item => item.quantity > 0).map(item => (
                  <option key={item.productCode} value={item.productCode}>
                    {item.productName} (–æ—Å—Ç–∞—Ç–æ–∫: {item.quantity} {item.unit}) - {item.accountName}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
              <input
                type="number"
                value={formData.quantity}
                onChange={(e) => setFormData(prev => ({ ...prev, quantity: Number(e.target.value) }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                min="0"
                max={selectedProduct?.quantity || 0}
                step="0.01"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (‚Ç¨)</label>
              <input
                type="number"
                value={formData.salePrice}
                onChange={(e) => setFormData(prev => ({ ...prev, salePrice: Number(e.target.value) }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                min="0"
                step="0.01"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</label>
              <input
                type="text"
                value={formData.customerName}
                onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
          </div>

          {selectedProduct && (
            <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <h3 className="font-medium text-purple-800 mb-2">üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç:</h3>
              <div className="grid grid-cols-3 gap-4 text-sm">
                <div>
                  <div className="text-gray-600">–í—ã—Ä—É—á–∫–∞:</div>
                  <div className="font-medium">‚Ç¨{(formData.quantity * formData.salePrice).toLocaleString()}</div>
                </div>
                <div>
                  <div className="text-gray-600">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</div>
                  <div className="font-medium">‚Ç¨{(formData.quantity * selectedProduct.costPrice).toLocaleString()}</div>
                </div>
                <div>
                  <div className="text-gray-600">–ü—Ä–∏–±—ã–ª—å:</div>
                  <div className="font-medium text-green-600">‚Ç¨{((formData.quantity * formData.salePrice) - (formData.quantity * selectedProduct.costPrice)).toLocaleString()}</div>
                </div>
              </div>
            </div>
          )}

          <button
            type="submit"
            disabled={!selectedProduct}
            className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 font-medium disabled:opacity-50"
          >
            üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä + —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–æ–¥–∫–∏
          </button>
        </form>
      )}

      {result && (
        <div className="p-4 bg-purple-50 rounded-lg">
          <pre className="text-sm text-purple-800 whitespace-pre-wrap">{result}</pre>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∫–ª–∞–¥–∞
const InventoryTab: React.FC<{ inventory: any[] }> = ({ inventory }) => {
  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium text-gray-900 flex items-center">
        <span className="text-2xl mr-2">üè≠</span>
        –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
      </h3>

      {inventory.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          <span className="text-6xl block mb-4">üì¶</span>
          <p>–°–∫–ª–∞–¥ –ø—É—Å—Ç</p>
        </div>
      ) : (
        <div className="space-y-3">
          {inventory.map((item, index) => (
            <div key={index} className="bg-gray-50 border border-gray-200 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <h4 className="font-medium text-gray-900 flex items-center">
                    <span className="text-xl mr-2">üì¶</span>
                    {item.productName}
                  </h4>
                  <p className="text-sm text-gray-600">
                    –ö–æ–¥: {item.productCode} ‚Ä¢ –°—á—ë—Ç: {item.inventoryAccount} ({item.accountName})
                  </p>
                  <p className="text-xs text-gray-500">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(item.lastUpdated).toLocaleString()}
                  </p>
                </div>
                
                <div className="text-right">
                  <div className="text-lg font-semibold text-gray-900">
                    {item.quantity} {item.unit}
                  </div>
                  <div className="text-sm text-gray-600">
                    ‚Ç¨{item.costPrice.toFixed(2)}/{item.unit}
                  </div>
                  <div className="text-xs font-medium text-green-600">
                    –í—Å–µ–≥–æ: ‚Ç¨{item.totalValue.toLocaleString()}
                  </div>
                </div>
              </div>
              
              {item.batches && item.batches.length > 0 && (
                <div className="mt-3 pt-3 border-t border-gray-300">
                  <h5 className="text-xs font-medium text-gray-700 mb-2">FIFO –ø–∞—Ä—Ç–∏–∏:</h5>
                  <div className="space-y-1">
                    {item.batches.filter(batch => batch.remainingQuantity > 0).map((batch, bIndex) => (
                      <div key={bIndex} className="text-xs text-gray-600 flex justify-between">
                        <span>{new Date(batch.purchaseDate).toLocaleDateString()} –æ—Ç {batch.supplierName}</span>
                        <span>{batch.remainingQuantity} –ø–æ ‚Ç¨{batch.costPrice.toFixed(2)}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤ –∏ –ø—Ä–æ–≤–æ–¥–æ–∫
const AccountsTab: React.FC<{ accountBalances: any; accountingEntries: any[] }> = ({ 
  accountBalances, 
  accountingEntries 
}) => {
  return (
    <div className="space-y-6">
      {/* –û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 flex items-center mb-4">
          <span className="text-2xl mr-2">üìä</span>
          –û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {Object.keys(accountBalances)
            .filter(account => accountBalances[account].balance !== 0)
            .map(account => {
              const balance = accountBalances[account];
              const balanceColor = balance.balance > 0 ? 'text-green-600' : 'text-red-600';
              
              return (
                <div key={account} className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <div className="font-mono text-sm font-medium text-gray-900">
                        {account}
                      </div>
                      <div className="text-sm text-gray-600">
                        {balance.name}
                      </div>
                    </div>
                    <div className={`text-lg font-semibold ${balanceColor}`}>
                      ‚Ç¨{Math.abs(balance.balance).toLocaleString()}
                    </div>
                  </div>
                  
                  <div className="mt-2 flex justify-between text-xs text-gray-500">
                    <span>–î–µ–±–µ—Ç: ‚Ç¨{balance.debit.toLocaleString()}</span>
                    <span>–ö—Ä–µ–¥–∏—Ç: ‚Ç¨{balance.credit.toLocaleString()}</span>
                  </div>
                </div>
              );
            })}
        </div>

        {Object.keys(accountBalances).filter(account => accountBalances[account].balance !== 0).length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <span className="text-6xl block mb-4">üìä</span>
            <p>–ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–π –ø–æ —Å—á–µ—Ç–∞–º</p>
          </div>
        )}
      </div>

      {/* –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–æ–¥–æ–∫ */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 flex items-center mb-4">
          <span className="text-2xl mr-2">üìã</span>
          –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–æ–¥–æ–∫
        </h3>

        {accountingEntries.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <span className="text-6xl block mb-4">üìã</span>
            <p>–ù–µ—Ç –ø—Ä–æ–≤–æ–¥–æ–∫</p>
          </div>
        ) : (
          <div className="space-y-3">
            {accountingEntries.slice(0, 10).map((entry, index) => (
              <div key={index} className="bg-white border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className={`px-2 py-1 rounded text-xs font-medium ${
                    entry.documentType === 'PURCHASE' 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-purple-100 text-purple-800'
                  }`}>
                    {entry.documentType === 'PURCHASE' ? 'üõí –ü–æ–∫—É–ø–∫–∞' : 'üí∞ –ü—Ä–æ–¥–∞–∂–∞'}
                  </div>
                  <div className="text-sm text-gray-500">
                    {new Date(entry.date).toLocaleString()}
                  </div>
                </div>
                
                <div className="text-sm text-gray-800 mb-2">
                  {entry.description}
                </div>
                
                <div className="flex items-center justify-between bg-gray-50 rounded p-2">
                  <div className="text-xs font-mono">
                    –î—Ç {entry.debitAccount} "{entry.debitAccountName}"
                  </div>
                  <div className="text-xs font-mono">
                    –ö—Ç {entry.creditAccount} "{entry.creditAccountName}"
                  </div>
                  <div className="text-sm font-semibold text-blue-600">
                    ‚Ç¨{entry.amount.toLocaleString()}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default InventoryAccountsIntegration;
EOF

# 5. –°–æ–∑–¥–∞—ë–º —Ç–∏–ø—ã –¥–ª—è –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤
echo ""
echo "5Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –¢–ò–ü–´ –ü–õ–ê–ù–ê –°–ß–ï–¢–û–í:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# 6. –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
echo ""
echo "6Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –û–°–ù–û–í–ù–´–ï –§–ê–ô–õ–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
cat > f/src/pages/company/chart-of-accounts/index.ts << 'EOF'
export { default } from './ChartOfAccountsPage';
export * from './types/chartTypes';
EOF

# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–æ—É—Ç–∏–Ω–≥
echo ""
echo "7Ô∏è‚É£ –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –†–û–£–¢–ò–ù–ì:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "üìç –î–æ–±–∞–≤—å—Ç–µ –≤ f/src/App.tsx –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π router:"
echo ""
echo "import ChartOfAccountsPage from './pages/company/chart-of-accounts';"
echo "import InventoryAccountsIntegration from './components/integration/InventoryAccountsIntegration';"
echo ""
echo "// –í —Ä–æ—É—Ç–∞—Ö:"
echo "<Route path=\"/company/chart-of-accounts\" component={ChartOfAccountsPage} />"
echo "<Route path=\"/company/inventory-integration\" component={InventoryAccountsIntegration} />"

echo ""
echo "8Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo "üéØ –ö–ê–ö –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:"
echo "   1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ /company/inventory-integration"
echo "   2Ô∏è‚É£ –û–ø—Ä–∏—Ö–æ–¥—É–π—Ç–µ —Ç–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2041 - –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã)"
echo "   3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É '–°–∫–ª–∞–¥' - —Ç–æ–≤–∞—Ä –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—á—ë—Ç—É"
echo "   4Ô∏è‚É£ –ü—Ä–æ–¥–∞–π—Ç–µ —á–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–æ–¥–∫–∏"
echo "   5Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤' - —É–≤–∏–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏"

echo ""
echo "üéäüî•üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –¢–û–í–ê–†–´ + –ü–õ–ê–ù –°–ß–ï–¢–û–í –ì–û–¢–û–í–ê! üéØüî•üéä"
echo ""
echo "‚úÖ –ß–¢–û –ú–´ –°–û–ó–î–ê–õ–ò:"
echo "   üìä –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤ —Å –ª–∏—Ç–æ–≤—Å–∫–∏–º–∏ —Å—á–µ—Ç–∞–º–∏"
echo "   üè≠ Inventory Store —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–ª–∞–Ω—É —Å—á–µ—Ç–æ–≤"
echo "   üõí –ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–æ–¥–∫–æ–π"
echo "   üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ —Å –¥–≤—É–º—è –ø—Ä–æ–≤–æ–¥–∫–∞–º–∏ (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å + –≤—ã—Ä—É—á–∫–∞)"
echo "   üìã –û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å"
echo "   üéØ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞–∫ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π ERP!"
echo ""
echo "üöÄ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ!"

# –°–æ–∑–¥–∞—ë–º README –¥–ª—è —ç—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
cat > f/src/README_CHART_ACCOUNTS_INTEGRATION.md << 'EOF'
# üéØ –ü–ª–∞–Ω –°—á–µ—Ç–æ–≤ + –¢–æ–≤–∞—Ä—ã - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

## üöÄ –ß—Ç–æ —Å–æ–∑–¥–∞–Ω–æ:

### üìä –ü–ª–∞–Ω –°—á–µ—Ç–æ–≤ (Chart of Accounts)
- **ChartOfAccountsPage** - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
- **AccountsTable** - —Ç–∞–±–ª–∏—Ü–∞ —Å—á–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏  
- **AccountForm** - —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- **ImportLithuanianModal** - –∏–º–ø–æ—Ä—Ç –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∞ (51 —Å—á—ë—Ç)

### üè≠ Inventory + Accounts Store
- **inventoryWithAccountsStore** - store —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞–Ω–∞ —Å—á–µ—Ç–æ–≤
- –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ —Å—á—ë—Ç—É (2040, 2041, etc.)
- FIFO —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≤–æ–¥–∫–∏

### üéØ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. **–ü—Ä–∏—Ö–æ–¥** ‚Üí D—Ç –¢–æ–≤–∞—Ä—ã (2040) –ö—Ç –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ (4430)
2. **–ü—Ä–æ–¥–∞–∂–∞** ‚Üí 
   - D—Ç –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (6001) –ö—Ç –¢–æ–≤–∞—Ä—ã (2040)  
   - D—Ç –î–µ–±–∏—Ç–æ—Ä—ã (2410) –ö—Ç –í—ã—Ä—É—á–∫–∞ (7001)
3. **–ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤** ‚Üí –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

## üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

```tsx
import { inventoryWithAccountsStore } from './store/inventoryWithAccountsStore';

// –ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞
inventoryWithAccountsStore.addPurchaseWithAccount({
  productCode: 'OIL_001',
  productName: 'Crude Oil',
  quantity: 100,
  unit: 'T',
  costPrice: 800,
  inventoryAccount: '2041', // –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã
  payableAccount: '4430'    // –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
  // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º
const balances = inventoryWithAccountsStore.getAccountBalances();
```

## üéØ –õ–∏—Ç–æ–≤—Å–∫–∏–π –ø–ª–∞–Ω —Å—á–µ—Ç–æ–≤:
- **2040** - –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏
- **2041** - –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã  
- **2042** - –•–∏–º–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
- **2410** - –î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
- **4430** - –ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
- **6001** - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂
- **7001** - –í—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂

## üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç:
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è ERP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–∞ —Å –ø–ª–∞–Ω–æ–º —Å—á–µ—Ç–æ–≤!
EOF

echo ""
echo "üìñ –°–æ–∑–¥–∞–Ω README —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: f/src/README_CHART_ACCOUNTS_INTEGRATION.md"