name: SOLAR
on:
  push:
    branches:
      - main
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_URL_TEST_VERCEL: ${{ secrets.DATABASE_URL_TEST_VERCEL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Backend (`b`)
      - name: Install b
        run: |
          cd ./b
          npm install
          npx prisma generate --schema=prisma/schema.prisma
        env:
          CI: true

      - name: Apply database migrations for main schema
        run: |
          cd ./b
          npx prisma migrate deploy --schema=prisma/schema.prisma
          echo "Main schema migrations applied"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Reset failed migrations and create test schema
        run: |
          cd ./b
          echo "Resetting any failed migrations in test database..."
          node scripts/reset-test-migrations.js
          echo "Creating test schema directly with db push..."
          npx prisma db push --schema=prisma/schema_t.prisma --force-reset
          echo "Test schema created with db push"
        env:
          DATABASE_URL_TEST_VERCEL: ${{ secrets.DATABASE_URL_TEST_VERCEL }}

      - name: Debug Environment Variables
        run: |
          echo "DATABASE_URL=$DATABASE_URL"
          echo "DATABASE_URL_TEST_VERCEL exists: $([[ -n $DATABASE_URL_TEST_VERCEL ]] && echo 'Yes' || echo 'No')"
          echo "Generating test client..."
          npx prisma generate --schema=prisma/schema_t.prisma
        working-directory: ./b
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_URL_TEST_VERCEL: ${{ secrets.DATABASE_URL_TEST_VERCEL }}

      - name: Run b
        run: npm test
        working-directory: ./b
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_URL_TEST_VERCEL: ${{ secrets.DATABASE_URL_TEST_VERCEL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: test

      - name: Check Database Connection
        run: |
          cd ./b
          echo "Main DB connection status:"
          npx prisma db pull --schema=prisma/schema.prisma --print
          echo "Test DB connection status:"
          npx prisma db pull --schema=prisma/schema_t.prisma --print
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_URL_TEST_VERCEL: ${{ secrets.DATABASE_URL_TEST_VERCEL }}

      # Frontend (`f`)
      - name: Install f
        run: npm install
        working-directory: ./f

      - name: Build f
        run: npm run build
        working-directory: ./f

  deploy:
    runs-on: ubuntu-latest
    # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç build-and-test –∏ –¥–æ–±–∞–≤–ª—è–µ–º if: always()
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –±—ç–∫–µ–Ω–¥–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
      - name: Install backend dependencies
        run: |
          cd ./b
          npm install
        env:
          CI: true

      # Backend deployment
      - name: Deploy Backend to Render
        env:
          RENDER_API_KEY_BACKEND: ${{ secrets.RENDER_API_KEY_B }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY_BACKEND" \
            https://api.render.com/deploy/srv-cv1lsclsvqrc738ou1j0?key=eggRuEnFkC8

      # Frontend deployment
      - name: Deploy Frontend to Render
        env:
          RENDER_API_KEY_FRONTEND: ${{ secrets.RENDER_API_KEY_F }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY_FRONTEND" \
            https://api.render.com/deploy/srv-cv1lt9ij1k6c73957uk0?key=FU1hKmmHjdU
      # üß© –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: –¥–µ–ø–ª–æ–π –Ω–∞ **—Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä** –ø–æ SSH
      - name: Deploy to own server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/solar
            git pull origin main
            pm2 restart all

