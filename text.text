-- üéØ –ü–ê–†–¢–ò–ô–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ß–Å–¢–ê –¢–û–í–ê–†–û–í
-- –ö–∞–∂–¥–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é
-- –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ (FIFO/LIFO)

-- ===============================================
-- üì¶ –ü–ê–†–¢–ò–ò –¢–û–í–ê–†–û–í (BATCHES)
-- ===============================================

CREATE TABLE product_batches (
  id SERIAL PRIMARY KEY,
  company_id INT NOT NULL,
  
  -- –°–≤—è–∑–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
  product_id INT NOT NULL,           -- –ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä
  purchase_id INT,                   -- –ò–∑ –∫–∞–∫–æ–π –ø–æ–∫—É–ø–∫–∏ (–ø—Ä–∏—Ö–æ–¥)
  warehouse_id INT NOT NULL,         -- –ù–∞ –∫–∞–∫–æ–º —Å–∫–ª–∞–¥–µ
  
  -- –ü–∞—Ä—Ç–∏–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  batch_number VARCHAR(50),          -- –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏ (–∞–≤—Ç–æ –∏–ª–∏ —Ä—É—á–Ω–æ–π)
  supplier_id INT,                   -- –û—Ç –∫–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  purchase_date DATE,                -- –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏
  expiry_date DATE,                  -- –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è/–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤)
  
  -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã
  initial_quantity DECIMAL(10,3) NOT NULL,  -- –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  current_quantity DECIMAL(10,3) NOT NULL,  -- –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
  unit_cost DECIMAL(10,2) NOT NULL,         -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
  
  -- –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–∏–∏
  status VARCHAR(20) DEFAULT 'ACTIVE',      -- ACTIVE, EXPIRED, SOLD_OUT
  
  -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  
  -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  INDEX idx_batches_product (product_id),
  INDEX idx_batches_warehouse (warehouse_id), 
  INDEX idx_batches_supplier (supplier_id),
  INDEX idx_batches_date (purchase_date),
  INDEX idx_batches_status (status),
  
  -- –°–≤—è–∑–∏ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
  FOREIGN KEY (company_id) REFERENCES companies(id),
  FOREIGN KEY (product_id) REFERENCES products(id),
  FOREIGN KEY (purchase_id) REFERENCES purchases(id),
  FOREIGN KEY (warehouse_id) REFERENCES warehouses(id),
  FOREIGN KEY (supplier_id) REFERENCES clients(id)
);

-- ===============================================
-- üìä –î–í–ò–ñ–ï–ù–ò–Ø –ü–ê–†–¢–ò–ô (BATCH MOVEMENTS)
-- ===============================================

CREATE TABLE batch_movements (
  id SERIAL PRIMARY KEY,
  company_id INT NOT NULL,
  
  -- –°–≤—è–∑–∏
  batch_id INT NOT NULL,             -- –ö–∞–∫–∞—è –ø–∞—Ä—Ç–∏—è
  product_id INT NOT NULL,           -- –ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä (–¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
  warehouse_id INT NOT NULL,         -- –ù–∞ –∫–∞–∫–æ–º —Å–∫–ª–∞–¥–µ
  
  -- –°–≤—è–∑–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
  sale_id INT,                       -- –°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–∂–µ–π (—Ä–∞—Å—Ö–æ–¥)
  purchase_id INT,                   -- –°–≤—è–∑—å —Å –ø–æ–∫—É–ø–∫–æ–π (–ø—Ä–∏—Ö–æ–¥)
  adjustment_id INT,                 -- –°–≤—è–∑—å —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
  
  -- –î–≤–∏–∂–µ–Ω–∏–µ
  movement_type VARCHAR(20) NOT NULL, -- 'IN' (–ø—Ä–∏—Ö–æ–¥), 'OUT' (—Ä–∞—Å—Ö–æ–¥), 'ADJUST' (–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞)
  quantity DECIMAL(10,3) NOT NULL,    -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (+/-)
  unit_cost DECIMAL(10,2),            -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã
  
  -- –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  description TEXT,
  reference_document VARCHAR(50),     -- –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
  movement_date DATE NOT NULL,
  
  -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  created_by INT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  
  -- –ò–Ω–¥–µ–∫—Å—ã
  INDEX idx_movements_batch (batch_id),
  INDEX idx_movements_product (product_id),
  INDEX idx_movements_date (movement_date),
  INDEX idx_movements_type (movement_type),
  
  -- –°–≤—è–∑–∏
  FOREIGN KEY (company_id) REFERENCES companies(id),
  FOREIGN KEY (batch_id) REFERENCES product_batches(id),
  FOREIGN KEY (product_id) REFERENCES products(id),
  FOREIGN KEY (warehouse_id) REFERENCES warehouses(id),
  FOREIGN KEY (sale_id) REFERENCES sales(id),
  FOREIGN KEY (purchase_id) REFERENCES purchases(id),
  FOREIGN KEY (created_by) REFERENCES users(id)
);

-- ===============================================
-- üîß –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–†–¢–ò–Ø–ú–ò
-- ===============================================

-- 1Ô∏è‚É£ –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
CREATE OR REPLACE FUNCTION create_batch_on_purchase()
RETURNS TRIGGER AS $$
BEGIN
  -- –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ —Å–æ–∑–¥–∞—ë–º –ø–∞—Ä—Ç–∏—é
  INSERT INTO product_batches (
    company_id, product_id, purchase_id, warehouse_id,
    batch_number, supplier_id, purchase_date,
    initial_quantity, current_quantity, unit_cost,
    status
  )
  SELECT 
    p.company_id,
    NEW.product_id,
    NEW.purchase_id,
    p.warehouse_id,
    CONCAT('BATCH-', p.document_number, '-', NEW.product_id), -- –ê–≤—Ç–æ–Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏
    p.supplier_id,
    p.document_date,
    NEW.quantity,
    NEW.quantity, -- –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–µ—Å—å —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
    NEW.unit_price_base,
    'ACTIVE'
  FROM purchases p
  WHERE p.id = NEW.purchase_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –∫ —Ç–∞–±–ª–∏—Ü–µ purchase_items
CREATE TRIGGER trigger_create_batch_on_purchase
  AFTER INSERT ON purchase_items
  FOR EACH ROW
  EXECUTE FUNCTION create_batch_on_purchase();

-- 2Ô∏è‚É£ –§—É–Ω–∫—Ü–∏—è FIFO —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
CREATE OR REPLACE FUNCTION allocate_stock_fifo(
  p_company_id INT,
  p_product_id INT,
  p_warehouse_id INT,
  p_quantity DECIMAL(10,3),
  p_sale_id INT
) RETURNS TABLE(batch_id INT, allocated_quantity DECIMAL(10,3), unit_cost DECIMAL(10,2)) AS $$
DECLARE
  remaining_quantity DECIMAL(10,3) := p_quantity;
  batch_record RECORD;
  allocation_quantity DECIMAL(10,3);
BEGIN
  -- –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–∏–∏ –ø–æ FIFO (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  FOR batch_record IN 
    SELECT id, current_quantity, unit_cost, purchase_date
    FROM product_batches 
    WHERE company_id = p_company_id 
      AND product_id = p_product_id 
      AND warehouse_id = p_warehouse_id
      AND current_quantity > 0
      AND status = 'ACTIVE'
    ORDER BY purchase_date ASC, id ASC -- FIFO: —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏
  LOOP
    IF remaining_quantity <= 0 THEN
      EXIT; -- –í—Å—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ
    END IF;
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å –∏–∑ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏
    allocation_quantity := LEAST(remaining_quantity, batch_record.current_quantity);
    
    -- –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤ –ø–∞—Ä—Ç–∏–∏
    UPDATE product_batches 
    SET current_quantity = current_quantity - allocation_quantity,
        updated_at = NOW(),
        status = CASE 
          WHEN current_quantity - allocation_quantity = 0 THEN 'SOLD_OUT'
          ELSE status 
        END
    WHERE id = batch_record.id;
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    INSERT INTO batch_movements (
      company_id, batch_id, product_id, warehouse_id,
      sale_id, movement_type, quantity, unit_cost,
      description, movement_date, created_by
    ) VALUES (
      p_company_id, batch_record.id, p_product_id, p_warehouse_id,
      p_sale_id, 'OUT', -allocation_quantity, batch_record.unit_cost,
      'Sale allocation (FIFO)', CURRENT_DATE, 1 -- TODO: —Ä–µ–∞–ª—å–Ω—ã–π user_id
    );
    
    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
    batch_id := batch_record.id;
    allocated_quantity := allocation_quantity;
    unit_cost := batch_record.unit_cost;
    remaining_quantity := remaining_quantity - allocation_quantity;
    
    RETURN NEXT;
  END LOOP;
  
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ
  IF remaining_quantity > 0 THEN
    RAISE EXCEPTION 'Insufficient stock: requested %, available %', 
      p_quantity, p_quantity - remaining_quantity;
  END IF;
END;
$$ LANGUAGE plpgsql;

-- ===============================================
-- üìä VIEWS –î–õ–Ø –û–¢–ß–Å–¢–ù–û–°–¢–ò
-- ===============================================

-- –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–∞—Ä—Ç–∏—è–º
CREATE VIEW v_current_batches AS
SELECT 
  pb.id as batch_id,
  pb.batch_number,
  p.code as product_code,
  p.name as product_name,
  c.name as supplier_name,
  w.name as warehouse_name,
  pb.purchase_date,
  pb.expiry_date,
  pb.initial_quantity,
  pb.current_quantity,
  pb.unit_cost,
  pb.current_quantity * pb.unit_cost as total_value,
  pb.status,
  CASE 
    WHEN pb.expiry_date < CURRENT_DATE THEN 'EXPIRED'
    WHEN pb.expiry_date < CURRENT_DATE + INTERVAL '30 days' THEN 'EXPIRING_SOON'
    ELSE 'OK'
  END as expiry_status
FROM product_batches pb
JOIN products p ON pb.product_id = p.id
JOIN warehouses w ON pb.warehouse_id = w.id
LEFT JOIN clients c ON pb.supplier_id = c.id
WHERE pb.current_quantity > 0
ORDER BY pb.purchase_date ASC;

-- –î–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞—Ä—Ç–∏—è–º–∏
CREATE VIEW v_stock_movements AS
SELECT 
  bm.id,
  bm.movement_date,
  bm.movement_type,
  p.code as product_code,
  p.name as product_name,
  pb.batch_number,
  w.name as warehouse_name,
  bm.quantity,
  bm.unit_cost,
  bm.quantity * bm.unit_cost as total_value,
  bm.description,
  bm.reference_document
FROM batch_movements bm
JOIN product_batches pb ON bm.batch_id = pb.id
JOIN products p ON bm.product_id = p.id
JOIN warehouses w ON bm.warehouse_id = w.id
ORDER BY bm.movement_date DESC, bm.created_at DESC;