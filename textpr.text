generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================
// ENUMS (БЕЗ @@schema)
// ===============================================

enum Role {
  USER
  ADMIN
}

enum ClientRole {
  CLIENT
  SUPPLIER
}

enum Currency {
  EUR
  USD
  AED
  UAH
}

enum WarehouseStatus {
  ACTIVE
  INACTIVE
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum MessageType {
  TEXT
  AUDIO
  TRANSLATED
}

enum Language {
  ENGLISH
  RUSSIAN
  GERMAN
  POLISH
  UKRAINIAN
  ARABIC
}

// ===============================================
// CORE MODELS
// ===============================================

model users {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  username             String
  password_hash        String
  role                 Role      @default(USER)
  status               String    @default("active")
  email_verified       Boolean   @default(false)
  verification_token   String?
  token_expires        DateTime?
  reset_token          String?   @unique
  reset_token_expires  DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  onboarding_completed Boolean   @default(false)
  
  // Текущая активная компания пользователя
  current_company_id   Int?
  
  // Связи
  owned_companies              companies[]           @relation("company_owner")
  company_memberships         company_users[]
  clients                     clients[]
  purchases                   purchases[]
  sales                       sales[]
  bank_operations             bank_operations[]
  chart_of_accounts           chart_of_accounts[]
  products                    products[]
  warehouses_as_user          warehouses[]          @relation("warehouses_user")
  warehouses_as_responsible   warehouses[]          @relation("warehouses_responsible_person")
  doc_settlements             doc_settlement[]
  conversation_sessions       conversation_sessions[]
  assistant_preferences       assistant_preferences?

  @@index([email])
  @@index([role])
  @@index([current_company_id])
}

model companies {
  id                 Int      @id @default(autoincrement())
  code               String   @unique
  name               String   @db.VarChar(100)
  abbreviation       String?  @db.VarChar(50)
  
  // Налогообложение и валюта (как в b1.lt)
  tax_country        String   @db.VarChar(3) @default("UAE")  // UAE, DEU, etc
  base_currency      Currency @default(AED)
  
  // Тип юридического лица
  legal_entity_type  String   @db.VarChar(50)  // LLC, GMBH, Inc, etc
  
  // Владелец и директор
  owner_id           Int
  director_name      String
  
  // Статусы
  is_active          Boolean  @default(true)
  setup_completed    Boolean  @default(false)
  is_email_confirmed Boolean  @default(false)
  
  // Адреса и реквизиты
  legal_address      String?  @db.Text
  actual_address     String?  @db.Text
  vat_number         String?  @db.VarChar(50)
  registration_number String? @db.VarChar(50)
  
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Связи
  owner              users             @relation("company_owner", fields: [owner_id], references: [id], onDelete: Cascade)
  employees          company_users[]
  clients            clients[]
  products           products[]
  sales              sales[]
  purchases          purchases[]
  warehouses         warehouses[]
  bank_operations    bank_operations[]
  chart_of_accounts  chart_of_accounts[]

  @@index([owner_id])
  @@index([name])
  @@index([tax_country])
  @@index([is_active])
}

// Связь между пользователями и компаниями (многие ко многим)
model company_users {
  id         Int      @id @default(autoincrement())
  company_id Int
  user_id    Int
  role       String   @default("employee") // owner, admin, employee
  is_active  Boolean  @default(true)
  joined_at  DateTime @default(now())

  company    companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([company_id, user_id])
  @@index([company_id])
  @@index([user_id])
}

model clients {
  id         Int        @id @default(autoincrement())
  company_id Int        // ← КЛЮЧЕВОЕ ПОЛЕ для фильтрации!
  
  // Основная информация
  name       String     @db.VarChar(100)
  abbreviation String?  @db.VarChar(50)
  email      String     @db.VarChar(100)
  phone      String?    @db.VarChar(20)
  fax        String?    @db.VarChar(20)
  website    String?    @db.VarChar(200)
  
  // Типы и роли
  role       ClientRole @default(CLIENT)
  is_active  Boolean?   @default(true)
  is_juridical Boolean? @default(true)
  
  // Коды и номера
  code       String?    @db.VarChar(50)
  vat_code   String?    @db.VarChar(50)
  vat_rate   Decimal?   @db.Decimal(5,2)
  business_license_code String? @db.VarChar(50)
  eori_code  String?    @db.VarChar(50)
  foreign_taxpayer_code String? @db.VarChar(50)
  
  // География
  foreigner_country String? @db.VarChar(50)
  legal_address     String? @db.Text
  actual_address    String? @db.Text
  
  // Финансы
  credit_sum        Decimal? @db.Decimal(15,2) @default(0)
  pay_per           String?  @db.VarChar(50)
  currency          Currency @default(EUR)
  auto_debt_reminder Boolean? @default(false)
  
  // Банковские данные
  bank_account      String?  @db.VarChar(50)
  bank_name         String?  @db.VarChar(100)
  
  // Даты
  registration_date DateTime?
  date_of_birth     DateTime?
  
  // Дополнительная информация
  contact_information String? @db.Text
  notes              String?  @db.Text
  
  // Системные поля
  user_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  // Связи
  company             companies           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users               users               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  purchases           purchases[]
  sales               sales[]
  warehouses          warehouses[]
  doc_settlements     doc_settlement[]
  bank_operations     bank_operations[]
  conversation_sessions conversation_sessions[]

  @@index([company_id])  // ← ГЛАВНЫЙ ИНДЕКС!
  @@index([created_at])
  @@index([role])
  @@index([is_active])
  @@index([abbreviation])
  @@index([business_license_code])
}

model products {
  id          Int       @id @default(autoincrement())
  company_id  Int       // ← Фильтрация по компании
  code        String    @db.VarChar(50)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  unit        String    @db.VarChar(20)
  price       Decimal   @db.Decimal(10, 2)
  currency    Currency  @default(EUR)
  is_active   Boolean   @default(true)
  user_id     Int
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  company         companies        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [user_id], references: [id])
  purchase_items  purchase_items[]
  sale_items      sale_items[]

  @@index([company_id])
  @@index([code])
  @@index([is_active])
}

model sales {
  id             Int       @id @default(autoincrement())
  company_id     Int       // ← Фильтрация по компании
  doc_number     String    @db.VarChar(50)
  doc_date       DateTime  @db.Date
  sale_date      DateTime? @db.Date
  user_id        Int
  client_id      Int
  warehouse_id   Int
  total_amount   Decimal   @db.Decimal(10, 2)
  currency       Currency  @default(EUR)
  status         String    @default("draft") @db.VarChar(20)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  invoice_type   String?   @db.VarChar(50)
  invoice_number String    @db.VarChar(50)
  vat_rate       Decimal?  @db.Decimal(5, 2)

  company   companies    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users     users        @relation(fields: [user_id], references: [id])
  client    clients      @relation(fields: [client_id], references: [id])
  warehouse warehouses   @relation(fields: [warehouse_id], references: [id])
  items     sale_items[]

  @@index([company_id])
  @@index([doc_date])
  @@index([client_id])
  @@index([warehouse_id])
  @@index([status])
}

model purchases {
  id             Int       @id @default(autoincrement())
  company_id     Int       // ← Фильтрация по компании
  doc_number     String    @db.VarChar(50)
  doc_date       DateTime  @db.Date
  purchase_date  DateTime? @db.Date
  user_id        Int
  client_id      Int
  warehouse_id   Int
  total_amount   Decimal   @db.Decimal(10, 2)
  currency       Currency  @default(EUR)
  status         String    @default("draft") @db.VarChar(20)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  invoice_type   String?   @db.VarChar(50)
  invoice_number String    @db.VarChar(50)
  vat_rate       Decimal?  @db.Decimal(5, 2)

  company   companies        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users     users            @relation(fields: [user_id], references: [id])
  client    clients          @relation(fields: [client_id], references: [id])
  warehouse warehouses       @relation(fields: [warehouse_id], references: [id])
  items     purchase_items[]

  @@index([company_id])
  @@index([doc_date])
  @@index([client_id])
  @@index([warehouse_id])
  @@index([status])
}

model purchase_items {
  id          Int       @id @default(autoincrement())
  purchase_id Int
  product_id  Int
  quantity    Decimal   @db.Decimal(10, 2)
  unit_price  Decimal   @db.Decimal(10, 2)
  amount      Decimal   @db.Decimal(10, 2)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  purchase purchases @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  product  products  @relation(fields: [product_id], references: [id])

  @@index([purchase_id])
  @@index([product_id])
}

model sale_items {
  id         Int       @id @default(autoincrement())
  sale_id    Int
  product_id Int
  quantity   Decimal   @db.Decimal(10, 2)
  unit_price Decimal   @db.Decimal(10, 2)
  amount     Decimal   @db.Decimal(10, 2)
  vat        Decimal?  @db.Decimal(5, 2)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  sale    sales    @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product products @relation(fields: [product_id], references: [id])

  @@index([sale_id])
  @@index([product_id])
}

model warehouses {
  id                    Int             @id @default(autoincrement())
  company_id            Int             // ← Фильтрация по компании
  name                  String          @db.VarChar(100)
  code                  String?         @db.VarChar(50)
  address               String?         @db.VarChar(255)
  status                WarehouseStatus @default(ACTIVE)
  client_id             Int?
  user_id               Int
  responsible_person_id Int?
  created_at            DateTime?       @default(now()) @db.Timestamp(6)
  updated_at            DateTime?       @default(now()) @db.Timestamp(6)

  company            companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users              users     @relation("warehouses_user", fields: [user_id], references: [id])
  responsible_person users?    @relation("warehouses_responsible_person", fields: [responsible_person_id], references: [id])
  client             clients?  @relation(fields: [client_id], references: [id])
  sales              sales[]
  purchases          purchases[]

  @@index([company_id])
  @@index([status])
  @@index([client_id])
}

model bank_operations {
  id          Int       @id @default(autoincrement())
  company_id  Int       // ← Фильтрация по компании
  date        DateTime  @db.Date
  description String    @db.VarChar(255)
  amount      Decimal   @db.Decimal(10, 2)
  type        String    @db.VarChar(20) // debit/credit  
  account_id  Int
  user_id     Int
  client_id   Int?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users   users     @relation(fields: [user_id], references: [id])
  client  clients?  @relation(fields: [client_id], references: [id])

  @@index([company_id])
  @@index([date])
  @@index([type])
}

model chart_of_accounts {
  id           Int       @id @default(autoincrement())
  company_id   Int       // ← Фильтрация по компании
  code         String    @db.VarChar(20)
  name         String    @db.VarChar(255)
  type         String    @db.VarChar(50)
  account_type String    @db.VarChar(50) // asset, liability, equity, revenue, expense
  parent_code  String?   @db.VarChar(20)
  is_active    Boolean   @default(true)
  user_id      Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)

  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  users   users     @relation(fields: [user_id], references: [id])

  @@index([company_id])
  @@index([code])
  @@index([type])
  @@index([is_active])
}

model doc_settlement {
  id           Int       @id @default(autoincrement())
  doc_number   String    @db.VarChar(50)
  doc_date     DateTime  @db.Date
  client_id    Int
  status       String    @default("draft") @db.VarChar(20)
  amount       Decimal   @db.Decimal(10, 2)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  period_start DateTime  @db.Date
  period_end   DateTime  @db.Date
  user_id      Int

  client clients @relation(fields: [client_id], references: [id])
  users  users   @relation(fields: [user_id], references: [id])

  @@index([doc_date])
  @@index([client_id])
  @@index([status])
}

// ===============================================
// ASSISTANT MODELS
// ===============================================

model conversation_sessions {
  id                 Int                @id @default(autoincrement())
  name               String?            @db.VarChar(100)
  status             ConversationStatus @default(ACTIVE)
  start_time         DateTime           @default(now())
  end_time           DateTime?
  primary_language   Language
  secondary_language Language
  user_id            Int
  client_id          Int?
  created_at         DateTime           @default(now()) @db.Timestamp(6)
  updated_at         DateTime           @updatedAt @db.Timestamp(6)

  user     users                   @relation(fields: [user_id], references: [id])
  client   clients?                @relation(fields: [client_id], references: [id])
  messages conversation_messages[]

  @@index([user_id])
  @@index([client_id])
  @@index([status])
}

model conversation_messages {
  id                 Int         @id @default(autoincrement())
  session_id         Int
  sender_type        String      @db.VarChar(20) // user, client, assistant
  message_type       MessageType @default(TEXT)
  original_content   String      @db.Text
  translated_content String?     @db.Text
  source_language    Language
  target_language    Language
  audio_file_path    String?     @db.VarChar(255)
  created_at         DateTime    @default(now()) @db.Timestamp(6)

  session conversation_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@index([session_id])
  @@index([message_type])
}

model assistant_preferences {
  id                  Int      @id @default(autoincrement())
  user_id             Int      @unique
  default_language    Language @default(ENGLISH)
  voice_enabled       Boolean  @default(true)
  translation_enabled Boolean  @default(true)
  assistant_theme     String?  @db.VarChar(50)
  auto_transcribe     Boolean  @default(true)
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @updatedAt @db.Timestamp(6)

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model translation_cache {
  id              Int      @id @default(autoincrement())
  original_text   String   @db.Text
  translated_text String   @db.Text
  source_language Language
  target_language Language
  usage_count     Int      @default(1)
  last_used       DateTime @default(now())
  created_at      DateTime @default(now()) @db.Timestamp(6)

  @@unique([original_text, source_language, target_language])
  @@index([source_language, target_language])
}