#!/bin/bash
# üéØ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–ì–û –¢–û–í–ê–†–û–û–ë–û–†–û–¢–ê
# –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: Purchase ‚Üí Warehouse ‚Üí Sales ‚Üí Chart of Accounts

echo "üéäüî•üéØ –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–õ–ù–û–ì–û –¢–û–í–ê–†–û–û–ë–û–†–û–¢–ê! üéØüî•üéä"
echo ""
echo "üìã BUSINESS FLOW:"
echo "   1Ô∏è‚É£ –ü–û–ö–£–ü–ö–ê 10—Ç ‚Üí –ü—Ä–∏—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è + –°–∫–ª–∞–¥ +10—Ç"
echo "   2Ô∏è‚É£ –ü–†–û–î–ê–ñ–ê 5—Ç ‚Üí –†–∞—Å—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è + –°–∫–ª–∞–¥ -5—Ç = 5—Ç –æ—Å—Ç–∞—Ç–æ–∫"
echo "   3Ô∏è‚É£ –ü–†–û–í–û–î–ö–ò ‚Üí –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ (–î—Ç/–ö—Ç)"
echo ""

# 1. –°–æ–∑–¥–∞—ë–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å store
echo "1Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô INVENTORY STORE:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

mkdir -p f/src/store
cat > f/src/store/inventoryStore.ts << 'EOF'
// üéØ –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô INVENTORY STORE
// –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏

interface InventoryItem {
  id: string;
  productCode: string;
  productName: string;
  quantity: number;
  unit: string;
  costPrice: number; // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞)
  totalValue: number; // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ
  lastUpdated: string;
  batches: InventoryBatch[]; // FIFO –ø–∞—Ä—Ç–∏–∏
}

interface InventoryBatch {
  batchId: string;
  purchaseDate: string;
  quantity: number;
  costPrice: number;
  supplierId?: string;
  supplierName?: string;
  remainingQuantity: number; // –î–ª—è FIFO
}

interface InventoryMovement {
  id: string;
  type: 'IN' | 'OUT'; // –ü—Ä–∏—Ö–æ–¥/–†–∞—Å—Ö–æ–¥
  productCode: string;
  quantity: number;
  costPrice: number;
  totalAmount: number;
  date: string;
  documentType: 'PURCHASE' | 'SALE' | 'ADJUSTMENT';
  documentNumber: string;
  description: string;
  batchId?: string;
}

class InventoryStore {
  private inventory: Map<string, InventoryItem> = new Map();
  private movements: InventoryMovement[] = [];

  // üõí –ü–†–ò–•–û–î –¢–û–í–ê–†–ê (–∏–∑ Purchases)
  addPurchase(purchase: {
    productCode: string;
    productName: string;
    quantity: number;
    unit: string;
    costPrice: number;
    supplierId: string;
    supplierName: string;
    documentNumber: string;
  }) {
    const batchId = `BATCH-${Date.now()}`;
    const totalAmount = purchase.quantity * purchase.costPrice;

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é
    const newBatch: InventoryBatch = {
      batchId,
      purchaseDate: new Date().toISOString(),
      quantity: purchase.quantity,
      costPrice: purchase.costPrice,
      supplierId: purchase.supplierId,
      supplierName: purchase.supplierName,
      remainingQuantity: purchase.quantity
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    const existing = this.inventory.get(purchase.productCode);
    if (existing) {
      existing.quantity += purchase.quantity;
      existing.totalValue += totalAmount;
      existing.costPrice = this.calculateWeightedAveragePrice(existing);
      existing.batches.push(newBatch);
      existing.lastUpdated = new Date().toISOString();
    } else {
      const newItem: InventoryItem = {
        id: `INV-${purchase.productCode}`,
        productCode: purchase.productCode,
        productName: purchase.productName,
        quantity: purchase.quantity,
        unit: purchase.unit,
        costPrice: purchase.costPrice,
        totalValue: totalAmount,
        lastUpdated: new Date().toISOString(),
        batches: [newBatch]
      };
      this.inventory.set(purchase.productCode, newItem);
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    this.addMovement({
      id: `MOV-${Date.now()}`,
      type: 'IN',
      productCode: purchase.productCode,
      quantity: purchase.quantity,
      costPrice: purchase.costPrice,
      totalAmount,
      date: new Date().toISOString(),
      documentType: 'PURCHASE',
      documentNumber: purchase.documentNumber,
      description: `–ü—Ä–∏—Ö–æ–¥ –æ—Ç ${purchase.supplierName}`,
      batchId
    });

    console.log(`‚úÖ –ü—Ä–∏—Ö–æ–¥: ${purchase.productName} +${purchase.quantity} ${purchase.unit}`);
    return true;
  }

  // üí∞ –†–ê–°–•–û–î –¢–û–í–ê–†–ê (–∏–∑ Sales) —Å FIFO
  addSale(sale: {
    productCode: string;
    quantity: number;
    salePrice: number;
    customerId: string;
    customerName: string;
    documentNumber: string;
  }) {
    const item = this.inventory.get(sale.productCode);
    if (!item) {
      throw new Error(`–¢–æ–≤–∞—Ä ${sale.productCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ`);
    }

    if (item.quantity < sale.quantity) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${item.quantity}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${sale.quantity}`);
    }

    // FIFO —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –ø–∞—Ä—Ç–∏—è–º
    let remainingToSell = sale.quantity;
    let totalCostPrice = 0;
    const usedBatches: string[] = [];

    for (const batch of item.batches) {
      if (remainingToSell <= 0) break;
      
      if (batch.remainingQuantity > 0) {
        const quantityFromBatch = Math.min(batch.remainingQuantity, remainingToSell);
        totalCostPrice += quantityFromBatch * batch.costPrice;
        batch.remainingQuantity -= quantityFromBatch;
        remainingToSell -= quantityFromBatch;
        usedBatches.push(batch.batchId);
        
        if (batch.remainingQuantity === 0) {
          console.log(`üì¶ –ü–∞—Ä—Ç–∏—è ${batch.batchId} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
    item.quantity -= sale.quantity;
    item.totalValue -= totalCostPrice;
    item.lastUpdated = new Date().toISOString();

    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä—Ç–∏–∏
    item.batches = item.batches.filter(b => b.remainingQuantity > 0);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    this.addMovement({
      id: `MOV-${Date.now()}`,
      type: 'OUT',
      productCode: sale.productCode,
      quantity: sale.quantity,
      costPrice: totalCostPrice / sale.quantity, // –°—Ä–µ–¥–Ω—è—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ FIFO
      totalAmount: totalCostPrice,
      date: new Date().toISOString(),
      documentType: 'SALE',
      documentNumber: sale.documentNumber,
      description: `–ü—Ä–æ–¥–∞–∂–∞ ${sale.customerName}`,
    });

    console.log(`‚úÖ –†–∞—Å—Ö–æ–¥: ${item.productName} -${sale.quantity} ${item.unit}, –æ—Å—Ç–∞—Ç–æ–∫: ${item.quantity}`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—á—ë—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
    return {
      costPrice: totalCostPrice,
      saleAmount: sale.quantity * sale.salePrice,
      profit: (sale.quantity * sale.salePrice) - totalCostPrice,
      usedBatches
    };
  }

  // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –û–°–¢–ê–¢–ö–û–í
  getInventory(): InventoryItem[] {
    return Array.from(this.inventory.values());
  }

  getInventoryByProduct(productCode: string): InventoryItem | undefined {
    return this.inventory.get(productCode);
  }

  // üìà –î–í–ò–ñ–ï–ù–ò–Ø –ü–û –°–ö–õ–ê–î–£
  getMovements(): InventoryMovement[] {
    return [...this.movements].sort((a, b) => 
      new Date(b.date).getTime() - new Date(a.date).getTime()
    );
  }

  // üßÆ –†–ê–°–ß–Å–¢ –°–†–ï–î–ù–ï–í–ó–í–ï–®–ï–ù–ù–û–ô –¶–ï–ù–´
  private calculateWeightedAveragePrice(item: InventoryItem): number {
    if (item.quantity === 0) return 0;
    return item.totalValue / item.quantity;
  }

  // üìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–í–ò–ñ–ï–ù–ò–Ø
  private addMovement(movement: InventoryMovement) {
    this.movements.push(movement);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞
    localStorage.setItem('inventory_movements', JSON.stringify(this.movements));
  }

  // üíæ –ó–ê–ì–†–£–ó–ö–ê –ò–ó LOCALSTORAGE
  loadFromStorage() {
    const stored = localStorage.getItem('inventory_movements');
    if (stored) {
      this.movements = JSON.parse(stored);
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º inventory –∏–∑ movements
      this.rebuildInventoryFromMovements();
    }
  }

  private rebuildInventoryFromMovements() {
    this.inventory.clear();
    
    for (const movement of this.movements) {
      if (movement.type === 'IN') {
        // –í–æ—Å—Å–æ–∑–¥–∞—ë–º –ø—Ä–∏—Ö–æ–¥
        // TODO: Implement full rebuild logic
      }
    }
  }
}

// Singleton instance
export const inventoryStore = new InventoryStore();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
inventoryStore.loadFromStorage();

export type { InventoryItem, InventoryMovement, InventoryBatch };
EOF

echo "‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π InventoryStore —Å–æ–∑–¥–∞–Ω"

# 2. –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Purchases
echo ""
echo "2Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ –î–õ–Ø PURCHASES:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

mkdir -p f/src/components/integration
cat > f/src/components/integration/PurchaseWarehouseIntegration.tsx << 'EOF'
import React, { useState } from 'react';
import { inventoryStore } from '../../store/inventoryStore';

interface PurchaseFormData {
  productCode: string;
  productName: string;
  quantity: number;
  unit: string;
  costPrice: number;
  supplierId: string;
  supplierName: string;
}

const PurchaseWarehouseIntegration: React.FC = () => {
  const [formData, setFormData] = useState<PurchaseFormData>({
    productCode: 'RESIDUES_TECH_OIL',
    productName: 'Residues Technical Oil',
    quantity: 10,
    unit: 'T',
    costPrice: 800,
    supplierId: 'SUP001',
    supplierName: 'OIL SUPPLY LTD'
  });

  const [isProcessing, setIsProcessing] = useState(false);
  const [result, setResult] = useState<string>('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsProcessing(true);

    try {
      // –°–æ–∑–¥–∞—ë–º –ø—Ä–∏—Ö–æ–¥–Ω—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é
      const documentNumber = `PUR-${Date.now()}`;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ InventoryStore
      inventoryStore.addPurchase({
        ...formData,
        documentNumber
      });

      setResult(`‚úÖ –£–°–ü–ï–®–ù–û! –¢–æ–≤–∞—Ä –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω:
üìã –î–æ–∫—É–º–µ–Ω—Ç: ${documentNumber}
üì¶ –¢–æ–≤–∞—Ä: ${formData.productName}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: +${formData.quantity} ${formData.unit}
üí∞ –°—É–º–º–∞: ‚Ç¨${(formData.quantity * formData.costPrice).toLocaleString()}

üè≠ –°–∫–ª–∞–¥ –æ–±–Ω–æ–≤–ª—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`);

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setFormData(prev => ({ ...prev, quantity: 0, costPrice: 0 }));

    } catch (error) {
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex items-center mb-4">
        <span className="text-2xl mr-3">üõí</span>
        <h2 className="text-xl font-semibold text-gray-800">
          –ó–∞–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–µ–º
        </h2>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ö–æ–¥ —Ç–æ–≤–∞—Ä–∞
            </label>
            <input
              type="text"
              value={formData.productCode}
              onChange={(e) => setFormData(prev => ({ ...prev, productCode: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            </label>
            <input
              type="text"
              value={formData.productName}
              onChange={(e) => setFormData(prev => ({ ...prev, productName: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            </label>
            <input
              type="number"
              value={formData.quantity}
              onChange={(e) => setFormData(prev => ({ ...prev, quantity: Number(e.target.value) }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              min="0"
              step="0.01"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            </label>
            <select
              value={formData.unit}
              onChange={(e) => setFormData(prev => ({ ...prev, unit: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="T">–¢–æ–Ω–Ω—ã</option>
              <option value="KG">–ö–∏–ª–æ–≥—Ä–∞–º–º—ã</option>
              <option value="L">–õ–∏—Ç—Ä—ã</option>
              <option value="PCS">–®—Ç—É–∫–∏</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚Ç¨)
            </label>
            <input
              type="number"
              value={formData.costPrice}
              onChange={(e) => setFormData(prev => ({ ...prev, costPrice: Number(e.target.value) }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              min="0"
              step="0.01"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ü–æ—Å—Ç–∞–≤—â–∏–∫
            </label>
            <input
              type="text"
              value={formData.supplierName}
              onChange={(e) => setFormData(prev => ({ ...prev, supplierName: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
        </div>

        <div className="bg-gray-50 p-4 rounded-lg">
          <div className="text-sm text-gray-600">
            <strong>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</strong> ‚Ç¨{(formData.quantity * formData.costPrice).toLocaleString()}
          </div>
        </div>

        <button
          type="submit"
          disabled={isProcessing}
          className="w-full bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center justify-center space-x-2"
        >
          {isProcessing ? (
            <>
              <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
              <span>–û–±—Ä–∞–±–æ—Ç–∫–∞...</span>
            </>
          ) : (
            <>
              <span>üì¶</span>
              <span>–û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥</span>
            </>
          )}
        </button>
      </form>

      {result && (
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <pre className="text-sm text-blue-800 whitespace-pre-wrap">{result}</pre>
        </div>
      )}

      <div className="mt-6 text-xs text-gray-500">
        üí° –ü–æ—Å–ª–µ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ —Å FIFO –ø–∞—Ä—Ç–∏—è–º–∏
      </div>
    </div>
  );
};

export default PurchaseWarehouseIntegration;
EOF

echo "‚úÖ PurchaseWarehouseIntegration —Å–æ–∑–¥–∞–Ω"

# 3. –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Sales
echo ""
echo "3Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ –î–õ–Ø SALES:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cat > f/src/components/integration/SalesWarehouseIntegration.tsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { inventoryStore, InventoryItem } from '../../store/inventoryStore';

interface SaleFormData {
  productCode: string;
  quantity: number;
  salePrice: number;
  customerId: string;
  customerName: string;
}

const SalesWarehouseIntegration: React.FC = () => {
  const [availableProducts, setAvailableProducts] = useState<InventoryItem[]>([]);
  const [formData, setFormData] = useState<SaleFormData>({
    productCode: '',
    quantity: 5,
    salePrice: 900,
    customerId: 'CUS001',
    customerName: 'ENERGY SOLUTIONS LTD'
  });

  const [isProcessing, setIsProcessing] = useState(false);
  const [result, setResult] = useState<string>('');

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞
    setAvailableProducts(inventoryStore.getInventory());
  }, []);

  const selectedProduct = availableProducts.find(p => p.productCode === formData.productCode);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsProcessing(true);

    try {
      // –°–æ–∑–¥–∞—ë–º —Ä–∞—Å—Ö–æ–¥–Ω—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é
      const documentNumber = `SAL-${Date.now()}`;
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ InventoryStore (FIFO)
      const saleResult = inventoryStore.addSale({
        ...formData,
        documentNumber
      });

      setResult(`‚úÖ –£–°–ü–ï–®–ù–û! –¢–æ–≤–∞—Ä —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω:
üìã –î–æ–∫—É–º–µ–Ω—Ç: ${documentNumber}
üì¶ –¢–æ–≤–∞—Ä: ${selectedProduct?.productName}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: -${formData.quantity} ${selectedProduct?.unit}
üí∞ –í—ã—Ä—É—á–∫–∞: ‚Ç¨${(formData.quantity * formData.salePrice).toLocaleString()}
üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨${saleResult.costPrice.toLocaleString()}
üíé –ü—Ä–∏–±—ã–ª—å: ‚Ç¨${saleResult.profit.toLocaleString()}

üè≠ –°–∫–ª–∞–¥ –æ–±–Ω–æ–≤–ª—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! (FIFO —Å–ø–∏—Å–∞–Ω–∏–µ)
üîç –û—Å—Ç–∞—Ç–æ–∫: ${inventoryStore.getInventoryByProduct(formData.productCode)?.quantity || 0} ${selectedProduct?.unit}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      setAvailableProducts(inventoryStore.getInventory());

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setFormData(prev => ({ ...prev, quantity: 0, salePrice: 0 }));

    } catch (error) {
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex items-center mb-4">
        <span className="text-2xl mr-3">üí∞</span>
        <h2 className="text-xl font-semibold text-gray-800">
          –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ–º
        </h2>
      </div>

      {availableProducts.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          <span className="text-4xl block mb-2">üì¶</span>
          <p>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ</p>
          <p className="text-sm">–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–∏—Ö–æ–¥—É–π—Ç–µ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –ó–∞–∫—É–ø–∫–∏</p>
        </div>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–æ–≤–∞—Ä
              </label>
              <select
                value={formData.productCode}
                onChange={(e) => setFormData(prev => ({ ...prev, productCode: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</option>
                {availableProducts.map(product => (
                  <option key={product.productCode} value={product.productCode}>
                    {product.productName} (–æ—Å—Ç–∞—Ç–æ–∫: {product.quantity} {product.unit})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
              </label>
              <input
                type="number"
                value={formData.quantity}
                onChange={(e) => setFormData(prev => ({ ...prev, quantity: Number(e.target.value) }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                min="0"
                max={selectedProduct?.quantity || 0}
                step="0.01"
                required
              />
              {selectedProduct && (
                <div className="text-xs text-gray-500 mt-1">
                  –î–æ—Å—Ç—É–ø–Ω–æ: {selectedProduct.quantity} {selectedProduct.unit}
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (‚Ç¨)
              </label>
              <input
                type="number"
                value={formData.salePrice}
                onChange={(e) => setFormData(prev => ({ ...prev, salePrice: Number(e.target.value) }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                min="0"
                step="0.01"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ–∫—É–ø–∞—Ç–µ–ª—å
              </label>
              <input
                type="text"
                value={formData.customerName}
                onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
          </div>

          {selectedProduct && (
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="grid grid-cols-3 gap-4 text-sm">
                <div>
                  <strong>–í—ã—Ä—É—á–∫–∞:</strong> ‚Ç¨{(formData.quantity * formData.salePrice).toLocaleString()}
                </div>
                <div>
                  <strong>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ‚Ç¨{(formData.quantity * selectedProduct.costPrice).toLocaleString()}
                </div>
                <div className="text-green-600">
                  <strong>–ü—Ä–∏–±—ã–ª—å:</strong> ‚Ç¨{((formData.quantity * formData.salePrice) - (formData.quantity * selectedProduct.costPrice)).toLocaleString()}
                </div>
              </div>
            </div>
          )}

          <button
            type="submit"
            disabled={isProcessing || !selectedProduct}
            className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center space-x-2"
          >
            {isProcessing ? (
              <>
                <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                <span>–û–±—Ä–∞–±–æ—Ç–∫–∞...</span>
              </>
            ) : (
              <>
                <span>üí∞</span>
                <span>–°–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞</span>
              </>
            )}
          </button>
        </form>
      )}

      {result && (
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <pre className="text-sm text-blue-800 whitespace-pre-wrap">{result}</pre>
        </div>
      )}

      <div className="mt-6 text-xs text-gray-500">
        üí° –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –º–µ—Ç–æ–¥—É FIFO (–ø–µ—Ä–≤—ã–π –ø—Ä–∏—à—ë–ª - –ø–µ—Ä–≤—ã–π —É—à—ë–ª)
      </div>
    </div>
  );
};

export default SalesWarehouseIntegration;
EOF

echo "‚úÖ SalesWarehouseIntegration —Å–æ–∑–¥–∞–Ω"

# 4. –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–ª–∞–¥–∞
echo ""
echo "4Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–†–û–°–ú–û–¢–†–ê –°–ö–õ–ê–î–ê:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cat > f/src/components/integration/WarehouseInventoryView.tsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { inventoryStore, InventoryItem, InventoryMovement } from '../../store/inventoryStore';

const WarehouseInventoryView: React.FC = () => {
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [movements, setMovements] = useState<InventoryMovement[]>([]);
  const [activeTab, setActiveTab] = useState<'inventory' | 'movements'>('inventory');

  const refreshData = () => {
    setInventory(inventoryStore.getInventory());
    setMovements(inventoryStore.getMovements());
  };

  useEffect(() => {
    refreshData();
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(refreshData, 2000);
    return () => clearInterval(interval);
  }, []);

  const totalInventoryValue = inventory.reduce((sum, item) => sum + item.totalValue, 0);

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <span className="text-2xl mr-3">üè≠</span>
          <h2 className="text-xl font-semibold text-gray-800">
            –°–∫–ª–∞–¥ - –û—Å—Ç–∞—Ç–∫–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è
          </h2>
        </div>
        <button
          onClick={refreshData}
          className="bg-gray-100 text-gray-600 px-4 py-2 rounded-lg hover:bg-gray-200 flex items-center space-x-2"
        >
          <span>üîÑ</span>
          <span>–û–±–Ω–æ–≤–∏—Ç—å</span>
        </button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-3 gap-4 mb-6">
        <div className="bg-blue-50 p-4 rounded-lg">
          <div className="text-2xl font-bold text-blue-600">{inventory.length}</div>
          <div className="text-sm text-blue-800">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π</div>
        </div>
        <div className="bg-green-50 p-4 rounded-lg">
          <div className="text-2xl font-bold text-green-600">
            ‚Ç¨{totalInventoryValue.toLocaleString()}
          </div>
          <div className="text-sm text-green-800">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</div>
        </div>
        <div className="bg-purple-50 p-4 rounded-lg">
          <div className="text-2xl font-bold text-purple-600">{movements.length}</div>
          <div className="text-sm text-purple-800">–î–≤–∏–∂–µ–Ω–∏–π</div>
        </div>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∞–±–æ–≤ */}
      <div className="flex mb-4 border-b">
        <button
          onClick={() => setActiveTab('inventory')}
          className={`px-4 py-2 font-medium ${
            activeTab === 'inventory'
              ? 'text-blue-600 border-b-2 border-blue-600'
              : 'text-gray-500 hover:text-gray-700'
          }`}
        >
          üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
        </button>
        <button
          onClick={() => setActiveTab('movements')}
          className={`px-4 py-2 font-medium ml-4 ${
            activeTab === 'movements'
              ? 'text-blue-600 border-b-2 border-blue-600'
              : 'text-gray-500 hover:text-gray-700'
          }`}
        >
          üìã –î–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        </button>
      </div>

      {activeTab === 'inventory' ? (
        <div>
          {inventory.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <span className="text-4xl block mb-2">üì¶</span>
              <p>–°–∫–ª–∞–¥ –ø—É—Å—Ç</p>
              <p className="text-sm">–û–ø—Ä–∏—Ö–æ–¥—É–π—Ç–µ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –ó–∞–∫—É–ø–∫–∏</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –¢–æ–≤–∞—Ä
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –û—Å—Ç–∞—Ç–æ–∫
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ü–∞—Ä—Ç–∏–∏ FIFO
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {inventory.map((item) => (
                    <tr key={item.productCode} className="hover:bg-gray-50">
                      <td className="px-4 py-4">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {item.productName}
                          </div>
                          <div className="text-xs text-gray-500">{item.productCode}</div>
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="text-sm text-gray-900">
                          {item.quantity} {item.unit}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="text-sm text-gray-900">
                          ‚Ç¨{item.costPrice.toFixed(2)}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="text-sm font-medium text-gray-900">
                          ‚Ç¨{item.totalValue.toLocaleString()}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="text-xs">
                          {item.batches.map((batch, idx) => (
                            <div key={batch.batchId} className="mb-1">
                              <span className="bg-gray-100 px-2 py-1 rounded text-xs">
                                {batch.remainingQuantity} {item.unit} @ ‚Ç¨{batch.costPrice}
                              </span>
                            </div>
                          ))}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      ) : (
        <div>
          {movements.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <span className="text-4xl block mb-2">üìã</span>
              <p>–ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –î–∞—Ç–∞
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –¢–∏–ø
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –¢–æ–≤–∞—Ä
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –°—É–º–º–∞
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –î–æ–∫—É–º–µ–Ω—Ç
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {movements.map((movement) => (
                    <tr key={movement.id} className="hover:bg-gray-50">
                      <td className="px-4 py-4">
                        <div className="text-sm text-gray-900">
                          {new Date(movement.date).toLocaleString()}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <span
                          className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            movement.type === 'IN'
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}
                        >
                          {movement.type === 'IN' ? 'üìà –ü—Ä–∏—Ö–æ–¥' : 'üìâ –†–∞—Å—Ö–æ–¥'}
                        </span>
                      </td>
                      <td className="px-4 py-4">
                        <div className="text-sm text-gray-900">{movement.productCode}</div>
                      </td>
                      <td className="px-4 py-4">
                        <div
                          className={`text-sm font-medium ${
                            movement.type === 'IN' ? 'text-green-600' : 'text-red-600'
                          }`}
                        >
                          {movement.type === 'IN' ? '+' : '-'}
                          {movement.quantity}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div className="text-sm text-gray-900">
                          ‚Ç¨{movement.totalAmount.toLocaleString()}
                        </div>
                      </td>
                      <td className="px-4 py-4">
                        <div>
                          <div className="text-sm text-gray-900">{movement.documentNumber}</div>
                          <div className="text-xs text-gray-500">{movement.description}</div>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}

      <div className="mt-6 text-xs text-gray-500 text-center">
        üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
      </div>
    </div>
  );
};

export default WarehouseInventoryView;
EOF

echo "‚úÖ WarehouseInventoryView —Å–æ–∑–¥–∞–Ω"

# 5. –°–æ–∑–¥–∞—ë–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
echo ""
echo "5Ô∏è‚É£ –°–û–ó–î–ê–Å–ú –ì–õ–ê–í–ù–£–Æ –°–¢–†–ê–ù–ò–¶–£ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

mkdir -p f/src/pages/company/integration
cat > f/src/pages/company/integration/InventoryFlowPage.tsx << 'EOF'
import React, { useState } from 'react';
import PurchaseWarehouseIntegration from '../../../components/integration/PurchaseWarehouseIntegration';
import SalesWarehouseIntegration from '../../../components/integration/SalesWarehouseIntegration';
import WarehouseInventoryView from '../../../components/integration/WarehouseInventoryView';

const InventoryFlowPage: React.FC = () => {
  const [activeStep, setActiveStep] = useState<'purchase' | 'warehouse' | 'sales'>('purchase');

  const steps = [
    { id: 'purchase', label: '–ü–æ–∫—É–ø–∫–∞', icon: 'üõí', description: '–û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä' },
    { id: 'warehouse', label: '–°–∫–ª–∞–¥', icon: 'üè≠', description: '–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' },
    { id: 'sales', label: '–ü—Ä–æ–¥–∞–∂–∞', icon: 'üí∞', description: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä' }
  ] as const;

  return (
    <div className="p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          üéØ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–∞
        </h1>
        <p className="text-gray-600">
          –ü–æ–∫—É–ø–∫–∞ ‚Üí –°–∫–ª–∞–¥ ‚Üí –ü—Ä–æ–¥–∞–∂–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É—á—ë—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É FIFO
        </p>
      </div>

      {/* –°—Ç–µ–ø–ø–µ—Ä */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-6">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-center flex-1">
              <button
                onClick={() => setActiveStep(step.id)}
                className={`flex items-center justify-center w-12 h-12 rounded-full border-2 transition-colors ${
                  activeStep === step.id
                    ? 'bg-blue-600 text-white border-blue-600'
                    : 'bg-white text-gray-400 border-gray-300 hover:border-gray-400'
                }`}
              >
                <span className="text-xl">{step.icon}</span>
              </button>
              
              {index < steps.length - 1 && (
                <div className="flex-1 h-0.5 bg-gray-300 mx-4"></div>
              )}
            </div>
          ))}
        </div>
        
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-800 mb-1">
            {steps.find(s => s.id === activeStep)?.label}
          </h2>
          <p className="text-gray-600">
            {steps.find(s => s.id === activeStep)?.description}
          </p>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ —à–∞–≥–∞–º */}
      <div className="max-w-6xl mx-auto">
        {activeStep === 'purchase' && (
          <div>
            <PurchaseWarehouseIntegration />
            
            <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h3 className="font-medium text-blue-800 mb-2">
                üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
              </h3>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞</li>
                <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–∏—Ö–æ–¥–Ω—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é</li>
                <li>‚Ä¢ –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥ —Å FIFO –ø–∞—Ä—Ç–∏–µ–π</li>
                <li>‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
              </ul>
            </div>
          </div>
        )}

        {activeStep === 'warehouse' && (
          <div>
            <WarehouseInventoryView />
            
            <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-4">
              <h3 className="font-medium text-green-800 mb-2">
                üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ:
              </h3>
              <ul className="text-sm text-green-700 space-y-1">
                <li>‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
                <li>‚Ä¢ FIFO –ø–∞—Ä—Ç–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è</li>
                <li>‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –≤–µ–¥—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
                <li>‚Ä¢ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ</li>
              </ul>
            </div>
          </div>
        )}

        {activeStep === 'sales' && (
          <div>
            <SalesWarehouseIntegration />
            
            <div className="mt-6 bg-purple-50 border border-purple-200 rounded-lg p-4">
              <h3 className="font-medium text-purple-800 mb-2">
                üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤:
              </h3>
              <ul className="text-sm text-purple-700 space-y-1">
                <li>‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ</li>
                <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂–∏</li>
                <li>‚Ä¢ –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –º–µ—Ç–æ–¥—É FIFO</li>
                <li>‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
              </ul>
            </div>
          </div>
        )}
      </div>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="mt-12 bg-gray-50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4 text-center">
          üéØ –ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg p-4 border">
            <div className="text-center">
              <span className="text-2xl block mb-2">üõí</span>
              <h4 className="font-medium text-gray-800 mb-2">1. –ü–æ–∫—É–ø–∫–∞</h4>
              <p className="text-sm text-gray-600">
                –ö—É–ø–∏–ª–∏ 10 —Ç–æ–Ω–Ω –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ ‚Ç¨800/—Ç
              </p>
              <div className="mt-2 text-lg font-bold text-green-600">
                +10.0 T
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 border">
            <div className="text-center">
              <span className="text-2xl block mb-2">üè≠</span>
              <h4 className="font-medium text-gray-800 mb-2">2. –°–∫–ª–∞–¥</h4>
              <p className="text-sm text-gray-600">
                –ù–∞ —Å–∫–ª–∞–¥–µ: 10 —Ç–æ–Ω–Ω<br/>
                –°—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨8,000
              </p>
              <div className="mt-2 text-lg font-bold text-blue-600">
                10.0 T
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 border">
            <div className="text-center">
              <span className="text-2xl block mb-2">üí∞</span>
              <h4 className="font-medium text-gray-800 mb-2">3. –ü—Ä–æ–¥–∞–∂–∞</h4>
              <p className="text-sm text-gray-600">
                –ü—Ä–æ–¥–∞–ª–∏ 5 —Ç–æ–Ω–Ω –ø–æ ‚Ç¨900/—Ç<br/>
                –ü—Ä–∏–±—ã–ª—å: ‚Ç¨500
              </p>
              <div className="mt-2 text-lg font-bold text-red-600">
                -5.0 T ‚Üí 5.0 T
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InventoryFlowPage;
EOF

echo "‚úÖ InventoryFlowPage —Å–æ–∑–¥–∞–Ω"

# 6. –î–æ–±–∞–≤–ª—è–µ–º –≤ AppRouter
echo ""
echo "6Ô∏è‚É£ –î–û–ë–ê–í–õ–Ø–ï–ú ROUTE –í APPROUTER:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Backup
cp f/src/app/AppRouter.tsx f/src/app/AppRouter.tsx.before_inventory

# –î–æ–±–∞–≤–ª—è–µ–º import
sed -i '' '/import.*Page from/a\
import InventoryFlowPage from '\''../pages/company/integration/InventoryFlowPage'\'';' f/src/app/AppRouter.tsx

# –î–æ–±–∞–≤–ª—è–µ–º route
python3 << 'PYTHON_SCRIPT'
import re

with open('f/src/app/AppRouter.tsx', 'r') as f:
    content = f.read()

# –î–æ–±–∞–≤–ª—è–µ–º route –ø–æ—Å–ª–µ settings
settings_pattern = r'(\s+<Route\s+path="/settings".*?/>\s*)'

inventory_route = '''        
        <Route
          path="/inventory-flow"
          element={
            <AuthGuard>
              <CompanyLayout>
                <InventoryFlowPage />
              </CompanyLayout>
            </AuthGuard>
          }
        />'''

content = re.sub(settings_pattern, r'\1' + inventory_route, content, flags=re.DOTALL)

with open('f/src/app/AppRouter.tsx', 'w') as f:
    f.write(content)

print("‚úÖ Route /inventory-flow –¥–æ–±–∞–≤–ª–µ–Ω")
PYTHON_SCRIPT

# 7. –î–æ–±–∞–≤–ª—è–µ–º –≤ Sidebar
echo ""
echo "7Ô∏è‚É£ –î–û–ë–ê–í–õ–Ø–ï–ú –í SIDEBAR:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

python3 << 'PYTHON_SCRIPT'
import re

with open('f/src/components/company/CompanySidebar.tsx', 'r') as f:
    content = f.read()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π item –ø–æ—Å–ª–µ cloudide
inventory_item = '''    {
      id: 'inventory-flow',
      icon: 'üéØ',
      title: '–¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç',
      route: '/inventory-flow',
      priority: 12,
      isPinned: false,
      badge: 'NEW',
    },'''

cloudide_pattern = r'(\s+{\s+id: \'cloudide\',.*?},)'
content = re.sub(cloudide_pattern, r'\1\n' + inventory_item, content, flags=re.DOTALL)

# –û–±–Ω–æ–≤–ª—è–µ–º priority settings
content = content.replace('priority: 12,', 'priority: 13,')

with open('f/src/components/company/CompanySidebar.tsx', 'w') as f:
    f.write(content)

print("‚úÖ –¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Sidebar")
PYTHON_SCRIPT

echo ""
echo "üéäüî•üéØ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–ì–û –¢–û–í–ê–†–û–û–ë–û–†–û–¢–ê –°–û–ó–î–ê–ù–ê! üéØüî•üéä"
echo ""
echo "‚úÖ –°–û–ó–î–ê–ù–û:"
echo "   üì¶ InventoryStore - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º"
echo "   üõí PurchaseWarehouseIntegration - –ø—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"
echo "   üí∞ SalesWarehouseIntegration - —Ä–∞—Å—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"  
echo "   üè≠ WarehouseInventoryView - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤"
echo "   üéØ InventoryFlowPage - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
echo "   üóÇÔ∏è Route /inventory-flow"
echo "   üì± Sidebar item '–¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç'"
echo ""
echo "üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:"
echo "   1Ô∏è‚É£ cd f && npm run dev"
echo "   2Ô∏è‚É£ –ö–ª–∏–∫–Ω–∏ 'üéØ –¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç' –≤ sidebar"
echo "   3Ô∏è‚É£ –®–∞–≥ 1: –ö—É–ø–∏ 10—Ç –Ω–µ—Ñ—Ç–∏ –ø–æ ‚Ç¨800"
echo "   4Ô∏è‚É£ –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—å —Å–∫–ª–∞–¥ (10—Ç)"
echo "   5Ô∏è‚É£ –®–∞–≥ 3: –ü—Ä–æ–¥–∞–π 5—Ç –ø–æ ‚Ç¨900"
echo "   6Ô∏è‚É£ –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—å –æ—Å—Ç–∞—Ç–æ–∫ (5—Ç)"
echo ""
echo "üí° FEATURES:"
echo "   ‚úÖ FIFO —É—á—ë—Ç –ø–∞—Ä—Ç–∏–π"
echo "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏"
echo "   ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
echo "   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏–π"
echo "   ‚úÖ –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"
echo ""
echo "üèÜ –ü–û–õ–ù–ê–Ø ERP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ì–û–¢–û–í–ê!"