generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum CompanyUserRole {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
  VIEWER
}

enum ClientRole {
  CLIENT
  SUPPLIER
  BOTH
}

enum Currency {
  EUR
  USD
  AED
  UAH
  GBP
}

enum DocumentStatus {
  DRAFT
  PENDING
  APPROVED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  PARTIAL
  DELIVERED
  IN_TRANSIT
  CANCELLED
}

enum SalesDocumentType {
  QUOTE
  ORDER
  INVOICE
  DELIVERY_NOTE
  RECEIPT
}

enum PurchaseOperationType {
  PURCHASE
  RETURN
  CORRECTION
  TRANSFER
}

enum WarehouseStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum BankOperationType {
  INCOME
  EXPENSE
  TRANSFER
}

model users {
  id Int @id @default(autoincrement())

  username      String @unique @db.VarChar(50)
  email         String @unique @db.VarChar(100)
  password_hash String @db.VarChar(255)

  first_name String? @db.VarChar(50)
  last_name  String? @db.VarChar(50)
  phone      String? @db.VarChar(20)

  role      UserRole @default(USER)
  status    String   @default("active") @db.VarChar(20)
  is_active Boolean  @default(true)

  email_verified     Boolean   @default(false)
  email_verified_at  DateTime?
  verification_token String?   @unique @db.VarChar(255)

  reset_token         String?   @unique @db.VarChar(255)
  reset_token_expires DateTime?

  onboarding_completed Boolean @default(false)
  current_company_id   Int?

  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  last_login_at DateTime?

  companies       companies[]      @relation("CompanyOwner")
  company_users   company_users[]

  created_sales       sales[]        @relation("SaleCreator")
  modified_sales      sales[]        @relation("SaleModifier")
  managed_sales       sales[]        @relation("SalesManager")
  
  created_purchases   purchases[]    @relation("PurchaseCreator")
  modified_purchases  purchases[]    @relation("PurchaseModifier")
  locked_purchases    purchases[]    @relation("PurchaseLocker")
  managed_purchases   purchases[]    @relation("PurchaseManager")
  
  purchase_items      purchase_items[] @relation("PurchaseItemEmployee")
  
  created_products    products[]     @relation("ProductCreator")
  modified_products   products[]     @relation("ProductModifier")
  
  created_clients     clients[]      @relation("ClientCreator") 
  modified_clients    clients[]      @relation("ClientModifier")
  
  client_addresses    client_addresses[] @relation("AddressEmployee")
  
  created_warehouses  warehouses[]   @relation("WarehouseCreator")
  warehouse_manager   warehouses[]   @relation("WarehouseResponsible")
  
  bank_operations     bank_operations[]
  chart_of_accounts   chart_of_accounts[]

  created_batches     product_batches[] @relation("BatchCreator")
  batch_movements     batch_movements[] @relation("MovementCreator")
  accounting_entries  accounting_entries[] @relation("EntryCreator")

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([is_active])
}

model companies {
  id Int @id @default(autoincrement())

  code        String  @unique @db.VarChar(20)
  name        String  @db.VarChar(100)
  short_name  String? @db.VarChar(50)
  description String? @db.Text

  email   String? @db.VarChar(100)
  phone   String? @db.VarChar(20)
  website String? @db.VarChar(200)

  legal_entity_type   String  @db.VarChar(50)
  registration_number String? @db.VarChar(50)
  vat_number          String? @db.VarChar(50)

  legal_address  String? @db.Text
  actual_address String? @db.Text

  tax_country   String   @default("UAE") @db.VarChar(3)
  base_currency Currency @default(AED)

  owner_id      Int
  director_name String @db.VarChar(100)

  is_active       Boolean @default(true)
  setup_completed Boolean @default(false)
  email_verified  Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner     users           @relation("CompanyOwner", fields: [owner_id], references: [id], onDelete: Restrict)
  employees company_users[]

  clients             clients[]
  products            products[]
  sales               sales[]
  purchases           purchases[]
  warehouses          warehouses[]
  bank_operations     bank_operations[]
  chart_of_accounts   chart_of_accounts[]
  vat_classifications vat_classifications[]
  cost_centers        cost_centers[]

  product_batches    product_batches[]
  batch_movements    batch_movements[]
  accounting_entries accounting_entries[]

  @@index([owner_id])
  @@index([code])
  @@index([name])
  @@index([is_active])
  @@index([tax_country])
}

model company_users {
  id Int @id @default(autoincrement())

  company_id Int
  user_id    Int

  role        CompanyUserRole @default(EMPLOYEE)
  permissions String[]        @default([])

  is_active Boolean @default(true)

  joined_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user    users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([company_id, user_id])
  @@index([company_id])
  @@index([user_id])
  @@index([role])
}

// УЛУЧШЕННАЯ МОДЕЛЬ CLIENTS ПО СТАНДАРТУ B1.lt

model clients {
  id         Int @id @default(autoincrement())
  company_id Int

  // ======= ОСНОВНАЯ ИНФОРМАЦИЯ =======
  name         String  @db.VarChar(200)
  abbreviation String? @db.VarChar(100)  // shortName в B1.lt
  code         String? @db.VarChar(50)

  // ======= КОНТАКТНАЯ ИНФОРМАЦИЯ =======
  email               String  @db.VarChar(100)
  phone               String? @db.VarChar(20)  // phoneNumber в B1.lt
  fax                 String? @db.VarChar(20)  // faxNumber в B1.lt
  website             String? @db.VarChar(200)
  contact_information String? @db.Text

  // ======= ТИПЫ И СТАТУСЫ =======
  role         ClientRole @default(CLIENT)
  is_juridical Boolean    @default(true)
  is_active    Boolean    @default(true)
  is_foreigner Boolean    @default(false)  // location в B1.lt

  // ======= РЕГИСТРАЦИОННЫЙ АДРЕС (как в B1.lt) =======
  registration_country_code String? @db.VarChar(3)   // registrationCountryCode
  registration_city         String? @db.VarChar(100) // registrationCity  
  registration_address      String? @db.Text         // registrationAddress
  registration_zip_code     String? @db.VarChar(20)  // registrationZipCode

  // ======= КОРРЕСПОНДЕНТСКИЙ АДРЕС (как в B1.lt) =======
  correspondence_country_code String? @db.VarChar(3)   // correspondenceCountryCode
  correspondence_city         String? @db.VarChar(100) // correspondenceCity
  correspondence_address      String? @db.Text         // correspondenceAddress  
  correspondence_zip_code     String? @db.VarChar(20)  // correspondenceZipCode

  // ======= LEGACY ПОЛЯ (для совместимости) =======
  country        String? @db.VarChar(100) // DEPRECATED: использовать registration_country_code
  legal_address  String? @db.Text         // DEPRECATED: использовать registration_address  
  actual_address String? @db.Text         // DEPRECATED: использовать correspondence_address

  // ======= НАЛОГОВЫЕ И ПРАВОВЫЕ ДАННЫЕ =======
  business_license_code String?  @db.VarChar(50)
  vat_code              String?  @db.VarChar(50)  // vatCode в B1.lt
  vat_rate              Decimal? @db.Decimal(5, 2)
  eori_code             String?  @db.VarChar(50)
  foreign_taxpayer_code String?  @db.VarChar(50)
  registration_number   String?  @db.VarChar(50)
  resident_code         String?  @db.VarChar(50)  // Новое поле из B1.lt

  // ======= ФИНАНСОВЫЕ НАСТРОЙКИ =======
  credit_sum              Decimal? @default(0) @db.Decimal(15, 2)  // creditSum в B1.lt
  pay_within              Int?     @default(30)                    // payWithin в B1.lt (дни)
  currency                Currency @default(EUR)
  payment_terms           String?  @db.VarChar(100)
  automatic_debt_reminder Boolean? @default(false)                 // automaticDebtRemind в B1.lt

  // ======= ПЕРСОНАЛЬНЫЕ ДАННЫЕ =======
  registration_date DateTime? @db.Date
  date_of_birth     DateTime? @db.Date  // birthday в B1.lt

  // ======= ИНТЕГРАЦИЯ С SABIS =======
  sabis_customer_name String? @db.VarChar(200)
  sabis_customer_code String? @db.VarChar(50)

  // ======= ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ =======
  additional_information String? @db.Text
  notes                  String? @db.Text

  // ======= АУДИТ =======
  created_by Int
  updated_by Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // ======= СВЯЗИ =======
  company  companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator  users     @relation("ClientCreator", fields: [created_by], references: [id])
  modifier users?    @relation("ClientModifier", fields: [updated_by], references: [id])

  // Связанные данные
  addresses     client_addresses[]
  bank_accounts client_bank_accounts[]

  sales           sales[]
  purchases       purchases[]
  bank_operations bank_operations[]

  // Партийная система
  batches_supplied   product_batches[]    @relation("BatchSupplier")
  accounting_entries accounting_entries[]

  // ======= ИНДЕКСЫ =======
  @@unique([company_id, code])
  @@unique([company_id, vat_code])
  @@index([company_id])
  @@index([role])
  @@index([is_active])
  @@index([registration_country_code])
  @@index([correspondence_country_code])
  @@index([created_by])
  @@index([updated_by])
}

// ОБНОВЛЕННАЯ МОДЕЛЬ BANK ACCOUNTS
model client_bank_accounts {
  id        Int @id @default(autoincrement())
  client_id Int

  // ======= ОСНОВНЫЕ БАНКОВСКИЕ ДАННЫЕ (как в B1.lt) =======
  account_number String   @db.VarChar(50)  // bankAccount в B1.lt
  bank_name      String   @db.VarChar(100) // bankName в B1.lt  
  bank_code      String?  @db.VarChar(20)  // bankCode в B1.lt
  swift_code     String?  @db.VarChar(20)  // bankSwiftCode в B1.lt
  iban           String?  @db.VarChar(50)
  
  // ======= ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ =======
  currency       Currency @default(EUR)
  is_primary     Boolean  @default(false)
  is_active      Boolean  @default(true)

  // ======= АУДИТ =======
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // ======= СВЯЗИ =======
  client clients @relation(fields: [client_id], references: [id], onDelete: Cascade)

  // ======= ИНДЕКСЫ =======
  @@unique([client_id, account_number])
  @@index([client_id])
  @@index([is_primary])
  @@index([swift_code])
}

model client_addresses {
  id        Int @id @default(autoincrement())
  client_id Int

  address     String? @db.VarChar(255)
  city        String? @db.VarChar(100)
  country     String  @db.VarChar(100)
  postcode    String? @db.VarChar(20)
  employee_id Int?

  is_registration   Boolean @default(false)
  is_correspondence Boolean @default(false)
  is_load           Boolean @default(false)
  is_unload         Boolean @default(false)
  is_department     Boolean @default(false)

  name        String?  @db.VarChar(100)
  description String?  @db.Text
  notes       String?  @db.Text
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  client   clients @relation(fields: [client_id], references: [id], onDelete: Cascade)
  employee users?  @relation("AddressEmployee", fields: [employee_id], references: [id])

  @@index([client_id])
  @@index([country])
  @@index([is_correspondence])
  @@index([employee_id])
}



model products {
  id         Int @id @default(autoincrement())
  company_id Int

  code          String   @db.VarChar(50)
  name          String   @db.VarChar(255)
  description   String?  @db.Text
  unit          String   @db.VarChar(20)
  price         Decimal  @db.Decimal(10, 2)
  cost_price    Decimal? @db.Decimal(10, 2)
  currency      Currency @default(EUR)
  vat_rate      Decimal? @db.Decimal(5, 2)
  category      String?  @db.VarChar(100)
  subcategory   String?  @db.VarChar(100)
  min_stock     Decimal? @db.Decimal(10, 2)
  current_stock Decimal? @db.Decimal(10, 2)
  is_active     Boolean  @default(true)
  is_service    Boolean  @default(false)

  batch_tracking Boolean @default(true)

  created_by Int
  updated_by Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company        companies        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator        users            @relation("ProductCreator", fields: [created_by], references: [id])
  modifier       users?           @relation("ProductModifier", fields: [updated_by], references: [id])
  sale_items     sale_items[]
  purchase_items purchase_items[]

  product_batches    product_batches[]
  accounting_entries accounting_entries[]

  @@unique([company_id, code])
  @@index([company_id])
  @@index([is_active])
  @@index([created_by])
  @@index([updated_by])
}

model sales {
  id         Int @id @default(autoincrement())
  company_id Int

  document_number String            @db.VarChar(50)
  document_date   DateTime          @db.Date
  document_type   SalesDocumentType @default(INVOICE)
  delivery_date   DateTime?         @db.Date
  due_date        DateTime?         @db.Date

  client_id        Int
  warehouse_id     Int?
  sales_manager_id Int?

  subtotal        Decimal  @db.Decimal(15, 2)
  vat_amount      Decimal  @default(0) @db.Decimal(15, 2)
  discount_amount Decimal  @default(0) @db.Decimal(15, 2)
  total_amount    Decimal  @db.Decimal(15, 2)
  currency        Currency @default(EUR)

  payment_status  PaymentStatus  @default(PENDING)
  delivery_status DeliveryStatus @default(PENDING)
  document_status DocumentStatus @default(DRAFT)

  created_by Int
  created_at DateTime @default(now())
  updated_by Int?
  updated_at DateTime @updatedAt

  company       companies    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator       users        @relation("SaleCreator", fields: [created_by], references: [id])
  modifier      users?       @relation("SaleModifier", fields: [updated_by], references: [id])
  client        clients      @relation(fields: [client_id], references: [id])
  warehouse     warehouses?  @relation(fields: [warehouse_id], references: [id])
  sales_manager users?       @relation("SalesManager", fields: [sales_manager_id], references: [id])
  items         sale_items[]

  @@unique([company_id, document_number])
  @@index([company_id])
  @@index([document_date])
  @@index([client_id])
  @@index([payment_status])
}

model sale_items {
  id Int @id @default(autoincrement())

  sale_id         Int
  product_id      Int
  line_number     Int?
  quantity        Decimal @db.Decimal(10, 3)
  unit_price_base Decimal @db.Decimal(10, 2)

  discount_percent Decimal? @default(0) @db.Decimal(5, 2)
  total_discount   Decimal? @default(0) @db.Decimal(15, 2)
  vat_rate         Decimal? @db.Decimal(5, 2)
  vat_amount       Decimal? @db.Decimal(15, 2)
  line_total       Decimal  @db.Decimal(15, 2)

  description String?  @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  sale    sales    @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product products @relation(fields: [product_id], references: [id])

  @@index([sale_id])
  @@index([product_id])
}

model purchases {
  id         Int @id @default(autoincrement())
  company_id Int

  document_number String                @db.VarChar(50)
  document_date   DateTime              @db.Date
  due_date        DateTime?             @db.Date
  operation_type  PurchaseOperationType @default(PURCHASE)

  supplier_id         Int
  supplier_code       String? @db.VarChar(50)
  warehouse_id        Int?
  purchase_manager_id Int?

  subtotal         Decimal  @db.Decimal(15, 2)
  vat_amount       Decimal  @default(0) @db.Decimal(15, 2)
  total_amount     Decimal  @db.Decimal(15, 2)
  total_excl_vat   Decimal? @db.Decimal(15, 2)
  
  advance_payment  Decimal? @default(0) @db.Decimal(15, 2)
  discount_percent Decimal? @default(0) @db.Decimal(5, 2)
  discount_amount  Decimal? @default(0) @db.Decimal(15, 2)
  balance_amount   Decimal? @db.Decimal(15, 2)
  
  currency         Currency @default(EUR)
  foreign_currency String?  @db.VarChar(3)
  exchange_rate    Decimal? @default(1) @db.Decimal(10, 4)

  country String? @db.VarChar(100)
  city    String? @db.VarChar(100)

  business_license_code String? @db.VarChar(100)
  delivery_method       String? @db.VarChar(50)
  estimated_vat         Decimal? @default(0) @db.Decimal(15, 2)
  vat_classification    String?  @db.VarChar(50)
  vat_date              DateTime? @db.Date
  vat_comment           String?  @db.Text

  file_count           Int?     @default(0)
  additional_expenses  Decimal? @default(0) @db.Decimal(15, 2)
  comments             String?  @db.Text
  rounding_amount      Decimal? @default(0) @db.Decimal(15, 2)

  payment_status  PaymentStatus  @default(PENDING)
  delivery_status DeliveryStatus @default(PENDING)
  document_status DocumentStatus @default(DRAFT)

  locked      Boolean   @default(false)
  locked_date DateTime?
  locked_by   Int?

  created_by Int
  created_at DateTime @default(now())
  updated_by Int?
  updated_at DateTime @updatedAt

  company          companies        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator          users            @relation("PurchaseCreator", fields: [created_by], references: [id])
  modifier         users?           @relation("PurchaseModifier", fields: [updated_by], references: [id])
  locker           users?           @relation("PurchaseLocker", fields: [locked_by], references: [id])
  supplier         clients          @relation(fields: [supplier_id], references: [id])
  warehouse        warehouses?      @relation(fields: [warehouse_id], references: [id])
  purchase_manager users?           @relation("PurchaseManager", fields: [purchase_manager_id], references: [id])
  items            purchase_items[]

  product_batches product_batches[]

  @@unique([company_id, document_number])
  @@index([company_id])
  @@index([document_date])
  @@index([due_date])
  @@index([supplier_id])
  @@index([payment_status])
  @@index([delivery_status])
  @@index([document_status])
  @@index([country])
  @@index([city])
  @@index([supplier_code])
  @@index([business_license_code])
  @@index([vat_classification])
  @@index([locked])
  @@index([advance_payment])
  @@index([balance_amount])
  @@index([payment_status, document_date])
  @@index([country, city])
  @@index([locked, document_date])
}

model purchase_items {
  id Int @id @default(autoincrement())

  purchase_id Int
  product_id  Int
  line_number Int?

  quantity        Decimal @db.Decimal(10, 3)
  unit_price_base Decimal @db.Decimal(10, 2)

  vat_rate   Decimal? @db.Decimal(5, 2)
  vat_amount Decimal? @db.Decimal(15, 2)
  line_total Decimal  @db.Decimal(15, 2)

  advance_payment       Decimal? @default(0) @db.Decimal(15, 2)
  discount_percent      Decimal? @default(0) @db.Decimal(5, 2)
  discount_amount       Decimal? @default(0) @db.Decimal(15, 2)
  business_license_code String?  @db.VarChar(100)

  employee_id Int?
  notes       String? @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  purchase purchases @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  product  products  @relation(fields: [product_id], references: [id])
  employee users?    @relation("PurchaseItemEmployee", fields: [employee_id], references: [id])

  @@index([purchase_id])
  @@index([product_id])
  @@index([employee_id])
  @@index([business_license_code])
}

model warehouses {
  id         Int @id @default(autoincrement())
  company_id Int

  name        String          @db.VarChar(100)
  code        String?         @db.VarChar(20)
  description String?         @db.Text
  address     String?         @db.Text
  manager_id  Int?
  status      WarehouseStatus @default(ACTIVE)
  is_main     Boolean         @default(false)

  created_by Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company   companies   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator   users       @relation("WarehouseCreator", fields: [created_by], references: [id])
  manager   users?      @relation("WarehouseResponsible", fields: [manager_id], references: [id])
  sales     sales[]
  purchases purchases[]

  product_batches    product_batches[]
  accounting_entries accounting_entries[]

  @@unique([company_id, code])
  @@index([company_id])
  @@index([status])
}

model bank_operations {
  id         Int @id @default(autoincrement())
  company_id Int

  doc_number     String            @db.VarChar(50)
  operation_date DateTime          @db.Date
  amount         Decimal           @db.Decimal(15, 2)
  currency       Currency          @default(EUR)
  type           BankOperationType
  description    String            @db.VarChar(255)
  client_id      Int?

  created_by Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator users     @relation(fields: [created_by], references: [id])
  client  clients?  @relation(fields: [client_id], references: [id])

  @@index([company_id])
  @@index([operation_date])
  @@index([type])
}

model chart_of_accounts {
  id         Int @id @default(autoincrement())
  company_id Int

  account_code String    @db.VarChar(20)
  account_name String    @db.VarChar(255)
  account_type String    @db.VarChar(50)
  is_active    Boolean   @default(true)
  currency     Currency?

  created_by Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator users     @relation(fields: [created_by], references: [id])

  @@unique([company_id, account_code])
  @@index([company_id])
  @@index([account_type])
}

model vat_classifications {
  id         Int     @id @default(autoincrement())
  company_id Int
  code       String  @db.VarChar(20)
  name       String  @db.VarChar(100)
  vat_rate   Decimal @db.Decimal(5, 2)
  is_active  Boolean @default(true)

  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@unique([company_id, code])
  @@index([company_id])
}

model cost_centers {
  id         Int     @id @default(autoincrement())
  company_id Int
  code       String  @db.VarChar(20)
  name       String  @db.VarChar(100)
  parent_id  Int?
  is_active  Boolean @default(true)

  company  companies      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  parent   cost_centers?  @relation("CostCenterHierarchy", fields: [parent_id], references: [id])
  children cost_centers[] @relation("CostCenterHierarchy")

  @@unique([company_id, code])
  @@index([company_id])
  @@index([parent_id])
}

model intrastat_codes {
  id        Int     @id @default(autoincrement())
  code_type String  @db.VarChar(20)
  code      String  @db.VarChar(20)
  name      String  @db.VarChar(200)
  is_active Boolean @default(true)

  @@unique([code_type, code])
  @@index([code_type])
}

model product_batches {
  id         Int @id @default(autoincrement())
  company_id Int

  batch_number String @db.VarChar(50)
  product_id   Int
  warehouse_id Int
  supplier_id  Int?

  original_quantity Decimal  @db.Decimal(15, 3)
  current_quantity  Decimal  @db.Decimal(15, 3)
  unit_cost         Decimal  @db.Decimal(15, 2)
  total_cost        Decimal  @db.Decimal(15, 2)
  currency          Currency @default(EUR)

  purchase_date   DateTime  @db.Date
  expiry_date     DateTime? @db.Date
  production_date DateTime? @db.Date

  status    String  @default("ACTIVE") @db.VarChar(20)
  is_active Boolean @default(true)

  purchase_id Int?

  created_by Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company   companies  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  product   products   @relation(fields: [product_id], references: [id])
  warehouse warehouses @relation(fields: [warehouse_id], references: [id])
  supplier  clients?   @relation("BatchSupplier", fields: [supplier_id], references: [id])
  purchase  purchases? @relation(fields: [purchase_id], references: [id])
  creator   users      @relation("BatchCreator", fields: [created_by], references: [id])

  batch_movements    batch_movements[]
  accounting_entries accounting_entries[]

  @@unique([company_id, batch_number])
  @@index([company_id])
  @@index([product_id])
  @@index([warehouse_id])
  @@index([supplier_id])
  @@index([status])
  @@index([purchase_date])
}

model batch_movements {
  id         Int @id @default(autoincrement())
  company_id Int

  batch_id      Int
  movement_type String   @db.VarChar(20)
  quantity      Decimal  @db.Decimal(15, 3)
  unit_price    Decimal? @db.Decimal(15, 2)

  reference_type String? @db.VarChar(20)
  reference_id   Int?

  description String? @db.Text
  notes       String? @db.Text

  movement_date DateTime @db.Date
  created_by    Int
  created_at    DateTime @default(now())

  company companies       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  batch   product_batches @relation(fields: [batch_id], references: [id], onDelete: Cascade)
  creator users           @relation("MovementCreator", fields: [created_by], references: [id])

  @@index([company_id])
  @@index([batch_id])
  @@index([movement_type])
  @@index([movement_date])
  @@index([reference_type, reference_id])
}

model accounting_entries {
  id         Int @id @default(autoincrement())
  company_id Int

  entry_number String   @db.VarChar(50)
  entry_date   DateTime @db.Date
  amount       Decimal  @db.Decimal(15, 2)
  currency     Currency @default(EUR)

  account_debit  String @db.VarChar(10) // 2040, 2410, etc.
  account_credit String @db.VarChar(10) // 4430, 7001, etc.

  description String  @db.VarChar(255)
  notes       String? @db.Text

  reference_type String? @db.VarChar(20) // PURCHASE, SALE, BANKING
  reference_id   Int?
  product_id     Int?
  warehouse_id   Int?
  client_id      Int?

  batch_id Int?

  is_automatic Boolean  @default(true)
  created_by   Int
  created_at   DateTime @default(now())

  company   companies        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  product   products?        @relation(fields: [product_id], references: [id])
  warehouse warehouses?      @relation(fields: [warehouse_id], references: [id])
  client    clients?         @relation(fields: [client_id], references: [id])
  batch     product_batches? @relation(fields: [batch_id], references: [id])
  creator   users            @relation("EntryCreator", fields: [created_by], references: [id])

  @@unique([company_id, entry_number])
  @@index([company_id])
  @@index([entry_date])
  @@index([account_debit])
  @@index([account_credit])
  @@index([reference_type, reference_id])
  @@index([batch_id])
}
