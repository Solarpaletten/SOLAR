// b/src/middleware/company/companyContext.js
const { getPrismaManager } = require('../../utils/prismaManager');
const { logger } = require('../../config/logger');

/**
 * üè≠ COMPANY CONTEXT MIDDLEWARE
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç multi-tenant –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–∞–Ω–∏—è–º–∏
 */
const companyContext = async (req, res, next) => {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º Company ID –∏–∑ headers –∏–ª–∏ session
    const companyId = req.headers['x-company-id'] || 
                     req.session?.currentCompanyId ||
                     req.body?.companyId;

    if (!companyId) {
      return res.status(400).json({
        success: false,
        error: 'Company context missing. Please select a company first.',
        code: 'COMPANY_CONTEXT_REQUIRED'
      });
    }

    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: 'Authentication required',
        code: 'AUTH_REQUIRED'
      });
    }

    logger.info('Company Context Middleware:', {
      userId,
      companyId,
      path: req.path,
      method: req.method
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    const prismaManager = getPrismaManager();
    const accountPrisma = prismaManager.getAccountPrisma();
    const userCompanyAccess = await accountPrisma.company_users.findFirst({
      where: {
        user_id: parseInt(userId),
        company_id: parseInt(companyId)
      },
      include: {
        company: {
          select: {
            id: true,
            name: true,
            code: true,
            is_active: true
          }
        }
      }
    });

    if (!userCompanyAccess) {
      return res.status(403).json({
        success: false,
        error: 'Access denied to this company',
        code: 'COMPANY_ACCESS_DENIED'
      });
    }

    if (!userCompanyAccess.company.is_active) {
      return res.status(403).json({
        success: false,
        error: 'Company is not active',
        code: 'COMPANY_INACTIVE'
      });
    }

    // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏
    req.companyContext = {
      companyId: parseInt(companyId),
      company: userCompanyAccess.company,
      userRole: userCompanyAccess.role,
      userPermissions: userCompanyAccess.permissions
    };

    // 4. –ü–æ–ª—É—á–∞–µ–º Prisma –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º middleware)
    try {
      req.prisma = prismaManager.getCompanyPrisma(companyId);
    } catch (prismaError) {
      logger.error('Failed to get company Prisma instance:', prismaError);
      return res.status(500).json({
        success: false,
        error: 'Database connection error for company',
        code: 'COMPANY_DB_ERROR'
      });
    }

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    req.session.currentCompanyId = parseInt(companyId);

    logger.info('‚úÖ Company context established:', {
      companyId: req.companyContext.companyId,
      companyName: req.companyContext.company.name,
      userRole: req.companyContext.userRole
    });

    next();

  } catch (error) {
    logger.error('Company Context Middleware Error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to establish company context',
      code: 'COMPANY_CONTEXT_ERROR',
      details: error.message
    });
  }
};

module.exports = companyContext;