// b/src/controllers/company/purchasesController.js - –ò–°–ü–†–ê–í–õ–ï–ù –ò –ó–ê–í–ï–†–®–Å–ù
const { prisma } = require('../../utils/prismaManager');
const { logger } = require('../../config/logger');

// üìä GET /api/company/purchases/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
const getPurchasesStats = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    
    if (!companyId) {
      return res.status(400).json({ error: 'Company context required' });
    }

    logger.info(`üìä Fetching purchases stats for company: ${companyId}`);

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const [
      totalPurchases,
      totalAmount,
      pendingCount,
      thisMonthStats
    ] = await Promise.all([
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
      prisma.purchases.count({
        where: { company_id: companyId }
      }),
      
      // –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫
      prisma.purchases.aggregate({
        where: { company_id: companyId },
        _sum: { total_amount: true }
      }),
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–∫—É–ø–æ–∫
      prisma.purchases.count({
        where: {
          company_id: companyId,
          payment_status: 'PENDING'
        }
      }),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
      prisma.purchases.aggregate({
        where: {
          company_id: companyId,
          document_date: {
            gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
          }
        },
        _sum: { total_amount: true },
        _count: true
      })
    ]);

    const stats = {
      total_purchases: totalPurchases,
      total_amount: totalAmount._sum.total_amount || 0,
      pending_purchases: pendingCount,
      this_month_purchases: thisMonthStats._count,
      this_month_amount: thisMonthStats._sum.total_amount || 0,
      average_purchase: totalPurchases > 0 ? (totalAmount._sum.total_amount || 0) / totalPurchases : 0
    };

    res.json({
      success: true,
      stats,
      companyId
    });
  } catch (error) {
    logger.error('Error fetching purchases stats:', error);
    res.status(500).json({
      success: false,
      error: 'Error fetching purchases stats'
    });
  }
};

// üìã GET /api/company/purchases - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏
const getAllPurchases = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    
    if (!companyId) {
      return res.status(400).json({ error: 'Company context required' });
    }

    const {
      page = 1,
      limit = 10,
      search = '',
      payment_status,
      delivery_status,
      operation_type,
      supplier_id,
      sort_by = 'document_date',
      sort_order = 'desc'
    } = req.query;

    logger.info(`üìã Fetching purchases for company: ${companyId}`);

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions = {
      company_id: companyId
    };

    if (search) {
      whereConditions.OR = [
        { document_number: { contains: search, mode: 'insensitive' } },
        { supplier: { name: { contains: search, mode: 'insensitive' } } }
      ];
    }

    if (payment_status) whereConditions.payment_status = payment_status;
    if (delivery_status) whereConditions.delivery_status = delivery_status;
    if (operation_type) whereConditions.operation_type = operation_type;
    if (supplier_id) whereConditions.supplier_id = parseInt(supplier_id);

    const skip = (parseInt(page) - 1) * parseInt(limit);

    const [purchases, totalCount] = await Promise.all([
      prisma.purchases.findMany({
        where: whereConditions,
        include: {
          supplier: {
            select: {
              id: true,
              name: true,
              email: true,
              phone: true
            }
          },
          warehouse: {
            select: {
              id: true,
              name: true,
              code: true
            }
          },
          purchase_manager: {
            select: {
              id: true,
              first_name: true,
              last_name: true,
              email: true
            }
          },
          items: {
            include: {
              product: {
                select: {
                  id: true,
                  code: true,
                  name: true,
                  unit: true
                }
              }
            }
          }
        },
        orderBy: {
          [sort_by]: sort_order
        },
        skip,
        take: parseInt(limit)
      }),
      prisma.purchases.count({ where: whereConditions })
    ]);

    const totalPages = Math.ceil(totalCount / parseInt(limit));

    res.json({
      success: true,
      purchases,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: totalCount,
        pages: totalPages,
        hasNext: parseInt(page) < totalPages,
        hasPrev: parseInt(page) > 1
      },
      companyId
    });
  } catch (error) {
    logger.error('Error fetching purchases:', error);
    res.status(500).json({
      success: false,
      error: 'Error fetching purchases'
    });
  }
};

// üìÑ GET /api/company/purchases/:id - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ ID
const getPurchaseById = async (req, res) => {
  try {
    const { id } = req.params;
    const companyId = req.companyContext?.companyId;

    logger.info(`üìÑ Fetching purchase ${id} for company: ${companyId}`);

    const purchase = await prisma.purchases.findFirst({
      where: {
        id: parseInt(id),
        company_id: companyId
      },
      include: {
        supplier: true,
        warehouse: {
          select: {
            id: true,
            name: true,
            code: true,
            address: true
          }
        },
        purchase_manager: {
          select: {
            id: true,
            first_name: true,
            last_name: true,
            email: true
          }
        },
        creator: {
          select: {
            id: true,
            first_name: true,
            last_name: true,
            email: true
          }
        },
        modifier: {
          select: {
            id: true,
            first_name: true,
            last_name: true,
            email: true
          }
        },
        items: {
          include: {
            product: true,
            employee: {
              select: {
                id: true,
                first_name: true,
                last_name: true
              }
            }
          },
          orderBy: {
            line_number: 'asc'
          }
        }
      }
    });

    if (!purchase) {
      return res.status(404).json({
        success: false,
        error: 'Purchase not found'
      });
    }

    res.json({
      success: true,
      purchase,
      companyId
    });
  } catch (error) {
    logger.error('Error fetching purchase:', error);
    res.status(500).json({
      success: false,
      error: 'Error fetching purchase'
    });
  }
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨ –ö–û–ù–¢–†–û–õ–õ–ï–†–ê - —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—è createPurchase

// ‚ûï POST /api/company/purchases - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É
const createPurchase = async (req, res) => {
  try {
    const companyId = req.companyContext?.companyId;
    const userId = req.user?.id || 1;
    
    const {
      document_number,
      document_date,
      operation_type = 'PURCHASE',
      supplier_id,
      warehouse_id,
      purchase_manager_id,
      currency = 'EUR',
      payment_status = 'PENDING',
      delivery_status = 'PENDING',
      document_status = 'DRAFT',
      items = []
    } = req.body;

    if (!companyId) {
      return res.status(400).json({ 
        error: 'Company context required'
      });
    }

    logger.info(`‚ûï Creating purchase for company: ${companyId}`);
    logger.info(`üìù Purchase data:`, {
      document_number,
      supplier_id,
      warehouse_id,
      items: items.length,
      userId
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!document_number || !document_date || !supplier_id) {
      return res.status(400).json({
        success: false,
        error: 'Required fields: document_number, document_date, supplier_id'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º supplier —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const supplier = await prisma.clients.findFirst({
      where: { 
        id: parseInt(supplier_id), 
        company_id: companyId 
      }
    });

    if (!supplier) {
      logger.error(`‚ùå Supplier ${supplier_id} not found for company ${companyId}`);
      return res.status(400).json({
        success: false,
        error: `Supplier not found`
      });
    }

    logger.info(`‚úÖ Supplier found: ${supplier.name}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏
    const existingPurchase = await prisma.purchases.findFirst({
      where: {
        company_id: companyId,
        document_number
      }
    });

    if (existingPurchase) {
      return res.status(400).json({
        success: false,
        error: 'Purchase with this document number already exists'
      });
    }

    // –†–∞—Å—á—ë—Ç —Å—É–º–º
    let subtotal = 0;
    let vat_amount = 0;

    const processedItems = items.map((item, index) => {
      const quantity = parseFloat(item.quantity || 0);
      const unitPrice = parseFloat(item.unit_price_base || 0); // –û—Ç frontend –ø—Ä–∏—Ö–æ–¥–∏—Ç unit_price_base
      const vatRate = parseFloat(item.vat_rate || 0);
      
      const lineTotal = quantity * unitPrice;
      const vatAmount = lineTotal * (vatRate / 100);
      
      subtotal += lineTotal;
      vat_amount += vatAmount;

      return {
        product_id: parseInt(item.product_id),
        line_number: index + 1,
        quantity,
        unit_price: unitPrice,  // ‚Üê –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–î –ö–ê–ö unit_price
        vat_rate: vatRate,
        vat_amount: vatAmount,
        line_total: lineTotal,
        description: item.description || null,
        employee_id: item.employee_id ? parseInt(item.employee_id) : null
      };
    });

    const total_amount = subtotal + vat_amount;

    logger.info(`üí∞ Purchase totals: subtotal=${subtotal}, vat=${vat_amount}, total=${total_amount}`);

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const purchase = await prisma.$transaction(async (tx) => {
      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–∫—É–ø–∫—É
      const newPurchase = await tx.purchases.create({
        data: {
          company_id: companyId,
          document_number,
          document_date: new Date(document_date),
          operation_type,
          supplier_id: parseInt(supplier_id),
          warehouse_id: warehouse_id ? parseInt(warehouse_id) : null,
          purchase_manager_id: purchase_manager_id ? parseInt(purchase_manager_id) : null,
          subtotal,
          vat_amount,
          total_amount,
          currency,
          payment_status,
          delivery_status,
          document_status,
          created_by: userId,
          created_at: new Date()
        }
      });

      logger.info(`‚úÖ Created purchase: ${newPurchase.id}`);

      // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫—É–ø–∫–∏
      if (processedItems.length > 0) {
        await tx.purchase_items.createMany({
          data: processedItems.map(item => ({
            purchase_id: newPurchase.id,
            product_id: item.product_id,
            line_number: item.line_number,
            quantity: item.quantity,
            unit_price: item.unit_price,  // ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–ï
            vat_rate: item.vat_rate,
            vat_amount: item.vat_amount,
            line_total: item.line_total,
            notes: item.description,  // ‚Üê –í –ë–î –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'notes'
            employee_id: item.employee_id
          }))
        });
        
        logger.info(`‚úÖ Created ${processedItems.length} purchase items`);
      }

      return newPurchase;
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const createdPurchase = await prisma.purchases.findUnique({
      where: { id: purchase.id },
      include: {
        supplier: true,
        warehouse: true,
        purchase_manager: true,
        items: {
          include: {
            product: true
          }
        }
      }
    });

    logger.info(`üéâ Purchase created successfully: ${purchase.id}`);

    res.status(201).json({
      success: true,
      purchase: createdPurchase,
      message: 'Purchase created successfully',
      companyId
    });
  } catch (error) {
    logger.error('‚ùå Error creating purchase:', error);
    logger.error('Stack trace:', error.stack);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ Prisma
    if (error.code) {
      logger.error('Prisma error code:', error.code);
      logger.error('Prisma error meta:', error.meta);
    }
    
    res.status(500).json({
      success: false,
      error: 'Error creating purchase',
      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};


// ‚úèÔ∏è PUT /api/company/purchases/:id - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É
const updatePurchase = async (req, res) => {
  try {
    const { id } = req.params;
    const companyId = req.companyContext?.companyId;
    const userId = req.user?.id || 1;
    const updateData = req.body;

    logger.info(`‚úèÔ∏è Updating purchase ${id} for company: ${companyId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    const existingPurchase = await prisma.purchases.findFirst({
      where: {
        id: parseInt(id),
        company_id: companyId
      }
    });

    if (!existingPurchase) {
      return res.status(404).json({
        success: false,
        error: 'Purchase not found'
      });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const {
      items,
      ...purchaseFields
    } = updateData;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É
    const updatedPurchase = await prisma.$transaction(async (tx) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–æ–∫—É–ø–∫–∏
      const purchase = await tx.purchases.update({
        where: { id: parseInt(id) },
        data: {
          ...purchaseFields,
          updated_by: userId,
          updated_at: new Date()
        }
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å items, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      if (items && Array.isArray(items)) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ items
        await tx.purchase_items.deleteMany({
          where: { purchase_id: parseInt(id) }
        });

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ items
        if (items.length > 0) {
          await tx.purchase_items.createMany({
            data: items.map((item, index) => ({
              purchase_id: parseInt(id),
              product_id: parseInt(item.product_id),
              line_number: index + 1,
              quantity: parseFloat(item.quantity),
              unit_price_base: parseFloat(item.unit_price_base),
              discount_percent: parseFloat(item.discount_percent || 0),
              vat_rate: parseFloat(item.vat_rate || 0),
              vat_amount: parseFloat(item.vat_amount || 0),
              line_total: parseFloat(item.line_total || 0),
              description: item.description || null,
              warehouse_id: item.warehouse_id ? parseInt(item.warehouse_id) : null,
              employee_id: item.employee_id ? parseInt(item.employee_id) : null
            }))
          });
        }
      }

      return purchase;
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const purchase = await prisma.purchases.findUnique({
      where: { id: parseInt(id) },
      include: {
        supplier: true,
        warehouse: true,
        purchase_manager: true,
        items: {
          include: {
            product: true
          }
        }
      }
    });

    res.json({
      success: true,
      purchase,
      message: 'Purchase updated successfully',
      companyId
    });
  } catch (error) {
    logger.error('Error updating purchase:', error);
    res.status(500).json({
      success: false,
      error: 'Error updating purchase'
    });
  }
};

// üóëÔ∏è DELETE /api/company/purchases/:id - –£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É
const deletePurchase = async (req, res) => {
  try {
    const { id } = req.params;
    const companyId = req.companyContext?.companyId;

    logger.info(`üóëÔ∏è Deleting purchase ${id} for company: ${companyId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    const existingPurchase = await prisma.purchases.findFirst({
      where: {
        id: parseInt(id),
        company_id: companyId
      }
    });

    if (!existingPurchase) {
      return res.status(404).json({
        success: false,
        error: 'Purchase not found'
      });
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ items
      await tx.purchase_items.deleteMany({
        where: { purchase_id: parseInt(id) }
      });

      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –ø–æ–∫—É–ø–∫—É
      await tx.purchases.delete({
        where: { id: parseInt(id) }
      });
    });

    res.json({
      success: true,
      message: 'Purchase deleted successfully',
      companyId
    });
  } catch (error) {
    logger.error('Error deleting purchase:', error);
    res.status(500).json({
      success: false,
      error: 'Error deleting purchase'
    });
  }
};

module.exports = {
  getPurchasesStats,
  getAllPurchases,
  getPurchaseById,
  createPurchase,
  updatePurchase,
  deletePurchase
};