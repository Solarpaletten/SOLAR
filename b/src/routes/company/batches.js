// üéØ ROUTES –î–õ–Ø –ü–ê–†–¢–ò–ô–ù–û–ô –°–ò–°–¢–ï–ú–´
// b/src/routes/batches.js

const express = require('express');
const router = express.Router();
const batchController = require('../controllers/batchController');
const authMiddleware = require('../middleware/authMiddleware');
const companyMiddleware = require('../middleware/companyMiddleware');

// ===============================================
// üîí –ü–†–ò–ú–ï–ù–Ø–ï–ú MIDDLEWARE –ö–û –í–°–ï–ú ROUTES
// ===============================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
router.use(authMiddleware);
router.use(companyMiddleware);

// ===============================================
// üì¶ –û–°–ù–û–í–ù–´–ï BATCH ENDPOINTS
// ===============================================

/**
 * @route GET /api/company/batches/product/:productId/warehouse/:warehouseId
 * @desc –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ (–¥–ª—è Sales)
 * @access Private (Company Level)
 */
router.get('/product/:productId/warehouse/:warehouseId', 
  batchController.getBatchesByProduct
);

/**
 * @route POST /api/company/batches/allocate
 * @desc FIFO –∞–ª–≥–æ—Ä–∏—Ç–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
 * @access Private (Company Level)
 * @body { productId, warehouseId, quantity }
 */
router.post('/allocate', 
  batchController.allocateBatchesForSale
);

/**
 * @route GET /api/company/batches/:batchId/movements
 * @desc –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏
 * @access Private (Company Level)
 */
router.get('/:batchId/movements', 
  batchController.getBatchMovements
);

/**
 * @route POST /api/company/batches/movements
 * @desc –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ)
 * @access Private (Company Level)
 * @body { batchId, movementType, quantity, description, notes }
 */
router.post('/movements', 
  batchController.createBatchMovement
);

/**
 * @route GET /api/company/warehouses/:warehouseId/batches/report
 * @desc –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –ø–∞—Ä—Ç–∏—è–º –Ω–∞ —Å–∫–ª–∞–¥–µ
 * @access Private (Company Level)
 */
router.get('/warehouses/:warehouseId/report', 
  batchController.getWarehouseBatchesReport
);

// ===============================================
// üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS –î–õ–Ø ENTERPRISE
// ===============================================

/**
 * @route GET /api/company/batches/expiring
 * @desc –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–∏–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏
 * @access Private (Company Level)
 * @query ?days=30 (–ø–∞—Ä—Ç–∏–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ N –¥–Ω–µ–π)
 */
router.get('/expiring', async (req, res) => {
  try {
    const { days = 30 } = req.query;
    const companyId = req.user.current_company_id;
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + parseInt(days));

    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    const expiringBatches = await prisma.product_batches.findMany({
      where: {
        company_id: companyId,
        status: 'ACTIVE',
        current_quantity: { gt: 0 },
        expiry_date: {
          lte: expiryDate,
          gte: new Date() // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
        }
      },
      include: {
        product: { select: { name: true, code: true } },
        warehouse: { select: { name: true, code: true } },
        supplier: { select: { name: true, code: true } }
      },
      orderBy: { expiry_date: 'asc' }
    });

    res.json({
      success: true,
      data: expiringBatches,
      message: `–ù–∞–π–¥–µ–Ω–æ ${expiringBatches.length} –ø–∞—Ä—Ç–∏–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º`
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–∞—Ä—Ç–∏–π'
    });
  }
});

/**
 * @route GET /api/company/batches/supplier/:supplierId
 * @desc –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞—Ä—Ç–∏–∏ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
 * @access Private (Company Level)
 */
router.get('/supplier/:supplierId', async (req, res) => {
  try {
    const { supplierId } = req.params;
    const companyId = req.user.current_company_id;

    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    const supplierBatches = await prisma.product_batches.findMany({
      where: {
        company_id: companyId,
        supplier_id: parseInt(supplierId),
        current_quantity: { gt: 0 }
      },
      include: {
        product: { select: { name: true, code: true, unit: true } },
        warehouse: { select: { name: true, code: true } }
      },
      orderBy: { purchase_date: 'desc' }
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      totalBatches: supplierBatches.length,
      totalValue: supplierBatches.reduce((sum, batch) => 
        sum + (parseFloat(batch.current_quantity) * parseFloat(batch.unit_cost)), 0
      ),
      totalQuantity: supplierBatches.reduce((sum, batch) => 
        sum + parseFloat(batch.current_quantity), 0
      )
    };

    res.json({
      success: true,
      data: {
        batches: supplierBatches,
        statistics: stats
      },
      message: `–ü–∞—Ä—Ç–∏–∏ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞`
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'
    });
  }
});

/**
 * @route GET /api/company/batches/analytics/costs
 * @desc –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ–∫—É–ø–∫–∏
 * @access Private (Company Level)
 * @query ?productId=1 (–∞–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É)
 */
router.get('/analytics/costs', async (req, res) => {
  try {
    const { productId } = req.query;
    const companyId = req.user.current_company_id;

    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    const whereCondition = {
      company_id: companyId,
      current_quantity: { gt: 0 }
    };

    if (productId) {
      whereCondition.product_id = parseInt(productId);
    }

    const batches = await prisma.product_batches.findMany({
      where: whereCondition,
      include: {
        product: { select: { name: true, code: true } },
        supplier: { select: { name: true, code: true } }
      },
      orderBy: { purchase_date: 'desc' }
    });

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    const costAnalysis = batches.reduce((acc, batch) => {
      const productId = batch.product_id;
      const unitCost = parseFloat(batch.unit_cost);

      if (!acc[productId]) {
        acc[productId] = {
          product: batch.product,
          minCost: unitCost,
          maxCost: unitCost,
          avgCost: 0,
          totalQuantity: 0,
          totalValue: 0,
          batchCount: 0,
          suppliers: new Set()
        };
      }

      const item = acc[productId];
      item.minCost = Math.min(item.minCost, unitCost);
      item.maxCost = Math.max(item.maxCost, unitCost);
      item.totalQuantity += parseFloat(batch.current_quantity);
      item.totalValue += parseFloat(batch.current_quantity) * unitCost;
      item.batchCount++;
      item.suppliers.add(batch.supplier?.name || 'Unknown');

      return acc;
    }, {});

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
    Object.keys(costAnalysis).forEach(productId => {
      const item = costAnalysis[productId];
      item.avgCost = item.totalValue / item.totalQuantity;
      item.suppliers = Array.from(item.suppliers);
      item.costVariance = ((item.maxCost - item.minCost) / item.avgCost * 100).toFixed(2);
    });

    res.json({
      success: true,
      data: costAnalysis,
      message: '–ê–Ω–∞–ª–∏–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω'
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'
    });
  }
});

module.exports = router;