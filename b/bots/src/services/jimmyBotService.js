// jimmyBotService.js
const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const { transcribeAudio } = require('./whisperService'); // –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏

const token = process.env.TELEGRAM_JIMMY_BOT
const bot = new TelegramBot(token, { polling: true });

const baseDir = '/var/www/solar/s/b';
const tmpDir = path.join(baseDir, 'bots/tmp');

bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤–µ—Ç! –Ø –î–∂–∏–º–º–∏ ü§ñ. –ò—Å–ø–æ–ª–Ω—è—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –î–∞—à–∫–∏.`);
});

// üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm-–ø–∞–∫–µ—Ç–∞
bot.onText(/\/install (.+)/, (msg, match) => {
  const pkg = match[1];
  exec(`npm install ${pkg}`, (err, stdout, stderr) => {
    bot.sendMessage(msg.chat.id, err ? `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:\n${stderr}` : `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç: ${pkg}`);
  });
});

// ‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell-–∫–æ–º–∞–Ω–¥—ã
bot.onText(/\/exec (.+)/, (msg, match) => {
  const command = match[1];
  exec(command, (err, stdout, stderr) => {
    bot.sendMessage(msg.chat.id, err ? `‚ùå –û—à–∏–±–∫–∞:\n${stderr}` : `üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n${stdout.slice(0, 4000)}`);
  });
});

// üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
bot.onText(/\/get (.+)/, (msg, match) => {
  const relPath = match[1];
  const filePath = path.join(baseDir, relPath);
  if (!fs.existsSync(filePath)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  }
  bot.sendDocument(msg.chat.id, filePath);
});

// üìä –õ–∏—Å—Ç–∏–Ω–≥ –ø–∞–ø–∫–∏
bot.onText(/\/list (.+)/, (msg, match) => {
  const dir = path.join(baseDir, match[1]);
  if (!fs.existsSync(dir)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
  }
  const files = fs.readdirSync(dir).join('\n');
  bot.sendMessage(msg.chat.id, `üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:\n${files}`);
});

// üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (Whisper)
bot.onText(/\/transcribe (.+)/, async (msg, match) => {
  const relPath = match[1];
  const filePath = path.join(baseDir, relPath);
  if (!fs.existsSync(filePath)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  }
  try {
    const text = await transcribeAudio(filePath, 'auto');
    bot.sendMessage(msg.chat.id, `üñã—Ç–µ–∫—Å—Ç:
${text}`);
  } catch (err) {
    console.error('[Whisper Error]', err);
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: ${err.message}`);
  }
});

console.log('[BOT] JimmyBot is running...');
