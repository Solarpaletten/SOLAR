// TabBook MVP - –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è TAB-–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è
// "1 –î–ï–ô–°–¢–í–ò–ï = 90% –ë–£–•–ì–ê–õ–¢–ï–†–ò–ò"

import React, { useState, useEffect } from 'react';
import { Copy, Zap, RefreshCw, Save, Edit3 } from 'lucide-react';

// Hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
const useLastOperation = () => {
  const [lastOperations, setLastOperations] = useState({
    purchase: null,
    sale: null,
    payment: null,
    tax: null
  });

  const saveOperation = (type, data) => {
    const operationWithDate = {
      ...data,
      originalDate: data.date,
      id: Date.now(), // –î–ª—è tracking
      timestamp: new Date().toISOString()
    };
    
    setLastOperations(prev => ({
      ...prev,
      [type]: operationWithDate
    }));
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    localStorage.setItem('tabbook_last_ops', JSON.stringify({
      ...lastOperations,
      [type]: operationWithDate
    }));
  };

  const getOperation = (type) => {
    const lastOp = lastOperations[type];
    if (!lastOp) return null;
    
    return {
      ...lastOp,
      date: new Date().toISOString().split('T')[0], // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
      id: Date.now(), // –ù–æ–≤—ã–π ID
      duplicatedFrom: lastOp.id // Tracking –æ—Ç–∫—É–¥–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ
    };
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const saved = localStorage.getItem('tabbook_last_ops');
    if (saved) {
      try {
        setLastOperations(JSON.parse(saved));
      } catch (error) {
        console.error('Error loading TabBook operations:', error);
      }
    }
  }, []);

  return { saveOperation, getOperation, lastOperations };
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TAB Duplicator Button
const TabDuplicatorButton = ({ type, onDuplicate, lastOperation, disabled = false }) => {
  const [isHovered, setIsHovered] = useState(false);
  const [justClicked, setJustClicked] = useState(false);

  const handleClick = () => {
    if (!lastOperation || disabled) return;
    
    setJustClicked(true);
    setTimeout(() => setJustClicked(false), 600);
    
    onDuplicate(lastOperation);
  };

  const getTypeInfo = (type) => {
    const types = {
      purchase: { icon: 'üì¶', label: '–ü—Ä–∏—Ö–æ–¥', color: 'from-green-500 to-green-600' },
      sale: { icon: 'üí∞', label: '–ü—Ä–æ–¥–∞–∂–∞', color: 'from-blue-500 to-blue-600' },
      payment: { icon: 'üè¶', label: '–ü–ª–∞—Ç—ë–∂', color: 'from-purple-500 to-purple-600' },
      tax: { icon: 'üìã', label: '–ù–∞–ª–æ–≥', color: 'from-orange-500 to-orange-600' }
    };
    return types[type] || types.purchase;
  };

  const typeInfo = getTypeInfo(type);

  return (
    <div className="relative">
      <button
        onClick={handleClick}
        disabled={!lastOperation || disabled}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        className={`
          relative overflow-hidden px-6 py-3 rounded-xl font-semibold text-white
          transition-all duration-300 transform
          ${!lastOperation || disabled 
            ? 'bg-gray-400 cursor-not-allowed opacity-50' 
            : `bg-gradient-to-r ${typeInfo.color} hover:scale-105 hover:shadow-lg active:scale-95`
          }
          ${justClicked ? 'animate-pulse' : ''}
        `}
      >
        {/* –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ */}
        {justClicked && (
          <div className="absolute inset-0 bg-white opacity-30 animate-ping rounded-xl"></div>
        )}
        
        <div className="flex items-center space-x-2 relative z-10">
          <Copy className={`h-5 w-5 transition-transform ${isHovered ? 'rotate-12' : ''}`} />
          <span className="text-lg">{typeInfo.icon}</span>
          <span>TAB</span>
          <span className="text-sm opacity-90">{typeInfo.label}</span>
        </div>
        
        {/* Keyboard hint */}
        <div className="absolute -top-1 -right-1 bg-white text-gray-700 text-xs px-1 py-0.5 rounded text-[10px]">
          Tab
        </div>
      </button>
      
      {/* Tooltip —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      {isHovered && lastOperation && (
        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 bg-black text-white px-3 py-2 rounded-lg text-sm z-20 whitespace-nowrap">
          <div className="text-center">
            <div className="font-medium">–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å:</div>
            <div className="text-xs opacity-75">
              {lastOperation.supplier || lastOperation.client || lastOperation.description || '–û–ø–µ—Ä–∞—Ü–∏—è'}
            </div>
            <div className="text-xs text-green-300">
              {lastOperation.amount ? `${lastOperation.amount} ‚Ç¨` : ''}
            </div>
          </div>
          {/* –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ */}
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-black"></div>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Quick Edit –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
const QuickEditPanel = ({ operation, onSave, onCancel, type }) => {
  const [editData, setEditData] = useState(operation || {});

  const handleSave = () => {
    onSave(editData);
  };

  const getEditFields = () => {
    switch (type) {
      case 'purchase':
        return (
          <>
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ—Å—Ç–∞–≤—â–∏–∫</label>
                <input
                  type="text"
                  value={editData.supplier || ''}
                  onChange={(e) => setEditData({...editData, supplier: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–°—É–º–º–∞ ‚Ç¨</label>
                <input
                  type="number"
                  value={editData.amount || ''}
                  onChange={(e) => setEditData({...editData, amount: parseFloat(e.target.value) || 0})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  placeholder="0.00"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–¢–æ–≤–∞—Ä</label>
              <input
                type="text"
                value={editData.product || ''}
                onChange={(e) => setEditData({...editData, product: e.target.value})}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              />
            </div>
          </>
        );
      case 'sale':
        return (
          <>
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</label>
                <input
                  type="text"
                  value={editData.client || ''}
                  onChange={(e) => setEditData({...editData, client: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–°—É–º–º–∞ ‚Ç¨</label>
                <input
                  type="number"
                  value={editData.amount || ''}
                  onChange={(e) => setEditData({...editData, amount: parseFloat(e.target.value) || 0})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="0.00"
                />
              </div>
            </div>
          </>
        );
      case 'payment':
        return (
          <>
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</label>
                <input
                  type="text"
                  value={editData.recipient || ''}
                  onChange={(e) => setEditData({...editData, recipient: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="–ö–æ–º—É –ø–ª–∞—Ç–∏–º"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–°—É–º–º–∞ ‚Ç¨</label>
                <input
                  type="number"
                  value={editData.amount || ''}
                  onChange={(e) => setEditData({...editData, amount: parseFloat(e.target.value) || 0})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="0.00"
                />
              </div>
            </div>
          </>
        );
      default:
        return null;
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-2xl shadow-2xl p-6 max-w-md w-full mx-4">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">
            ‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          </h3>
          <button
            onClick={onCancel}
            className="text-gray-400 hover:text-gray-600"
          >
            ‚úï
          </button>
        </div>
        
        <div className="space-y-4">
          {getEditFields()}
        </div>
        
        <div className="flex space-x-3 mt-6">
          <button
            onClick={handleSave}
            className="flex-1 bg-gradient-to-r from-green-500 to-green-600 text-white py-2 px-4 rounded-lg font-medium hover:shadow-lg transition-all"
          >
            <Save className="h-4 w-4 inline mr-2" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </div>
    </div>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TabBook Demo
const TabBookDemo = () => {
  const { saveOperation, getOperation, lastOperations } = useLastOperation();
  const [operations, setOperations] = useState([]);
  const [editingOperation, setEditingOperation] = useState(null);
  const [editingType, setEditingType] = useState(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ TAB –∫–ª–∞–≤–∏—à–∏
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Tab' && !e.shiftKey) {
        e.preventDefault();
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π